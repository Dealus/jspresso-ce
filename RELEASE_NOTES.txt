3.5.5
=====
-Got rid of broken flexmojos wrapper plugin.
Update webapp/src/main/webapp/flex/index.html with the following values :
${bgcolor} => #869ca7
${width} => 100%
${height} => 100%
${swf} => myproject-startup-flex-client
${application} => myproject-startup-flex-client
${version_major} => 9
${version_minor} => 0
${version_revision} => 0
${title} => Wathever you want

- Switch to Maven3

- Framework logging changed from commons-logging to SLF4J

- Libraries versions updated :
    blazeds =>4.0.0.14931
    spring => 3.0.5.RELEASE
    spring-ldap => 1.3.1.RELEASE
    hibernate => 3.6.4.Final
    qooxdoo => 1.4.1
    commons-logging => 1.1.1
    commons-lang => 2.6
    commons-beanutils => 1.8.3
    commons-io => 2.0.1
    commons-fileupload => 1.2.2
    commons-pool => 1.5.6
    commons-dbcp => 1.4
    commons-digester => 2.1
    log4j => 1.2.16
    javassist => 3.12.1.GA
    slf4j => 1.6.1
    joda-time => 1.6.2
    bsf => 2.4.0
    stax-api => 1.0.1

- Due to the migration to BlazeDS 4, you must comment the following section 
in startup/flex/config/src/main/resources/services-config.xml :

        <login-command class="flex.messaging.security.TomcatLoginCommand" server="Tomcat"/>

- Due to the migration to BlazeDS 4, you must delete the following section 
in webapp/pom.xml :
    <dependency>
      <groupId>com.adobe.blazeds</groupId>
      <artifactId>blazeds-opt</artifactId>
    </dependency>

- servlet-api dependency was transitively added to the webapp due to a bad dependency declaration in one
of the used libraries. This is in violation of the servlet specification and resulted in a warning during the
application startup. We have now excluded this bad servlet-api dependency, but it has to be declared now in the
webapp pom.xml as "provided". So add the following dependency section in webapp/pom.xml :
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <scope>provided</scope>
    </dependency>
 

3.5.4
=====
No change to manually perform



3.5.3
=====
- Due to the introduction of client timezone management, the following change must be applied on the
existing projects that use the Qooxdoo frontend :
Edit the source file QooxdooApplicationStartup.java and replace
  public List<RemoteCommand> startQx(String startupLanguage)
      throws RemoteException {
    return super.start(startupLanguage);
  }
by
  public List<RemoteCommand> startQx(String startupLanguage, int timezoneOffset)
      throws RemoteException {
    return super.start(startupLanguage, timezoneOffset);
  }
  
- Wings and ULC frontends have been removed. There are almost nobody using them now and it
is useless maintaining them. It is strongly recommended to re-generate existing project using
the up-to-date archetype. If you want to manually update your projects poms, here are the steps
to perform :

1/ make the root pom inherit from jspresso-root instead of jspresso-dependencies :
  <parent>
    <groupId>org.jspresso.framework</groupId>
    <artifactId>jspresso-root</artifactId>
    <version>3.5-SNAPSHOT</version>
  </parent>
2/ edit the root pom and delete the following lines :
  <dependency>
    <groupId>org.jspresso.hrsample</groupId>
    <artifactId>hrsample-startup-ulc</artifactId>
    <version>${project.version}</version>
  </dependency>
  <dependency>
    <groupId>org.jspresso.hrsample</groupId>
    <artifactId>hrsample-startup-wings</artifactId>
    <version>${project.version}</version>
  </dependency>
3/ edit startup/pom.xml and delete the following lines :
  <module>wings</module>
and
  <profiles>
    <profile>
      <id>ulc</id>
      <modules>
        <module>ulc</module>
      </modules>
    </profile>
  </profiles>
4/ delete the startup/wings and startup/ulc folders
5/ edit the webapp/pom.xml and delete the following lines :
    <dependency>
      <groupId>org.jspresso.hrsample</groupId>
      <artifactId>${myproject}-startup-wings</artifactId>
    </dependency>
and
  <profiles>
    ...
  </profiles>
6/ edit webapp/src/main/web.xml and delete the sections :
  <!-- ULC deployment section -->
    ...
  <!-- End ULC deployment section -->
and
  <!-- WingS deployment section -->
    ...
  <!-- End WingS deployment section -->
7/ delete the following folders :
  webapp/src/main/webapp/webstart
and
  webapp/src/main/webapp/wings
8/ edit core/src/main/resources/beanRefFactory.xml and delete both ulc and wings
contexts sections.

- migrated to java 1.6 minimum

- Due to a change of the groupId of the GMaven plugin used to perform the SJS compilation, all existing projects
must perform a general search and replace in all pom.xml :
  <groupId>org.codehaus.groovy.maven</groupId>
  change to
  <groupId>org.codehaus.gmaven</groupId>


3.5.2
=====
- Controllers now implement themselves the ITranslationProvider interface. Thus, the
getTranslationProvider() method has been deprecated. the migrationn is simply to remove 
these method calls and use the controller as translation providers when needed.

- A new onClone(IEntity) lifecycle method has been added to the entity lifecycle.
The EmptyLifecycleInterceptor implements it, but if you directly implement
ILifecycleInterceptor interface, you will have to add the new method.

- For those of you who have derived the BasicLovViewDescriptorFactory to override the
createResultViewDescriptor method in order to customize the table result view of the list of value dialog,
the signature has changed from :
  protected BasicCollectionViewDescriptor createResultViewDescriptor(IComponentDescriptor<IEntity>)
  to
  protected BasicCollectionViewDescriptor createResultViewDescriptor(IComponentDescriptorProvider<IEntity>)



3.5.1
=====
- The new hyperlink management requires some extra library (dj-swingsuite + dependencies).
They are included in the new archetype but you have to update your existing applications
eclipse projects, i.e. in .classpath, add :
  <classpathentry
    kind="var"
    path="M2_REPO/chrriis/dj-swingsuite/0.9.1/dj-swingsuite-0.9.1.jar">
    <attributes>
      <attribute
        name="org.eclipse.jst.component.nondependency"
        value="" />
    </attributes>
  </classpathentry>
  
- The file save/open callback API has been improved by adding the file name in the method
signature.

- Hibernate "list" index column mapping has been modified to avoid duplicates. For instance,
given a Parent-Child 1-N relationship named children, the previously generated column was
CHILDREN_SEQ and it is now PARENT_CHILDREN_SEQ. Schemas must be updated accordingly.


  
3.5.0
=====
- nesting view descriptors (BasicNestingViewDescriptor) have been removed.
You can safely change their reference to border view descriptors (BasicBorderViewDescriptor)
setting the "centerViewDescriptor" to the old "nestedViewDescriptor".

- Due to a API refactoring in component view descriptors, all references to
BasicSubviewDescriptor must be changed to BasicPropertyViewDescriptor.

- Due to introduction of sorting directions in orderingProperties (see 2787655), the API
has changed on component and collection descriptors. Instead of setting the ordering
properties as a list, you must now use a map keyed by the ordering properties
and valued by the sort directions (ESort.ASCENDING or ESort.DESCENDING)

- To avoid naming collisions between framework method names and business methods, the component and
entity getContract() method has been renamed to getComponentContract().

- HSQL, DBCP, Pool versions are now fixed in Jspresso root Pom. You should get rid of these artifacts
in the dependencyManagement section of your existing projects root Poms.

- HSQL is known not to correctly report SQL error codes during batch update if a failure occurs
in one of the batched SQL. This prevents Jspresso to cleanly handle these exceptions. HSQL will
be fixed in the next 1.9 release. Until then, the workaround is to disable jdbc batching when using HSQL
by completing the context.xml files of existing projects, adding in the hibernateSessionFactory
definition :
   <prop key="hibernate.jdbc.batch_size">0</prop>
  
- To benefit from the new translation mechanism for nested property names, you should change view.xml
in the existing Jspresso applications :

original definition :
  <bean
    id="applicationMessageSource"
    class="org.springframework.context.support.ResourceBundleMessageSource">

updated definition :
  <bean
    id="applicationMessageSource"
    parent="abstractApplicationMessageSource">

- Project created with the updated archetype require Maven 2.1+ to compile due tothe use
of the new "prepare-package" phase.

- In order to be able to add item selection listeners to view descriptors, we had to refactor 
org.jspresso.framework.binding.IConnectorSelectionListener and its peer classes to
org.jspresso.framework.util.event.IItemSelectionListener. This allows to avoid a circular
dependency between the view module and the binding module. The same applies for the 
org.jspresso.framework.binding.IConnectorValueChangeListener and its peer classes that have been
refactored to org.jspresso.framework.util.event.IValueChangeListener.

- Running the flash chart in swing requires some extra library (dj-nativeswing + dependencies).
They are included in the new archetype but you have to update your existing applications
eclipse projects, i.e. in .classpath, add :
  <classpathentry
    kind="var"
    path="M2_REPO/chrriis/dj-nativeswing/0.9.8/dj-nativeswing-0.9.8.jar">
    <attributes>
      <attribute
        name="org.eclipse.jst.component.nondependency"
        value="" />
    </attributes>
  </classpathentry>
  <classpathentry
    kind="var"
    path="M2_REPO/chrriis/dj-nativeswing-swt/0.9.8/dj-nativeswing-swt-0.9.8.jar">
    <attributes>
      <attribute
        name="org.eclipse.jst.component.nondependency"
        value="" />
    </attributes>
  </classpathentry>
  <classpathentry
    kind="var"
    path="M2_REPO/org/eclipse/swt/3.5.1/swt-3.5.1-win32-win32-x86.jar">
    <attributes>
      <attribute
        name="org.eclipse.jst.component.nondependency"
        value="" />
    </attributes>
  </classpathentry>

- The way Jspresso retrieves the HTTP session for server-based UIs (all except swing)
has been refactored. This refactoring requires a change on your existing projects :
in noulc-web.xml, add :
  <filter-mapping>
    <filter-name>HttpRequestHolder</filter-name>
    <servlet-name>ApplicationWingsServlet</servlet-name>
  </filter-mapping>
in ulc-web.xml, add :
  <filter-mapping>
    <filter-name>HttpRequestHolder</filter-name>
    <servlet-name>ApplicationUlcServlet</servlet-name>
  </filter-mapping>
  <filter-mapping>
    <filter-name>HttpRequestHolder</filter-name>
    <servlet-name>ApplicationWingsServlet</servlet-name>
  </filter-mapping>

- The action class hierarchy has been refactored (simplified). Now, all actions inheriting from
AbstractAction handle a "wrapped" and a "next" action for chaining. The following map
indicates how classes should be changed if used in your existing projects :
  WrappingAction         -> FrontendAction
  AbstractChainedAction  -> FrontendAction
  AbstractFrontendAction -> FrontendAction
  AbstractBackendAction  -> BackendAction

- We have re-designed the articulation between the backend controller and the application session.
Formerly, the session object was responsible for holding the Unit of Work and the merging of the
in-memory state back and forth during transactions. This behaviour has been transferred back to
the backend controller (it is how it should have been from the start) using the same API.
The application session object is then very lightweight and does not adhere anymore to the
persistence layer. All this coupling is now handled directly in the backend controller.
This has the following impact on the codebase :
  * All classes named "ApplicationSessionAwarexxx" have been renamed to "ControllerAwarexxx"
  * All IApplicationSession methods except getLocale(), getPrincipal() and getSubject()
    have been moved to the IBackendController interface. Whenever you use them in your actions code,
    the change should be as simple as changing getApplicationSession(actionContext) to
    getController(actionContext).

- Jspresso now uses FlexMojos 3.6 (the latest stable release of the plugin). Unfortunately, one of
the used features (html wrapper in the WAR module) is not backward compatible with 3.2. So when you
update your existing projects, follow the step by step procedure described here :
  * http://www.jspresso.org/forum/notice-301-snapshot-migration-flexmojos-36
  * http://www.jspresso.org/forum/notice-301-snapshot-migration-flexmojos-36-2


3.0.0
=====

- The 3.0 release introduces typesafe enums in place of interface constants.
This implies a light change in the spring definition files.
For instance instead of referring to static beans definitions like :

	<property
	  name="orientation"
	  ref="HORIZONTAL" />

You will now use direct enum injection :
	
	<property
	  name="orientation"
	  value="HORIZONTAL" />
	  
see http://sourceforge.net/tracker2/index.php?func=detail&aid=2319923&group_id=231671&atid=1083851




- The 3.0 release changes the way interceptors are declared in components and properties.
This is due to the fact the interceptors classes reference their owning component classes, thus
introducing a circular dependency that is unresolvable during the build whenever entities
and components are not available yet (not yet generated) making the spring context unable
to instanciate.
This leads to a mandatory change in the spring definitions files. Instead of referencing
interceptors instances directly in the component and property descriptors, the developer
must register the interceptor class names. The change is actually straightforward  as
detailed below :

For lifecycle interceptors, you must change definitions like :
  <property
    name="lifecycleInterceptorClassNames">
    <list>
      <bean
        class="org.jspresso.hrsample.model.service.TraceableLifecycleInterceptor"/>
    </list>
  </property>

with :
  <property
    name="lifecycleInterceptors">
    <list>
      <value>org.jspresso.hrsample.model.service.TraceableLifecycleInterceptor</value>
    </list>
  </property>
  
Same kind of modification for property processors :
  <property
    name="integrityProcessors">
    <list>
      <bean
        class="org.jspresso.hrsample.model.processor.EmployeePropertyProcessors$FirstNameProcessor"/>
    </list>
  </property>

becomes :
  <property
    name="integrityProcessorClassNames">
    <list>
      <value>org.jspresso.hrsample.model.processor.EmployeePropertyProcessors$FirstNameProcessor</value>
    </list>
  </property>

And finally, same modification for service delegates :
  <property
    name="serviceDelegateClassNames">
    <map>
      <entry
        key="org.jspresso.hrsample.model.service.EmployeeService">
        <bean
          class="org.jspresso.hrsample.model.service.EmployeeServiceDelegate"/>
      </entry>
    </map>
  </property>

becomes :
  <property
    name="serviceDelegateClassNames">
    <map>
      <entry
        key="org.jspresso.hrsample.model.service.EmployeeService"
        value="org.jspresso.hrsample.model.service.EmployeeServiceDelegate"/>
    </map>
  </property>
  



- The 3.0 release changes the framework artifacts group from org.jspresso to org.jspresso.framework.
You must update your POMs accordingly.
