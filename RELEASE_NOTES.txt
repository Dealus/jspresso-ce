3.0.1
=====
- nesting view descriptors (BasicNestingViewDescriptor) have been removed.
You can safely change their reference to border view descriptors (BasicBorderViewDescriptor)
setting the "centerViewDescriptor" to the old "nestedViewDescriptor".

- Due to a API refactoring in component view descriptors, all references to
BasicSubviewDescriptor must be changed to BasicPropertyViewDescriptor.

- Due to introduction of sorting directions in orderingProperties (see 2787655), the API
has changed on component and collection descriptors. Instead of setting the ordering
properties as a list, you must now use a map keyed by the ordering properties
and valued by the sort directions (ESort.ASCENDING or ESort.DESCENDING)

- To avoid naming collisions between framework method names and business methods, the component and
entity getContract() method has been renamed to getComponentContract().

- HSQL, DBCP, Pool versions are now fixed in Jspresso root Pom. You should get rid of these artifacts
in the dependencyManagement section of your existing projects root Poms.

- HSQL is known not to correctly report SQL error codes during batch update if a failure occurs
in one of the batched SQL. This prevents Jspresso to cleanly handle these exceptions. HSQL will
be fixed in the next 1.9 release. Until then, the workaround is to disable jdbc batching when using HSQL
by completing the context.xml files of existing projects, adding in the hibernateSessionFactory
definition :
   <prop key="hibernate.jdbc.batch_size">0</prop>
  
- To benefit from the new translation mechanism for nested property names, you should change view.xml
in the existing Jspresso applications :

original definition :
  <bean
    id="applicationMessageSource"
    class="org.springframework.context.support.ResourceBundleMessageSource">

updated definition :
  <bean
    id="applicationMessageSource"
    parent="abstractApplicationMessageSource">

- Project created with the updated archetype require Maven 2.1+ to compile due tothe use
of the new "prepare-package" phase.

- In order to be able to add item selection listeners to view descriptors, we had to refactor 
org.jspresso.framework.binding.IConnectorSelectionListener and its peer classes to
org.jspresso.framework.util.event.IItemSelectionListener. This allows to avoid a circular
dependency between the view module and the binding module. The same applies for the 
org.jspresso.framework.binding.IConnectorValueChangeListener and its peer classes that have been
refactored to org.jspresso.framework.util.event.IValueChangeListener.

- Running the flash chart in swing requires some extra library (dj-nativeswing + dependencies).
They are included in the new archetype but you have to update your existing applications
eclipse projects, i.e. in .classpath, add :
  <classpathentry
    kind="var"
    path="M2_REPO/chrriis/dj-nativeswing/0.9.8/dj-nativeswing-0.9.8.jar">
    <attributes>
      <attribute
        name="org.eclipse.jst.component.nondependency"
        value="" />
    </attributes>
  </classpathentry>
  <classpathentry
    kind="var"
    path="M2_REPO/chrriis/dj-nativeswing-swt/0.9.8/dj-nativeswing-swt-0.9.8.jar">
    <attributes>
      <attribute
        name="org.eclipse.jst.component.nondependency"
        value="" />
    </attributes>
  </classpathentry>
  <classpathentry
    kind="var"
    path="M2_REPO/org/eclipse/swt/3.5.1/swt-3.5.1-win32-win32-x86.jar">
    <attributes>
      <attribute
        name="org.eclipse.jst.component.nondependency"
        value="" />
    </attributes>
  </classpathentry>

- The way Jspresso retrieves the HTTP session for server-based UIs (all except swing)
has been refactored. This refactoring requires a change on your existing projects :
in noulc-web.xml, add :
  <filter-mapping>
    <filter-name>HttpRequestHolder</filter-name>
    <servlet-name>ApplicationWingsServlet</servlet-name>
  </filter-mapping>
in ulc-web.xml, add :
  <filter-mapping>
    <filter-name>HttpRequestHolder</filter-name>
    <servlet-name>ApplicationUlcServlet</servlet-name>
  </filter-mapping>
  <filter-mapping>
    <filter-name>HttpRequestHolder</filter-name>
    <servlet-name>ApplicationWingsServlet</servlet-name>
  </filter-mapping>

- the action class hierarchy has been refactored (simplified). Now, all actions inheriting from
AbstractAction handle a "wrapped" and a "next" action for chaining. The following map
indicates how classes should be changed if used in your existing projects :
  WrappingAction         -> FrontendAction
  AbstractChainedAction  -> FrontendAction
  AbstractFrontendAction -> FrontendAction
  AbstractBackendAction  -> BackendAction




3.0.0
=====

- The 3.0 release introduces typesafe enums in place of interface constants.
This implies a light change in the spring definition files.
For instance instead of referring to static beans definitions like :

	<property
	  name="orientation"
	  ref="HORIZONTAL" />

You will now use direct enum injection :
	
	<property
	  name="orientation"
	  value="HORIZONTAL" />
	  
see http://sourceforge.net/tracker2/index.php?func=detail&aid=2319923&group_id=231671&atid=1083851




- The 3.0 release changes the way interceptors are declared in components and properties.
This is due to the fact the interceptors classes reference their owning component classes, thus
introducing a circular dependency that is unresolvable during the build whenever entities
and components are not available yet (not yet generated) making the spring context unable
to instanciate.
This leads to a mandatory change in the spring definitions files. Instead of referencing
interceptors instances directly in the component and property descriptors, the developer
must register the interceptor class names. The change is actually straightforward  as
detailed below :

For lifecycle interceptors, you must change definitions like :
  <property
    name="lifecycleInterceptorClassNames">
    <list>
      <bean
        class="org.jspresso.hrsample.model.service.TraceableLifecycleInterceptor"/>
    </list>
  </property>

with :
  <property
    name="lifecycleInterceptors">
    <list>
      <value>org.jspresso.hrsample.model.service.TraceableLifecycleInterceptor</value>
    </list>
  </property>
  
Same kind of modification for property processors :
  <property
    name="integrityProcessors">
    <list>
      <bean
        class="org.jspresso.hrsample.model.processor.EmployeePropertyProcessors$FirstNameProcessor"/>
    </list>
  </property>

becomes :
  <property
    name="integrityProcessorClassNames">
    <list>
      <value>org.jspresso.hrsample.model.processor.EmployeePropertyProcessors$FirstNameProcessor</value>
    </list>
  </property>

And finally, same modification for service delegates :
  <property
    name="serviceDelegateClassNames">
    <map>
      <entry
        key="org.jspresso.hrsample.model.service.EmployeeService">
        <bean
          class="org.jspresso.hrsample.model.service.EmployeeServiceDelegate"/>
      </entry>
    </map>
  </property>

becomes :
  <property
    name="serviceDelegateClassNames">
    <map>
      <entry
        key="org.jspresso.hrsample.model.service.EmployeeService"
        value="org.jspresso.hrsample.model.service.EmployeeServiceDelegate"/>
    </map>
  </property>
  



- The 3.0 release changes the framework artifacts group from org.jspresso to org.jspresso.framework.
You must update your POMs accordingly.
