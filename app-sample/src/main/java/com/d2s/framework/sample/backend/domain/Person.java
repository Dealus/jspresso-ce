/*
 * Generated by Design2see. All rights reserved.
 */
package com.d2s.framework.sample.backend.domain;

/**
 * Person entity.
 * <p>
 * Generated by Design2see. All rights reserved.
 * <p>
 * 
 * @hibernate.mapping
 *           default-access = "com.d2s.framework.model.persistence.hibernate.property.EntityPropertyAccessor"
 *           package = "com.d2s.framework.sample.backend.domain"
 * @hibernate.class
 *           table = "PERSON"
 *           dynamic-insert = "true"
 *           dynamic-update = "true"
 *           persister = "com.d2s.framework.model.persistence.hibernate.entity.persister.EntityProxyJoinedSubclassEntityPersister"
 * @author Generated by Design2see
 */
public interface Person extends
  com.d2s.framework.sample.backend.domain.Nameable,
  com.d2s.framework.model.entity.IEntity,
  com.d2s.framework.sample.backend.domain.Traceable {

  /**
   * @hibernate.id generator-class = "assigned" column = "ID" type = "string"
   *               length = "36"
   * <p>
   * {@inheritDoc}
   */
  java.io.Serializable getId();

  /**
   * @hibernate.version column = "VERSION" unsaved-value = "null"
   * <p>
   * {@inheritDoc}
   */
  Integer getVersion();
  
  /**
   * Gets the birthDate.
   * 
   * @hibernate.property
   *           type = "date"
   * @hibernate.column
   *           name = "BIRTH_DATE"
   * @return the birthDate.
   */
  java.util.Date getBirthDate();

  /**
   * Sets the birthDate.
   * 
   * @param birthDate
   *          the birthDate to set.
   */
  void setBirthDate(java.util.Date birthDate);

  /**
   * Gets the age.
   * 
   * @return the age.
   */
  java.lang.Integer getAge();

  /**
   * Gets the birthCity.
   * 
   * @hibernate.many-to-one 
   *           cascade = "lock"
   * @hibernate.column
   *           name = "BIRTH_CITY_ID"
   * @return the birthCity.
   */
  com.d2s.framework.sample.backend.domain.City getBirthCity();

  /**
   * Sets the birthCity.
   * 
   * @param birthCity
   *          the birthCity to set.
   */
  void setBirthCity(com.d2s.framework.sample.backend.domain.City birthCity);

  /**
   * Gets the addressCity.
   * 
   * @hibernate.many-to-one 
   *           cascade = "lock"
   * @hibernate.column
   *           name = "ADDRESS_CITY_ID"
   * @return the addressCity.
   */
  com.d2s.framework.sample.backend.domain.City getAddressCity();

  /**
   * Sets the addressCity.
   * 
   * @param addressCity
   *          the addressCity to set.
   */
  void setAddressCity(com.d2s.framework.sample.backend.domain.City addressCity);

  /**
   * Gets the marriedTo.
   * 
   * @hibernate.many-to-one 
   *           cascade = "persist,merge,save-update,lock,refresh,evict,replicate"
   * @hibernate.column
   *           name = "MARRIED_TO_ID"
   *           unique = "true"
   * @return the marriedTo.
   */
  com.d2s.framework.sample.backend.domain.Person getMarriedTo();

  /**
   * Sets the marriedTo.
   * 
   * @param marriedTo
   *          the marriedTo to set.
   */
  void setMarriedTo(com.d2s.framework.sample.backend.domain.Person marriedTo);

  /**
   * Gets the gender.
   * 
   * @hibernate.property
   * @hibernate.column
   *           name = "GENDER"
   *           not-null = "true"
   * @return the gender.
   */
  java.lang.String getGender();

  /**
   * Sets the gender.
   * 
   * @param gender
   *          the gender to set.
   */
  void setGender(java.lang.String gender);

  /**
   * Gets the vegetarian.
   * 
   * @hibernate.property
   * @hibernate.column
   *           name = "VEGETARIAN"
   * @return the vegetarian.
   */
  java.lang.Boolean getVegetarian();

  /**
   * Sets the vegetarian.
   * 
   * @param vegetarian
   *          the vegetarian to set.
   */
  void setVegetarian(java.lang.Boolean vegetarian);

}
