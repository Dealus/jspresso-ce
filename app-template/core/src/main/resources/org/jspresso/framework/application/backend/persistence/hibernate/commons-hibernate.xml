<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"
  default-lazy-init="true">

  <!-- Hibernate root application context for the Jspresso framework. -->

  <bean id="componentTuplizerInit" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"
    lazy-init="false">
    <property name="targetClass"
      value="org.jspresso.framework.model.persistence.hibernate.entity.tuplizer.ProxyPojoComponentTuplizer" />
    <property name="targetMethod" value="setInlineComponentFactory" />
    <property name="arguments">
      <list>
        <ref bean="basicComponentFactory" />
      </list>
    </property>
  </bean>

  <bean id="entityInterceptor" class="org.jspresso.framework.application.backend.persistence.hibernate.ControllerAwareEntityProxyInterceptor">
    <property name="entityFactory" ref="controllerAwareEntityFactory" />
  </bean>

  <bean id="abstractHibernateSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
    <property name="dataSource" ref="dataSource" />
    <property name="mappingLocations">
      <list>
        <value>classpath*:**/*.hbm.xml</value>
      </list>
    </property>
    <property name="entityInterceptor" ref="entityInterceptor" />
    <property name="eventListeners">
      <map>
        <entry key="post-load">
          <list>
            <bean class="org.hibernate.event.def.DefaultPostLoadEventListener" />
            <bean class="org.jspresso.framework.application.backend.persistence.hibernate.LifecyclePostLoadEventListener" />
          </list>
        </entry>
      </map>
    </property>
    <property name="filterDefinitions">
      <list>
        <bean class="org.springframework.orm.hibernate3.FilterDefinitionFactoryBean">
          <property name="filterName" value="JspressoSessionGlobals" />
          <property name="parameterTypes">
            <map>
              <entry key="login" value="string" />
              <entry key="language" value="string" />
            </map>
          </property>
        </bean>
      </list>
    </property>
  </bean>

  <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory" ref="hibernateSessionFactory" />
    <property name="entityInterceptor" ref="entityInterceptor" />
  </bean>

  <bean id="transactionTemplate" class="org.jspresso.framework.application.backend.ControllerAwareTransactionTemplate">
    <property name="transactionManager" ref="transactionManager" />
  </bean>

  <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
    <property name="sessionFactory" ref="hibernateSessionFactory" />
    <property name="flushModeName" value="FLUSH_COMMIT" />
    <property name="entityInterceptor" ref="entityInterceptor" />
  </bean>

  <!-- Hibernate root action beans. -->
  <bean abstract="true" id="abstractHibernateBackAction"
    class="org.jspresso.framework.application.backend.action.persistence.hibernate.AbstractHibernateAction" />

  <bean id="criteriaFactoryBase" abstract="true"
    class="org.jspresso.framework.model.persistence.hibernate.criterion.DefaultCriteriaFactory">
    <property name="triStateBooleanSupported" ref="triStateBooleanSupported" />
  </bean>

  <bean id="criteriaFactory" parent="criteriaFactoryBase" />

  <bean id="applicationCriteriaRefiner" class="org.jspresso.framework.application.backend.action.persistence.hibernate.MockCriteriaRefiner" />

  <bean id="queryEntitiesBackActionBase" parent="abstractHibernateBackAction"
    class="org.jspresso.framework.application.backend.action.persistence.hibernate.QueryEntitiesAction">
    <property name="criteriaFactory" ref="criteriaFactory" />
    <property name="criteriaRefiner" ref="applicationCriteriaRefiner" />
  </bean>

  <bean id="queryEntitiesBackAction" parent="queryEntitiesBackActionBase" />

  <bean id="removeCollectionFromMasterBackAction" parent="abstractHibernateBackAction"
    class="org.jspresso.framework.application.backend.action.persistence.hibernate.RemoveCollectionFromMasterAction" />

  <bean id="removeModuleObjectAction" parent="abstractHibernateBackAction"
    class="org.jspresso.framework.application.backend.action.persistence.hibernate.module.RemoveModuleObjectAction" />

  <bean id="removeFromModuleObjectsAction" parent="abstractHibernateBackAction"
    class="org.jspresso.framework.application.backend.action.persistence.hibernate.module.RemoveFromModuleObjectsAction" />

  <bean id="saveBackAction" parent="abstractHibernateBackAction"
    class="org.jspresso.framework.application.backend.action.persistence.hibernate.SaveAction" />

  <bean id="saveModuleObjectBackAction" parent="saveBackAction"
    class="org.jspresso.framework.application.backend.action.persistence.hibernate.SaveModuleObjectAction" />

  <bean id="reloadBackAction" parent="abstractHibernateBackAction"
    class="org.jspresso.framework.application.backend.action.persistence.hibernate.ReloadAction" />

  <bean id="reloadModuleObjectBackAction" parent="reloadBackAction"
    class="org.jspresso.framework.application.backend.action.persistence.hibernate.ReloadModuleObjectAction" />

  <bean abstract="true" id="abstractHibernateBackController" parent="abstractBackController"
    class="org.jspresso.framework.application.backend.persistence.hibernate.HibernateBackendController">
    <property name="hibernateSessionFactory" ref="hibernateSessionFactory" />
    <property name="hibernateTemplate" ref="hibernateTemplate" />
    <property name="defaultTxFlushMode" value="COMMIT" />
  </bean>

  <bean id="smartEntityCloneFactoryBase" class="org.jspresso.framework.model.persistence.hibernate.entity.HibernateAwareSmartEntityCloneFactory"
    depends-on="componentTuplizerInit">
    <property name="accessorFactory" ref="accessorFactory" />
  </bean>

  <bean id="smartEntityCloneFactory" parent="smartEntityCloneFactoryBase" />

  <bean id="applicationBackController" parent="abstractHibernateBackController" scope="prototype" />
</beans>
