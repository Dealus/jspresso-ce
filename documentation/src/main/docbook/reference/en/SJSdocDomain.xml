<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'
  'http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd'>
<section>
  <title>Reference for SJS Domain</title>
  <section>
    <title>Root</title>
    <section>
      <title>Domain</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>projectName</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>Entity, Interface, Component, external, paramSet</code></listitem>
      </itemizedlist>
      <para>This root descriptor is used in the file application.groovy generated during the initialization of the project by Jspresso. There is generally no need to change it.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>Domain properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>projectName</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Project name</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>mute</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>Lets say if SJS is verbose or not during the generation process</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>includeDirectory</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>indicates in which directory are the include files</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>Component</title>
    <section>
      <title>Entity</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Domain</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>string, text, password, integer, date, bool, decimal, time, duration, percent, enumeration, typeEnumeration, range, refId, color, binary, java, sourcecode, html, reference, list, set, paramSet</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicEntityDescriptor</code></listitem>
      </itemizedlist>
      <para>This descriptor key to the description of the application model. It is used to describe a model entity.
The description of an entity can be very simple : <programlisting>Entite('person'){
  string_32 'name'
  string_32 'firstName'
  integer age
}</programlisting> or be richer to meet more complex needs : <programlisting>Entity('Department', extend: 'OrganizationalUnit',
        icon: 'department-48x48.png',
        rendered: ['ouId', 'name', 'manager', 'contact',
        'createTimestamp', 'lastUpdateTimestamp']) {
  reference 'company', ref: 'Company', reverse: 'Company-departments',            mandatory: true, composition: true
  set 'teams', ref: 'Team', composition: true
}</programlisting> <note>Concurrent access conflicts are automatically manage by Jspresso through optimistic locking</note></para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>Entity properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>extend</emphasis><para><code> ListOfString</code></para></para><para><code>ancestorDescriptors</code></para>
                </entry>
                <entry><para>Registers this Entity with a collection of ancestors. It directly translates the components inheritance hierarchy since the component property descriptors are the union of the declared property descriptors of the component and of its ancestors one. A component may have multiple ancestors which means that complex multiple-inheritance hierarchy can be mapped <programlisting>Interface('Nameable') { string_64 'name', mandatory: true }
Entity('City', <emphasis role='bold'>extend</emphasis>: 'Nameable'){...}</programlisting></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>description</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the description of this descriptor. Most of the descriptor descriptions are used in conjunction with the Jspresso i18n layer so that the description property set here is actually an i18n key used for translation. Description is mainly used for UI (in tooltips for instance) but may also be used for project technical documentation, contextual help, ...</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>icon</emphasis><para><code> String</code></para></para><para><code>iconImageURL</code></para>
                </entry>
                <entry><para>Sets the icon image URL of this descriptor. Supported URL protocols include : <itemizedlist> <listitem>all JVM supported protocols</listitem> <listitem>the jar:/ pseudo URL protocol</listitem> <listitem>the classpath:/ pseudo URL protocol</listitem> </itemizedlist> <programlisting>Interface('Traceable', <emphasis role='bold'>icon</emphasis>: 'traceable-48x48.png'){...}</programlisting></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>rendered</emphasis><para><code> ListOfRefField</code></para></para><para><code>renderedProperties</code></para>
                </entry>
                <entry><para>This property allows to define which of the component properties are to be rendered by default when displaying a UI based on this component family. For instance, a table will render 1 column per rendered property of the component. Any type of property can be used except collection properties. Since this is a List queriable properties are rendered in the same order. Whenever this property is null (default value) Jspresso determines the default set of properties to render based on their types, e.g. ignores collection properties. Note that this property is not inherited by children descriptors, i.e. even if an ancestor defines an explicit set of rendered properties, its children ignore this setting. <programlisting>Entity('Employee',
  <emphasis role='bold'>rendered</emphasis>: ['name', 'firstName', 'ssn', 'age']){...}</programlisting></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>queryable</emphasis><para><code> ListOfRefField</code></para></para><para><code>queryableProperties</code></para>
                </entry>
                <entry><para>This property allows to define which of the component properties are to be used in the filter UIs that are based on this component family (a QBE screen for instance). Since this is a List queriable properties are rendered in the same order. Whenever this this property is null (default value), Jspresso chooses the default set of queryable properties based on their type. For instance, collection properties and binary properties are not used but string, numeric, reference, ... properties are. A computed property cannot be used since it has no data store existance and thus cannot be queried upon. Note that this property is not inherited by children descriptors, i.e. even if an ancestor defines an explicit set of queryable properties, its children ignore this setting <programlisting>Entity('Employee',
  <emphasis role='bold'>queryable</emphasis>: ['name', 'firstName', 'ssn', 'age']){...}</programlisting></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>uncloned</emphasis><para><code> ListOfRefField</code></para></para><para><code>unclonedProperties</code></para>
                </entry>
                <entry><para>Configures the properties that must not be cloned when this component is duplicated. For instance, tracing informations like a created timestamp should not be cloned; a SSN neither. For a given component, the uncloned properties are the ones it defines augmented by the ones its ancestors define. There is no mean to make a component property clonable if one of the ancestor declares it un-clonable. <programlisting>Entity('Employee', <emphasis role='bold'>uncloned</emphasis>: ['managedOu', 'ssn']){...}</programlisting></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>ordering</emphasis><para><code> Map</code></para></para><para><code>orderingProperties</code></para>
                </entry>
                <entry><para>Ordering properties are used to sort un-indexed collections of instances of components backed by this descriptor. This sort order can be overridden on the finer collection property level to change the way a specific collection is sorted. This property consist of a Map whose entries are composed with the property name as key and the sort order for this property as String "ASCENDING" or "DESCENDING" <programlisting>Entity('Employee', <emphasis role='bold'>ordering</emphasis>: [name: "ASCENDING"]){...}</programlisting></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>pageSize</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>Whenever a collection of this component type is presented in a pageable UI, this property gives the size (number of component instances) of one page. This size can usually be refined at a lower level (e.g. at reference property descriptor for "lists of values"). A null value (default) disables paging for this component. <programlisting>Entity('Employee', <emphasis role='bold'>pageSize</emphasis>: 10){...}</programlisting></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>sqlName</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Instructs Jspresso to use this name when translating this component type name to the data store namespace. This includes , but is not limited to, database table names. By default Jspresso uses its default naming policy <programlisting>Entity('Employee', <emphasis role='bold'>sqlName</emphasis>: "T_EMPLOYEE"){...}</programlisting></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>grantedRoles</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>Assigns the roles that are authorized to manipulate components backed by this descriptor. This will directly influence the UI behaviour and even composition. Note that this authorization enforcement does not prevent programatic access that is of the developer responsbility. <programlisting>Entity('Employee',<emphasis role='bold'>grantedRoles</emphasis>: ['administrator', 'manager']){...}</programlisting></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>booleanWritabilityGates</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>Assigns a collection of gates to determine component writability. A component will be considered writable (updatable) if and only if all booleanGates gates are open. <programlisting> entity 'invoice', booleanWritabilityGates: ['val1', '!val2']
  </programlisting> <itemizedlist> <listitem>The first 'val1' gate is open if the val1 property is true on the underlying model</listitem> <listitem>The second '!val2' gate is open if val2 is false on the underlying model</listitem> </itemizedlist> <para></para> This mecanism is mainly used for dynamic UI authorization based on model state, e.g. a validated invoice should not be editable anymore. component assigned gates will be cloned for each component instance created and backed by this descriptor. So basically, each component instance will have its own, unshared collection of writability gates. <para></para> By default, component descriptors are not assigned any gates collection, i.e. there is no writability restriction. Note that gates do not enforce programatic writability of a component; only UI is impacted.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>rolesWritabilityGates</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>Assigns a collection of gates to determine component writability. A component will be considered writable (updatable) if and only if all RolesGates gates are open. <programlisting> entity 'invoice', rolesWritabilityGates: ['role1', '!role2'] </programlisting> <itemizedlist> <listitem>The first gate 'role1' is open if the connected user has the role1</listitem> <listitem>The second gate '!role2' is open if the connected user does not have the role2</listitem> </itemizedlist> Same mecanism has booleanWritabilityGates</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>extension</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Instructs the framework that a delegate class is attached to this component to implements getters for his computes properties. Properties defined with a computed = true are computed whith a setter defined in that delegate class.

Delegate instances are stateful. This allows for some caching of computing intensive properties. Delegate instances are lazily created when needed,  i.e. when the computed property is accessed either programmatically or by the binding layer. The delegate class must implement the IComponentExtension &lt;T&gt; interface (where &lt;T&gt; is assignable from the owning component class) and provide a public constructor taking exactly 1 parameter : the component instance. Jspresso provides an adapter class to inherit from : AbstractComponentExtension&lt;T&gt; . This helper class provides the methods to access the enclosing component from the delegate implementation as well as the Spring context it comes from, when needed.  <programlisting>Entity('Employee', <emphasis role='bold'>extension</emphasis>: 'EmployeeExtension'){
 integer 'age', <emphasis role='bold'>useExtension</emphasis>: true
}</programlisting></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>processor</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Class name in which all class processors associated with the properties of this component are grouped <programlisting>Entity('Employee', 
<emphasis role='bold'>processor:</emphasis>'EmployeePropertyProcessors'){...}</programlisting></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>interceptors</emphasis><para><code> ListOfString</code></para></para><para><code>lifecycleInterceptorClassNames</code></para>
                </entry>
                <entry><para>List of lifecycle interceptor instances that will be triggered on the different phases of the component lifecycle : when the component is instanciated in memory or when the component is created, updated, loaded or deleted in the data store. <programlisting>Interface('Traceable',
<emphasis role='bold'>interceptors</emphasis>: 'TraceableLifecycleInterceptor'){...}</programlisting></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>services</emphasis><para><code> Map</code></para></para><para><code>serviceDelegateClassNames</code></para>
                </entry>
                <entry><para>Much the same as serviceDelegateBeanNames except that instead of providing a map valued with Spring bean names, you provide a map valued with fully qualified class names. These class must : <itemizedlist> <listitem>provide a default constructor</listitem> <listitem>implement the IComponentService marker interface.</listitem> </itemizedlist> When needed, Jspresso will create service delegate instances.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>serviceBeans</emphasis><para><code> Map</code></para></para><para><code>serviceDelegateBeanNames</code></para>
                </entry>
                <entry><para>Registers the collection of service delegate instances attached to this component. These delegate instances will automatically be triggered whenever a method of the service interface it implements get executed.For instance : <itemizedlist> <listitem>the component interface is MyBeanClass. It implements the service interface MyService.</listitem> <listitem>the service interface MyService contains method int foo(String).</listitem> <listitem>the service delegate class, e.g. MyServiceImpl must implement the method int foo(MyBeanClass,String). Note that the parameter list is augmented with the owing component type as 1st parameter. This allows to have stateless implementation for delegates, thus sharing instances of delegates among instances of components.</listitem> <listitem>when foo(String) is executed on an instance of MyBeanClass, the framework will trigger the delegate implementation, passing the instance of the component itself as parameter.</listitem> </itemizedlist> This property must be set with a map keyed by service interfaces and valued by Spring bean names (i.e. Spring ids). Each bean name corresponds to an instance of service delegate. When needed, Jspresso will query the Spring application context to retrieve the delegate instances. This property is equivalent to setting serviceDelegateClassNames except that it allows to register delegate instances that are configured externally in the Spring context. lifecycle interceptor instances must implement the IComponentService marker interface.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>parent</emphasis><para><code> Ref</code></para></para>
                </entry>
                <entry><para>Parent property allows to used an other descriptor as a model to override certain properties. This ability directly resulting from Spring configuration is generally not used in the model</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>toString</emphasis><para><code> String</code></para></para><para><code>toStringProperty</code></para>
                </entry>
                <entry><para>Allows to customize the string representation of a component instance. The property name assigned will be used when displaying the component instance as a string. It may be a computed property that composes several other properties in a human friendly format.  Whenever this property is null, the following rule apply to determine the toString property :  1. the first string property from the rendered property 2. the first rendered property if no string property is found among them Note that this property is not inherited by children descriptors, i.e. even if an ancestor defines an explicit toString property, its children ignore this setting.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>purelyAbstract</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>This property is used to indicate that the entity type described is to be considered abstract. Jspresso will prevent any instanciation through its generic actions or internal mecanisms. Trying to do so will result in a low level exception and reveals a coding (assembling) error.
However, an abstract entity will have a concrete representation in the data store that depends on the inheritance mapping strategy used . As of now, Jspresso uses the join-subclass inheritance mapping strategy when generating the Hibernate mapping so an abstract entity will end up as a table in the data store. <programlisting>Entity('OrganizationalUnit', <emphasis role='bold'>purelyAbstract</emphasis>: true){...}
Entity('Department', extend: 'OrganizationalUnit'){...} </programlisting></para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>Interface</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>Entity</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>extend, description, icon, rendered, queryable, uncloned, ordering, pageSize, sqlName, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, extension, processor, interceptors, services, serviceBeans, parent, toString, purelyAbstract</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Domain</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>string, text, password, integer, date, bool, decimal, time, duration, percent, enumeration, typeEnumeration, range, refId, color, binary, java, sourcecode, html, reference, list, set, paramSet</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicInterfaceDescriptor</code></listitem>
      </itemizedlist>
      <para>This descriptor is a mean of factorizing state/behaviour among components, entities or even sub-interfaces. This is a much less coupling mecanism than actual entity inheritance and can be used across entities that don't belong the the same inheritance hierarchy, or even accross types (entities, components, interfaces). <programlisting><emphasis role='bold'>Interface</emphasis>('Nameable') { string_64 'name', mandatory: true }

<emphasis role='bold'>Interface</emphasis>('Traceable',
        interceptors: 'TraceableLifecycleInterceptor',
        uncloned: ['createTimestamp', 'lastUpdateTimestamp'],
        icon: 'traceable-48x48.png') {
  date_time 'createTimestamp', paramSets: 'readOnly', parent: 'City'
  date_time 'lastUpdateTimestamp', readOnly: true
}

Entity('Employee', <emphasis role='bold'>extend</emphasis>: ['Nameable', 'Traceable']){
  ...
}</programlisting></para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>Interface properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>Component</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>Entity</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>extend, description, icon, rendered, queryable, uncloned, ordering, pageSize, sqlName, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, extension, processor, interceptors, services, serviceBeans, parent, toString, purelyAbstract</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Domain</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>string, text, password, integer, date, bool, decimal, time, duration, percent, enumeration, typeEnumeration, range, refId, color, binary, java, sourcecode, html, reference, list, set, paramSet</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicComponentDescriptor</code></listitem>
      </itemizedlist>
      <para>structures that are to be reused but don't have enough focus for being considered as entities. For instance MoneyAmount component could be composed of a decimal and a reference to a Money entity. This structure could then be reused in other elements of the domain like an Invoice or an Article. Jspresso terminology for these type of structures is "Inlined Component". Another example could be reused of contact informations <programlisting>Component('ContactInfo') {
  string_256 'address'
  reference 'city', ref: 'City'
  string_32 'phone'
  string_128 'email', regex: "*", regexSample: 'contact@acme.com'
}

Entity('Employee') {
  ...
  reference 'contact', ref: 'ContactInfo'
  ...
}</programlisting></para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>Component properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>Common</title>
    <section>
      <title>common</title>
      <para>This descriptor is an internal s SJS descriptor which is never used by the application.It s used by SJS to factorize commons properties.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>common properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>description</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the description of this descriptor. Most of the descriptor descriptions are used in conjunction with the Jspresso i18n layer so that the description property set here is actually an i18n key used for translation. Description is mainly used for UI (in tooltips for instance) but may also be used for project technical documentation, contextual help, ...</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>i18nNameKey</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets i18n key used for translation if it is different from the description</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>mandatory</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>Declare a property as mandatory. This will enforce mandatory checks when the owning component is persisted as well as when the properties updated individually. Moreover, this information allows the views bound to the property to be configured accordingly, e.g. display the property with a slightly modified label indicating it is mandatory. This constraint is also enforced programmatically.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>readOnly</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>Enforces a property to be read-only. This is only enforced at the UI level, i.e. the property can still be updated programmatically. The UI may take decisions like changing textfields into labels if it knows the underlying property is read-only</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>preferredWidth</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>This property allows for setting an indication of width for representing this property in a view.<para></para> Default value is null, so that the view factory will make its decision based on the type and/or other characteristics of the property (e.g. max length).</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>computed</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>Properties defined with a useExtension = true are computed with a getter. This getter is defined in the delegate class attached  by the <emphasis role='bold'>extension</emphasis> property to the Entity, Component or Interface.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>sqlName</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Instructs Jspresso to use this name when translating this component type name to the data store namespace. This includes , but is not limited to, database table names. By default Jspresso uses its default naming policy</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>parent</emphasis><para><code> Ref</code></para></para>
                </entry>
                <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>id</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>id created an identifier for the property. This identifier can then be referenced by other descriptors using refId</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>grantedRoles</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>Assigns the roles that are authorized to manipulate the property backed by this descriptor. This will directly influence the UI behaviour and even composition (e.g. show/hide columns or fields). Setting the collection of granted roles to null (default value) disables role based authorization on this property level. Note that this authorization enforcement does not prevent programmatic access that is of the developer responsbility.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>booleanWritabilityGates</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>Assigns a collection of gates to determine component writability. A component will be considered writable (updatable) if and only if all booleanGates gates are open. <programlisting> entity 'invoice', booleanWritabilityGates: ['val1', '!val2']
  </programlisting> <itemizedlist> <listitem>The first 'val1' gate is open if the val1 property is true on the underlying model</listitem> <listitem>The second '!val2' gate is open if val2 is false on the underlying model</listitem> </itemizedlist> This mecanism is mainly used for dynamic UI authorization based on model state, e.g. a validated invoice should not be editable anymore. component assigned gates will be cloned for each component instance created and backed by this descriptor. So basically, each component instance will have its own, unshared collection of writability gates. <para></para> By default, component descriptors are not assigned any gates collection, i.e. there is no writability restriction. Note that gates do not enforce programatic writability of a component; only UI is impacted.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>rolesWritabilityGates</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>Assigns a collection of gates to determine component writability. A component will be considered writable (updatable) if and only if all RolesGates gates are open. <programlisting> entity 'invoice', rolesWritabilityGates: ['role1', '!role2'] </programlisting> <itemizedlist> <listitem>The first gate 'role1' is open if the connected user has the role1</listitem> <listitem>The second gate '!role2' is open if the connected user does not have the role2</listitem> </itemizedlist> Same mecanism has booleanWritabilityGates</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>unicityScope</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Makes this property part of a unicity scope. All tuples of properties belonging to the same unicity scope are enforced to be unique in the component type scope. This concretely translates to unique constraints in the datastore spanning the properties composing the unicity scope. Note that, for performance reasons, unicity scopes are only enforced by the persistence layer.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>delegateWritable</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>Instructs the framework that a delegate-computed property is writable. Most of the time, a computed property is read-only. Whenever a computed property is made writable through the use of delegateWritable=true, the delegate class must also provide a setter for the computed property. Defult value is false.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>processors</emphasis><para><code> ListOfString</code></para></para><para><code>integrityProcessorClassNames</code></para>
                </entry>
                <entry><para>Registers a list of property processor instances that will be triggered on the different phases of the property modification, i.e. : <itemizedlist> <listitem>before the property is modified, usually for controlling the incoming value</listitem> <listitem>while (actually just before the actual assignment) the property is modified, allowing to intercept and change the incoming value</listitem> <listitem>after the property is modified, allowing to trigger some post-modification behaviour (e.g. tracing, domain integrity management, ...)</listitem> </itemizedlist> Property processor instances must implement the IPropertyProcessor&lt; E, F&gt; interface where &lt;E, F&gt; represent respectively the type of the owning component and the type of the property. Since there are 3 methods to implement in the interface (1 for each of the phase described above), Jspresso provides an adapter class with empty implementations to override : EmptyPropertyProcessor&lt;E , F&gt;. <para></para> Whenever the underlying property is a collection property, the interface to implement is ICollectionPropertyProcessor&lt;E, F&gt;  (or extend EmptyCollectionPropertyProcessor&lt;E, F&gt;) with 4 new phases introduced : <itemizedlist> <listitem>before an element is added to the collection property</listitem> <listitem>after an element is added to the collection property</listitem> <listitem>before an element is removed from the collection property</listitem> <listitem>after an element is removed from the collection property</listitem> </itemizedlist></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>initializationMapping</emphasis><para><code> Map</code></para></para>
                </entry>
                <entry><para>This property allows to pre-initialize UI filters that are based on this reference property. This includes : <itemizedlist> <listitem>explicit filters that are dispayed for "list of values"</listitem> <listitem>implicit filters thet are use behind the scene for UI auto-completion</listitem> </itemizedlist> The initialization mapping property is a Map keyed by referenced type property names (the properties to be initialized). Values in this map can be either : <itemizedlist> <listitem>a constant value. In that case, the filter property is initialize with this constant value.</listitem> <listitem>a owning component property name. In that case, the filter property  is initialize with the value of the owning component property.</listitem> </itemizedlist></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>paramSets</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>paramSets makes it possible to use a list of paramSet.  The properties declared in the paramSet come to be added to the properties of the current descriptor.  The properties brought by the paramSet can be overridden  by the current descriptor. If a property is overridden with the null value the property is ignored.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>versionControl</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>This property allows to fine tune wether this component property participates in optimistic versioning. It mainly allows to declare some properties that should be ignored regarding optimistic versioning thus lowering the risk of version conflicts between concurrent users. Of course, this feature has to be used with care since it may generate phantom updates to the data store.<para></para> Default value is true so that any change in the described property increases the owning component version.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>computedFurther</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>Forces a property to be considered as a computed property by the framework. A computed property will be completely ignored by the persistence layer and its management is left to the developer.

Properties declared with <emphasis role='bold'>computed = true</emphasis> are considered computed. However, there is sometimes a need to declare a property at some level (e.g. in an interface descriptor) and let lower level implementation decide how to handle this common property. In that case, you can declare this property computedFurther=true Default value is false</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>BasicType</title>
    <section>
      <title>string</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicStringPropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>Field Declaration of type String. To be used with _n where the value n determine the maximum string length  <programlisting><emphasis role='bold'>string_32</emphasis> 'name'
<emphasis role='bold'>string_10</emphasis> 'zipCode' </programlisting></para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>string properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>maxLength</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>Configures the maximum string. Not needed with SJS which uses <emphasis role='bold'>string_n</emphasis></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>regex</emphasis><para><code> Regexp</code></para></para><para><code>regexpPattern</code></para>
                </entry>
                <entry><para>regex pattern (regular expression) to be applied to validate the string <programlisting> string_128 'email', <emphasis role='bold'>regex</emphasis>: "[\w\-\.]*@[\w\-\.]", 
       <emphasis role='bold'>regexSample</emphasis>: 'contact@acme.com' </programlisting></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>regexSample</emphasis><para><code> String</code></para></para><para><code>regexpPatternSample</code></para>
                </entry>
                <entry><para>Sample of a valid value for the regex pattern (see regex)</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>defaultValue</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the default value for the field</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>text</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>string</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>maxLength, regex, regexSample, defaultValue, description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicTextPropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>Field declaration of type text. To be used with _n where the value n determine the maximum text length</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>text properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>fileFilter</emphasis><para><code> Map</code></para></para>
                </entry>
                <entry><para>This property allows to configure the file filter that has to be displayed whenever a file system operation is initiated from the UI to operate on this property. This includes : <itemizedlist> <listitem>setting the property value from a text file loaded from the file system</listitem> <listitem>saving the property text value to a file on the file system</listitem> </itemizedlist> Jspresso provides built-in actions that do the above and configure their UI automatically based on the fileFilter property. The incoming Map must be structured like following : <itemizedlist> <listitem>keys are translation keys that will be translated by Jspresso i18n layer and presented to the user as the group name of the associated extensions, e.g. "HTML files"</listitem> <listitem>values are the extension list associated to a certain group name, e .g. a list containing [".html",".htm"]</listitem> </itemizedlist></para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>password</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>string</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>maxLength, regex, regexSample, defaultValue, description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicPasswordPropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>Describes a property used for password values. For obvious security reasons, this type of properties will hardly be part of a persistent entity. However it is useful for defining transient view models, e.g. for implementing a change password action. Jspresso will automatically adapt view fields accordingly, using password fields, to interact with password properties.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>password properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>integer</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicIntegerPropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>Describes an integer property</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>integer properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>minValue</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>Configures the upper bound of the allowed values. Default value is null, meaning unbound</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>maxValue</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>Configures the lower bound of the allowed values. Default value is null, meaning unbound</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>defaultValue</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>Sets the default value for the field</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>date</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicDatePropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>Describes a date based property. Wether the date property should include time information or not, can be configured using <emphasis role='bold'>date</emphasis> or <emphasis role='bold'>date_time</emphasis> declaration</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>date properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>type</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Configures if date property should include time information or not. Not needed with SJS which uses <emphasis role='bold'>date</emphasis> or <emphasis role='bold'>date_time</emphasis></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>defaultValue</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the default value for the field</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>bool</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicBooleanPropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>Describes a boolean property</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>bool properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>defaultValue</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>Sets the default value for the field</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>decimal</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicDecimalPropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>Describes a decimal property. Property value is either stored as a Double or as a BigDecimal depending on the usingBigDecimal property</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>decimal properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>minValue</emphasis><para><code> BigDecimal</code></para></para>
                </entry>
                <entry><para>Configures the upper bound of the allowed values. Default value is null, meaning unbound</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>maxValue</emphasis><para><code> BigDecimal</code></para></para>
                </entry>
                <entry><para>Configures the lower bound of the allowed values. Default value is null, meaning unbound</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>usingBigDecimal</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>Configures the property to be managed usin java.math.BigDecimal. Default value is false which means java.lang.Double will be used.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>maxFractionDigit</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>Configures the precision of the decimal property. Default value is null which means unlimited.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>defaultValue</emphasis><para><code> BigDecimal</code></para></para>
                </entry>
                <entry><para>Sets the default value for the field</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>time</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicTimePropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>Describes a property used to hold time only values. These properties use a Date to store their value but only the time part of the value is relevant</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>time properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>defaultValue</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the default value for the field</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>duration</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicDurationPropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>Describes a property used to store a duration value. Duration is stored in the form of a number of milliseconds. duration properties are cleanly handled by Jspresso UI layer for both displaying / editing duration properties in a convenient human format.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>duration properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>maxMillis</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>Configures the maximum duration value this property accepts in milliseconds. Default value is null, meaning unbound.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>defaultValue</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>Sets the default value for the field</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>percent</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>decimal</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>minValue, maxValue, usingBigDecimal, maxFractionDigit, defaultValue, description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicPercentPropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>This is a specialization of decimal descriptor to handle percentage values. The impact of using this descriptor is only on the UI level that will be configured accordingly, i.e. displaying/editing properties as percentage instead of their raw decimal values.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>percent properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>enumeration</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicEnumerationPropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>descriptor for properties whose values are enumerated strings. An example of such a property is gender whose value can be M (for "Male") or F (for "Female"). Actual property values can be codes that are translated for inclusion in the UI. Such properties are usually rendered as combo-boxes.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>enumeration properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>enumName</emphasis><para><code> String</code></para></para><para><code>enumerationName</code></para>
                </entry>
                <entry><para>This property allows to customize the i18n keys used to translate the enumeration values, thus keeping the actual values shorter. For instance consider the gender enumeration, composed of the M (for "Male") and F (for "Female") values. Setting an enumeration name to "GENDER" will instruct Jspresso to look for translations named "GENDER_M" and "GENDER_F". This would allow for using M and F in other enumeration domains with different semantics and translations.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>maxLength</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>Sets the max size of the values.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>valuesAndIcons</emphasis><para><code> Map</code></para></para><para><code>valuesAndIconImageUrls</code></para>
                </entry>
                <entry><para>Defines the list of values as well as an icon image URL per value this enumeration contains. The incoming Map is keyed by the actual enumeration values and valued by the icon image URLs. Enumeration values are translated in the UI using the following scheme : [enumerationName]_[value].</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>values</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>Defines the list of values this enumeration contains. Enumeration values are translated in the UI using the following scheme : [enumerationName]_[value].</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>defaultValue</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the property default value. When a component owning this property is instanciated, its properties are initialized using their default values. By default, a property default value is null. This incoming value can be either the actual property default value (as an Object) or its string representation whose parsing will be delegated to the property descriptor.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>typeEnumeration</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>TypeEnumerationPropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>This is a special enumeration descriptor that allows to build the enumeration out of a list of component descriptors. Enumeration values and icons are the names and icons of the registered component descriptors. For instance, this can be useful in the UI if you want to visually indicate the actual type of a element contained in a polymorphic collection</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>typeEnumeration properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>enumName</emphasis><para><code> String</code></para></para><para><code>enumerationName</code></para>
                </entry>
                <entry><para>This property allows to customize the i18n keys used to translate the enumeration values, thus keeping the actual values shorter. For instance consider the gender enumeration, composed of the M (for "Male") and F (for "Female") values. Setting an enumeration name to "GENDER" will instruct Jspresso to look for translations named "GENDER_M" and "GENDER_F". This would allow for using M and F in other enumeration domains with different semantics and translations.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>maxLength</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>Sets the max size of the values.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>components</emphasis><para><code> ListOfRef</code></para></para><para><code>componentDescriptors</code></para>
                </entry>
                <entry><para>Registers the list of component descriptors to build the enumeration values/icons from their names and icons.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>range</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>RangeEnumerationPropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>This is a special enumeration descriptor that allows to build the enumeration values out of a list of integer values. Obviously, no icon is provided for a given value</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>range properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>rangeName</emphasis><para><code> String</code></para></para><para><code>enumerationName</code></para>
                </entry>
                <entry><para>This property allows to customize the i18n keys used to translate the enumeration values, thus keeping the actual values shorter. For instance consider the gender enumeration, composed of the M (for "Male") and F (for "Female") values. Setting an enumeration name to "GENDER" will instruct Jspresso to look for translations named "GENDER_M" and "GENDER_F". This would allow for using M and F in other enumeration domains with different semantics and translations.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>minValue</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>The enumeration minimum bound. Default value is 0.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>maxValue</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>The enumeration maximum bound. Default value is 10.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>rangeStep</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>The step to use for constructing the enumeration values, starting from minValue up to maxValue. Default value is 1.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>refId</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>id</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
      </itemizedlist>
      <para>allows to point on a reference</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>refId properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>id</emphasis><para><code> Ref</code></para></para>
                </entry>
                <entry><para>Qualifies the type of element this property refers to.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>color</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicColorPropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>Describes a property used for storing a color. Color values are stored in the property as their string hexadecimal representation (0xrgba encoded). Jspresso cleanly handles color properties in views for both visually displaying and editing them without any extra effort. Moreover the ColorHelper helper class eases colors manipulation and helps converting to/from their hexadecimal representation.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>color properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>defaultValue</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the default value for the field</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>binary</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicBinaryPropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>Describes a property used to store a binary value in the form of a byte array</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>binary properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>maxLength</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>Sets the max size of the byte array.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>fileFilter</emphasis><para><code> Map</code></para></para>
                </entry>
                <entry><para>This property allows to configure the file filter that has to be displayed whenever a file system operation is initiated from the UI to operate on this property. This includes : <itemizedlist> <listitem>setting the property binary value from a file loaded from the file system</listitem> <listitem>saving the property binary value to a file on the file system</listitem> </itemizedlist> Jspresso provides built-in actions that do the above and configure their UI automatically based on the fileFilter property. The incoming Map must be structured like following : <itemizedlist> <listitem>keys are translation keys that will be translated by Jspresso i18n layer and presented to the user as the group name of the associated extensions, e.g. "JPEG images"</listitem> <listitem>values are the extension list associated to a certain group name, e .g. a list containing [".jpeg",".jpg"]</listitem> </itemizedlist></para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>java</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>binary</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>fileFilter, description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicJavaSerializablePropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>Describes a property used to store any java Serializable object. The property value is serialized/deserialized to/from the datastore. The operation is completely transparent to the developer, i.e. the developer never plays with the serialized form.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>java properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>maxLength</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>Sets the max size of the object in Byte.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>sourcecode</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>text</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>fileFilter, maxLength, regex, regexSample, defaultValue, description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicSourceCodePropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>Describes a property as handing sourcecode content. This instructs Jspresso to display the property value as sourcecode, using syntax coloring for instance, instead of displaying unformatted raw content. The language used to format the property text content may be defined explicitely using the language property.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>sourcecode properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>language</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Explicitely sets the language this sourcecode property should contain.  This is only a hint fo Jspresso to configure the UI components accordingly to interact with this property.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>html</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>text</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>fileFilter, maxLength, regex, regexSample, defaultValue, description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicHtmlPropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>Describes a property as handing HTML content. This instructs Jspresso to display the property value as HTML instead of raw text content.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>html properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>Association</title>
    <section>
      <title>reference</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>ref</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicReferencePropertyDescriptor</code></listitem>
      </itemizedlist>
      <para>This descriptor is used to describe a reference to an other component (entities, interfaces or components)</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>reference properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>ref</emphasis><para><code> Ref</code></para></para><para><code>referencedDescriptor</code></para>
                </entry>
                <entry><para>Qualifies the type of element this property refers to. It may point to any type of component descriptor, i.e. entity, interface or component descriptor.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>reverse</emphasis><para><code> Ref</code></para></para><para><code>reverseRelationEnd</code></para>
                </entry>
                <entry><para>Allows to make a relationship bi-directional. By default, when a relationdhip end is defined, it is only navigable from the owning component to the described end (default value is null). Assigning a reverse relationship ends instructs the framework that the relationship is bi-derectional. This implies several complementary features : <itemizedlist> <listitem>When one of the relationship ends is updated, the other side is automatically maintained by Jspresso, i.e. you never have to worry about reverse state. For instance, considering a Invoice - InvoiceLine bi-directional relationship , InvoiceLine.setInvoice(Invoice) and Invoice .addToInvoiceLines(InvoiceLine) are strictly equivalent.</listitem> <listitem>You can qualify a "N-N" relationship (thus creating an association table in the datastore behind the scene) by assigning 2 collection property decriptors as reverse relation ends of each other.</listitem> <listitem>You can qualify a "1-1" relationship (thus enforcing some unicity constraint in the datastore behind the scene) by assigning 2 reference property decriptors as reverse relation ends of each other.</listitem> </itemizedlist> Setting the reverse relation end operation is commmutative so that it automatically assigns bot ends as reverse, i.e. you only have to set the property on one side of the relationship.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>composition</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>Instructs the framework that this property has to be treated as a composition, in the UML terminology. This implies that reachable entities that are referenced by this property follow the owning entity lifecycle.  For instance, when the owning entity is deleted, the referenced entities in composition properties are also deleted. Whenever this property is not explicitely set by the developer, Jspresso uses sensible defaults : <itemizedlist> <listitem>collection properties are compositions unless they are bidirectional "N to N"</listitem> <listitem>reference properties are not composition</listitem> This property is strictly behavioural and does not impact the domain state itself. </itemizedlist></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>fetch</emphasis><para><code> String</code></para></para><para><code>fetchType</code></para>
                </entry>
                <entry><para>By default Jspresso apply a lazy loading stategy, by setting fetch=true Jspresso will ask hibernate to load the child entity when parent is loaded. This option has to be used carfully, if you define too many non-lazy associations in your object model, Hibernate will fetch the entire database into memory in every transaction.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>fkName</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Allows to customize the geneated foreign key (if any) name.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>list</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>reference</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>ref, reverse, composition, fetch, fkName, description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>ref, ref</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
      </itemizedlist>
      <para>This descriptor is used to describe a collection of components (entities, interfaces or components). A list allows for duplicates and preserves the order of the elements in the datastore through an implicit index column.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>list properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>ordering</emphasis><para><code> Map</code></para></para><para><code>orderingProperties</code></para>
                </entry>
                <entry><para>Ordering properties are used to sort this collection property if and only if it is un-indexed (not a List). The sort order set on the collection property can refine the default one that might have been set on the referenced collection level. This property consist of a Map whose entries are composed with : <itemizedlist> <listitem>the property name as key</listitem> <listitem>the sort order for this property as value. This is either a value of the ESort enum (ASCENDING or DESCENDING) or its equivalent string representation.</listitem> </itemizedlist> Ordering properties are considered following their order in the map iterator. A null value (default) will not give any indication for the collection property sort order and thus, will delegate to higher specification levels (i.e. the referenced collection sort order).</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>set</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>list</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>ordering, ref, reverse, composition, fetch, fkName, description, i18nNameKey, mandatory, readOnly, preferredWidth, computed, sqlName, parent, id, grantedRoles, booleanWritabilityGates, rolesWritabilityGates, unicityScope, delegateWritable, processors, initializationMapping, paramSets, versionControl, computedFurther</code></listitem>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>ref, ref</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Entity, Interface, Component</code></listitem>
      </itemizedlist>
      <para>This descriptor is used to describe a collection of components (entities, interfaces or components).. A set do not allow for duplicates and do not preserve the order of the elements in the datastore.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>set properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>Support</title>
    <section>
      <title>external</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Domain</code></listitem>
      </itemizedlist>
      <para>This descriptor allowed declaring references which are not described in the SJS description of the application. since all references are controlled by SJS, it is necessary to declare the external references.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>external properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>id</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>list identifiers of descriptors <programlisting><emphasis role='bold'>external</emphasis>(id: ['com.appli.model.content.aCatalog',
              'com.appli.model.content.aMenu'])</programlisting></para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>paramSet</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Domain, Entity, Interface, Component</code></listitem>
      </itemizedlist>
      <para>paramSet allows to create a reusable groups of properties in SJS declarations. <programlisting> paramSet 'myCommon', readOnly:true, mandatory:true  </programlisting> paramSet can be used by declaration SJS using the attribute paramSets</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>paramSet properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>namespace</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Domain, Entity, Interface, Component</code></listitem>
      </itemizedlist>
      <para>namespace allows to declare and open a namespace scope. The use of namespaces allows simplifying the declarations SJS referring to resources with a complex path. <programlisting> namespace('org.jspresso.hrsample'){...} </programlisting> This declaration allows, for example, to replace the following statement <programlisting> Entity('City', 
          icon: 'classpath:org/jspresso/hrsample/images/city-48x48.png'){...} </programlisting> by <programlisting> ('City',icon:'city-48x48.png') {...} </programlisting> With namespaces, conventions on the organization of the Jspresso's directories are used. In this exemple, images are in the subdirectory /images of the project</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>namespace properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>include</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Domain, Entity, Interface, Component</code></listitem>
      </itemizedlist>
      <para>include allows to use multi SJS sources files and to include them into each other. <programlisting> include('fileName') </programlisting></para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>include properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
  </section>
</section>
