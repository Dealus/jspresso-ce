<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'
  'http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd'>
<section>
  <title>Reference for SJS Front</title>
  <section>
    <title>Root</title>
    <section>
      <title>Front</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>form, table, listView, propertyView, image, actionView, treeNode, tree, tabs, split, border, grid, evenGrid, entityCardView, basicCardView, actionMap, action, workspace, controller, messageSource, external, template, paramSet, bean</code></listitem>
      </itemizedlist>
      <para>This root descriptor is used in the file application.groovy generated during the  initialization of the project by Jspresso. There is generally no need to change it.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>Front properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>Common</title>
    <section>
      <title>Security</title>
      <para>This descriptor is an internal s SJS descriptor which is never used by the application.It s used by SJS to factorize Security properties.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>Security properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>grantedRoles</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>Assigns the roles that are authorized to use this view. Whenever the user is not granted sufficient privileges, the view is replaced by an empty section at runtime. Setting the collection of granted roles to null (default value) disables role based authorization on the view level. The framework then checks for the model roles authorizations and will apply the same restrictions. If both view and model granted roles collections are null, then access is granted to anyone.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>booleanWritabilityGates</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>Assigns a collection of gates to determine view writability. A view will be considered writable (updatable) if and only if all booleanGates gates are open. <programlisting> form 'form1', booleanWritabilityGates: ['val1', '!val2']
  </programlisting> <itemizedlist> <listitem>The first 'val1' gate is open if the val1 property is true on the underlying model</listitem> <listitem>The second '!val2' gate is open if val2 is false on the underlying model</listitem> </itemizedlist> This mecanism is mainly used for dynamic UI authorization based on model state, e.g. a validated invoice should not be editable anymore. View assigned gates will be cloned for each view instance created and backed by this descriptor. So basically, each view instance will have its own, unshared collection of writability gates.  By default, view descriptors are not assigned any gates collection, i.e. there is no writability restriction. Note however that view actual writability is the combination of view and model writability.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>rolesWritabilityGates</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>Assigns a collection of gates to determine view writability. A view will be considered writable (updatable) if and only if all RolesGates gates are open. <programlisting> form 'form2', rolesWritabilityGates: ['role1', '!role2'] </programlisting> <itemizedlist> <listitem>The first gate 'role1' is open if the connected user has the role1</listitem> <listitem>The second gate '!role2' is open if the connected user does not have the role2</listitem> </itemizedlist> Same mecanism has booleanWritabilityGates</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>common</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>Security</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
      </itemizedlist>
      <para>This descriptor is an internal s SJS descriptor which is never used by the application.It s used by SJS to factorize commons properties.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>common properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>model</emphasis><para><code> RefDomain</code></para></para><para><code>modelDescriptor</code></para>
                </entry>
                <entry><para>Assigns the model descriptor backing the view. The model descriptor serves several purposes : <itemizedlist> <listitem>configuration of the view content. For instance whenever a form is assigned a component model descriptor, it will install 1 field per component rendering properties, unless otherwise specified in the view descriptor itself.</listitem> <listitem>configuration of the binding layer. There is no need for the developer to configure anything for the binding to occur between the view and the model. Based on their model descriptor, Jspresso will setup all the necessary plumbing to efficiently synchronize model properties with their view couterpart bi-directionally. This synchronization occurs implicitely using the observer pattern and one of the Jspresso key contract is to guarantee this synchronization seamlessly.</listitem> </itemizedlist> Although it is the developer responsibility to make sure the correct model descriptor is assigned to the view, there are cases where the framework will infer it. For instance, a composite view will by default transmit its model descriptor to its children that do not have their model descriptor explicitely set. This allows for setting the model descriptor only on the composite view and keep default null value on the children as an implicite model inheritance enablement.

 Most of the time it is not necessary to explicitly use the property model. By convention, with SJS, the name of the componant is prefixed by the name of the model. In the following example SJS automatically determines that the form uses the entity "Company" <programlisting> form 'Company.pane', ... </programlisting></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>validationModel</emphasis><para><code> RefDomain</code></para></para>
                </entry>
                <entry><para>This property is SJS specific. It allows to enforce SJS controls without actually  assigning a model to the generated view. This is especially useful when overriding  the default result table view on collection modules where the table model is determined at runtime.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>icon</emphasis><para><code> String</code></para></para><para><code>iconImageURL</code></para>
                </entry>
                <entry><para>Sets the icon image URL of this descriptor. Supported URL protocols include : <itemizedlist> <listitem>all JVM supported protocols</listitem> <listitem>the jar:/ pseudo URL protocol</listitem> <listitem>the classpath:/ pseudo URL protocol</listitem> </itemizedlist></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>name</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the name of this descriptor. Name is used in conjunction with the  Jspresso i18n layer so that the name property set here is actually an i18n  key used for translation.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>description</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the description of this descriptor. Most of the descriptor descriptions are used in conjunction with the Jspresso i18n layer so that the description property set here is actually an i18n key used for translation. Description is mainly used for UI (in tooltips for instance) but may also be used for project technical documentation, contextual help, ...</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>i18nNameKey</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets i18n key used for translation if it is different from the description</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>actionMap</emphasis><para><code> RefActionMap</code></para></para>
                </entry>
                <entry><para>Assigns the view action map. An action map is generally represented as a toolbar attached to the view. The toolbar follows the structure of the action map : <itemizedlist> <listitem>each action list is contained in its own toolbar section which is visually separated from the other sections. This allows for visually grouping related actions as they are grouped in the action lists.</listitem> <listitem>each action contained in an action list is represented by a toolbar button using the action image as icon and translated action description as tooltip.</listitem> </itemizedlist> Depending on the UI channel, the view action map may also be replicated in a component contextual menu. In that case, the translated action name is used to label each menu item. The same grouping rules apply for the contextual menu than for the toolbar.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>readOnly</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>Allows to set a view read-only, i.e. none of the view part will allow for updating the underlying model. This is mainly a shortcut to assigning an "always closed" writability gate. One difference though is that , since the framework knows that the view will never be updatable, it may take specific decisions to render properties in a slightly different way, e.g. instead of using a disabled textfied, use a label. Default value is false, i.e. view is updatable.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>background</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the background color of the UI component. The color must be defined using its string hexadecimal representation (0xrgba encoded)
Default value is null, meaning use UI default.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>foreground</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the foreground color of the UI component. The color must be defined using its string hexadecimal representation (0xrgba encoded)
Default value is null, meaning use UI default.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>font</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Allows to customize the font used by the UI component. The font must be string encoded using the pattern "[name];[style];[size]" : <itemizedlist> <listitem>[name] is the name of the font, e.g. arial.</listitem> <listitem>[style] is PLAIN, BOLD, ITALIC or a union of BOLD and ITALIC combined with the "**" character, e.g. BOLD**ITALIC.</listitem> <listitem>[size] is the size of the font, e.g. 10.</listitem> </itemizedlist> Any of the above pattern section can be left empty, thus falling back to the component default.
Default value is null, meaning use default component font.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>borderType</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the border type of the view. This is either a value of the EBorderType enum or its equivalent string representation : <itemizedlist> <listitem>NONE for no border</listitem> <listitem>SIMPLE for a line border</listitem> <listitem>TITLED for a titled border. The view is then labeled with its translated name and and icon. Whenever the view name has not been explicitely set, the model name is used is used.</listitem> </itemizedlist> Default value is EBorderType.NONE, i.e. no border.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>preferredWidth</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>Allows to set a preferred width (in pixels) for the created peer UI component. This will override default and give hints to the UI layouting system.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>preferredHeight</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>Allows to set a preferred height (in pixels) for the created peer UI component. This will override default and give hints to the UI layouting system.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>paramSets</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>paramSets makes it possible to use a list of paramSet.  The properties declared in the paramSet come to be added to the properties of the current descriptor.  The properties brought by the paramSet can be overridden  by the current descriptor. If a property is overridden with the null value the property is ignored.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>View</title>
    <section>
      <title>form</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>model, validationModel, icon, name, description, i18nNameKey, actionMap, readOnly, background, foreground, font, borderType, preferredWidth, preferredHeight, paramSets, grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front, left, right, top, bottom, east, west, south, north, center, cell, evenCell, views</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>fields, actionMap, list, set, map</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicComponentViewDescriptor</code></listitem>
      </itemizedlist>
      <para>form descriptors are surely one of the most commonly used view descriptors in Jspresso. It allows to implement advanced form-like views to interact with a single component model. Component properties that are displayed in the view are organized in an invisible grid. Each field component is labelled with the property name it displays and labels can be configured to be displayed aside or above their peer field. Property fields can be configured to span multiple form columns. Component view offer various straightforward customizations, but the most advanced and prowerful one is definitely the propertyView property  that allows to fine-tune each component UI field individually in a fields list.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>form properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>parent</emphasis><para><code> RefView</code></para></para>
                </entry>
                <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>labelsPosition</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Instructs Jspresso where to place the fields label. This is either a value of the ELabelPosition enum or its equivalent string representation : <itemizedlist> <listitem>ABOVE for placing each field label above the property UI component</listitem> <listitem>ASIDE for placing each field label aside the property UI component</listitem> <listitem>NONE for completely disabling fields labelling on the view</listitem> </itemizedlist> Default value is ELabelPosition.ASIDE, i.e. fields label next to the property UI component.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>columnCount</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>Configures the number of columns on this component view. Property fields that are to be displayed in the view are spread across columns and rows following their defined order. Whenever a row does not contain enough empty cells to recieve the next field (either because the last column has been reached or the next field has been configured to span multiple columns and there is not enough cells left in the current row to satisfty the span), a new row is created and the next field is added to the first column on the new row. Note that column count and span are defined in fields coordinates (the field including the property UI component + its label). The underlying grid is actually finer since it has to cope with the labels; but this is internal implementation details and Jspresso takes care of it, without the developer having to cope with labels placements. Default value is 1, meaning that all rendered fields will be stacked in a single column.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>fields</emphasis><para><code> ListOfField</code></para></para><para><code>renderedProperties</code></para>
                </entry>
                <entry><para>Determines which of the referenced component fields should be displayed The property must be configured with a List of fields to display
A null value (default), means that all non-scalar properties will be rendered using default rendered properties as specified in their referenced model descriptor.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>widths</emphasis><para><code> Map</code></para></para><para><code>propertyWidths</code></para>
                </entry>
                <entry><para>This property allows to simply define property spans in the underlying grid without having to extensively define the propertyViewDescriptors property. It must be configued with a Map containing only the properties that need to span more than 1 column. The other properties will follow the default span of 1. The Map is : <itemizedlist> <listitem>keyed by the name of the property</listitem> <listitem>valued by the number of columns of the property span</listitem> </itemizedlist> Default value is null, meaning all property fields have a span of 1.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
      <section>
        <title>fields</title>
        <itemizedlist>
          <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>form</code></listitem>
          <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>propertyView</code></listitem>
        </itemizedlist>
        <para>Open a list of propertyView to individually fine-tunes each field  in a form</para>
        <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
          <?dbfo keep-together='auto'?>
            <title>fields properties</title>
            <tgroup cols='2'>
              <colspec colname='property' colwidth='1*' />
              <colspec colname='description' colwidth='2*' />
              <thead>
                <row>
                  <entry align='left'>Property</entry>
                  <entry align='left'>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
                </row>
              </tbody>
            </tgroup>
        </table>
      </section>
    </section>
    <section>
      <title>table</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>model, validationModel, icon, name, description, i18nNameKey, actionMap, readOnly, background, foreground, font, borderType, preferredWidth, preferredHeight, paramSets, grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front, left, right, top, bottom, east, west, south, north, center, cell, evenCell, views</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>columns, actionMap, rowAction, itemSelectionAction, sortingAction, list, set, map</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicTableViewDescriptor</code></listitem>
      </itemizedlist>
      <para>This descriptor is used to implement a table view. This is certainly the most commonly used collection descriptor in Jspresso. A table view displays a collection of components (one row per component in the collection) detailed by a set of properties (one column per displayed component property). The table view will automatically adapt its columuns depending on the underlying property descriptors, e.g. : <itemizedlist> <listitem>columns for read-only properties won't be editable</listitem> <listitem>columns that are assigned writability gates will compute the editability of their cells based on each cell's gates</listitem> <listitem>columns will adapt their renderer/editor based on the underlying property type, e.g. a calendar component will be used for dates</listitem> <listitem>column titles will be filled with property names translations based on the user locale</listitem> <listitem>mandatory properties will be visually indicated</listitem> <listitem>...</listitem> </itemizedlist> A table view provides sensible defaults regarding its configuration, but it can be refined using either the simple rendered property or the more advanced yet lot more powerful columns declaration that opens a list of propertyView to individually fine-tunes each column</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>table properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>parent</emphasis><para><code> RefView</code></para></para>
                </entry>
                <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>columns</emphasis><para><code> ListOfField</code></para></para><para><code>renderedProperties</code></para>
                </entry>
                <entry><para>Determines which of the referenced component properties should be displayed as columns of the table The property must be configured with a List of columns to display A null value (default), means that all non-scalar properties will be rendered using default rendered properties as specified in their referenced model descriptor.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>horizontallyScrollable</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>This property allows to define the table horizontal scrolling behaviour. Whenever it is set to false, the corresponding table UI component will adapt its columns to fit the available horizontal space. Default value is true, i.e. table columns will have their default size and tha table will scroll horizontally as needed</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>sortable</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>This property allows to define the table horizontal sorting behaviour. Whenever it is set to false, the corresponding table UI component will not allow manual sorting of its rows. Default value is true, i.e. table allows for its rows to be sorted</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>selectionMode</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the selection mode of the collection view. <itemizedlist> <listitem>MULTIPLE_INTERVAL_SELECTION for allowing any type of selection</listitem> <listitem>SINGLE_INTERVAL_SELECTION for allowing only contiguous interval selection</listitem> <listitem>SINGLE_SELECTION for allowing only a single item selection</listitem> </itemizedlist> Default value MULTIPLE_INTERVAL_SELECTION, i.e. any type of selection allowed.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>rowAction</emphasis><para><code> RefAction</code></para></para>
                </entry>
                <entry><para>Registers an action that is implicitely triggered everytime a row is activated (e.g. double-clicked for current UI channels) on the collection view UI peer. The context of the action execution is the same as if the action was registered in the view action map.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>itemSelectionAction</emphasis><para><code> RefAction</code></para></para>
                </entry>
                <entry><para>Registers an action that is implicitely triggered everytime the selection changes on the collection view UI peer. The context of the action execution is the same as if the action was registered in the view action map.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>sortingAction</emphasis><para><code> RefAction</code></para></para>
                </entry>
                <entry><para>Configures the action to be activated when a sort is triggered by the user. It should be used with caution and rarely be overriden from the default.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>listView</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>model, validationModel, icon, name, description, i18nNameKey, actionMap, readOnly, background, foreground, font, borderType, preferredWidth, preferredHeight, paramSets, grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front, left, right, top, bottom, east, west, south, north, center, cell, evenCell, views</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>actionMap, rowAction, itemSelectionAction, list, set, map</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicListViewDescriptor</code></listitem>
      </itemizedlist>
      <para>This type of descriptor is used to implement a list view. A list view is a single column, uneditable collection view used to display a collection of components. Each item is displayed using a string representation that can be customized using the renderedProperty property. List views are rarely used since one might prefer its much more advanced cousin, i.e. the table view. Despite its low usage as an individual UI component, the list view is also used by Jspresso to describe tree parts. A collection of sibling tree nodes can actually be considered as being a list view and can be described as such. In the latter case, the renderedProperty property will be used to label the tree nodes.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>listView properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>parent</emphasis><para><code> RefView</code></para></para>
                </entry>
                <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>iconProvider</emphasis><para><code> RefBean</code></para></para><para><code>iconImageURLProvider</code></para>
                </entry>
                <entry><para>The icon image URL provider is the delegate responsible for inferring a tree node icon based on its underlying model. By default (i.e. when iconImageURLProvider is null), Jspresso will use the underlying component descriptor icon, if any. Using a custom icon image URL provider allows to implement finer rules like using different icons based on the underlying object state. There is a single method to implement to achieve this : String getIconImageURLForObject(Object userObject);</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>rendered</emphasis><para><code> RefField</code></para></para><para><code>renderedProperty</code></para>
                </entry>
                <entry><para>Configures the model property to be rendered in the list. Whenever this property is left to null (default value), the toStringProperty of the element component descriptor is used.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>selectionMode</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the selection mode of the collection view. <itemizedlist> <listitem>MULTIPLE_INTERVAL_SELECTION for allowing any type of selection</listitem> <listitem>SINGLE_INTERVAL_SELECTION for allowing only contiguous interval selection</listitem> <listitem>SINGLE_SELECTION for allowing only a single item selection</listitem> </itemizedlist> Default value MULTIPLE_INTERVAL_SELECTION, i.e. any type of selection allowed.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>rowAction</emphasis><para><code> RefAction</code></para></para>
                </entry>
                <entry><para>Registers an action that is implicitely triggered everytime a row is activated (e.g. double-clicked for current UI channels) on the collection view UI peer. The context of the action execution is the same as if the action was registered in the view action map.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>itemSelectionAction</emphasis><para><code> RefAction</code></para></para>
                </entry>
                <entry><para>Registers an action that is implicitely triggered everytime the selection changes on the collection view UI peer. The context of the action execution is the same as if the action was registered in the view action map.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>columns</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>table</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>propertyView</code></listitem>
      </itemizedlist>
      <para>Open a list of propertyView to individually fine-tunes each column in a table</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>columns properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>propertyView</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>model, validationModel, icon, description, i18nNameKey, actionMap, readOnly, background, foreground, font, borderType, preferredWidth, preferredHeight, paramSets, grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front, left, right, top, bottom, east, west, south, north, center, cell, evenCell, views, cells, columns, fields</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>actionMap, list, set, map</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicPropertyViewDescriptor</code></listitem>
      </itemizedlist>
      <para>This view descriptor serves 2 purposes : <itemizedlist> <listitem>configure complex, component based views : refine columns of table views and fields of form views.</listitem> <listitem>display a single property as an autonomous view, i.e. not as a table column or a form field.</listitem> </itemizedlist> The second usage might be a little bit unusual, but here is a use-case scenario : display a text area which maps a text property that contains XML content. This text area must be displayed in a split pane and provide actions to interact directly with the FS (save content to a file, load content from a file, ...). In that case, defining a property view alone on the text property of the owning component might be a good solution.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>propertyView properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>parent</emphasis><para><code> RefView</code></para></para>
                </entry>
                <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>name</emphasis><para><code> RefField</code></para></para>
                </entry>
                <entry><para>Sets the name of this descriptor. Name is used in conjunction with the  Jspresso i18n layer so that the name property set here is actually an i18n  key used for translation.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>width</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>When the property has to be displayed in a grid-like layout (e.g. in a component view), this property defines the umber of grid columns the corresponding UI component will span.<para></para> Default value is null, meaning use default span of 1</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>labelBackground</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>When the property has to be labelled (e.g. in a component view), this property defines the background color of the corresponding label. It might differ from the field component one. The color must be defined using its string hexadecimal representation (0xrgba encoded). Default value is null, meaning use UI default.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>labelFont</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>When the property has to be labelled (e.g. in a component view), this property defines the font of the corresponding label. It might differ from the field component one. The font must be string encoded using the pattern "[name];[style];[size]" :
<itemizedlist> <listitem>[name] is the name of the font, e.g. arial.</listitem> <listitem>[style] is PLAIN, BOLD, ITALIC or a union of BOLD and ITALIC combined with the "**" character, e.g. BOLD**ITALIC.</listitem> <listitem>[size] is the size of the font, e.g. 10.</listitem> </itemizedlist> Any of the above pattern section can be left empty, thus falling back to the component default.
Default value is null, meaning use default component font.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>labelForeground</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>When the property has to be labelled (e.g. in a component view), this property defines the foregroud color of the corresponding label. It might differ from the field component one. The color must be defined using its string hexadecimal representation (0xrgba encoded). Default value is null, meaning use UI default.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>image</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>model, validationModel, icon, name, description, i18nNameKey, actionMap, readOnly, background, foreground, font, borderType, preferredWidth, preferredHeight, paramSets, grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front, left, right, top, bottom, east, west, south, north, center, cell, evenCell, views</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>actionMap, list, set, map</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicImageViewDescriptor</code></listitem>
      </itemizedlist>
      <para>This type of view descriptor is used to display a binary property or a string property containing an URL as an image. By default, binary properties are rendered as button fields that allow to upload, download and query size of the binary content. This button field visually indicate whether the binary property is empty or not. Whenever you know that the underlying property is used to store image content, you can explicitely define an image view backed by the binary property descriptor and use it in your UI. Jspresso will then display the image whose content is stored in the binary property directly in the UI.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>image properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>parent</emphasis><para><code> RefView</code></para></para>
                </entry>
                <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>scrollable</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>Configures the image view to be either croped or scrollable when the display area is too small to display it. A value of true (default) means that the image view will be made scrollable</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>actionView</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>model, validationModel, icon, name, description, i18nNameKey, actionMap, readOnly, background, foreground, font, borderType, preferredWidth, preferredHeight, paramSets, grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front, left, right, top, bottom, east, west, south, north, center, cell, evenCell, views</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>actionMap, action, next, wrapped, rowAction, itemSelectionAction, sortingAction, list, set, map</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicActionViewDescriptor</code></listitem>
      </itemizedlist>
      <para>This type of view allows to make an action available as a view and thus participate in the UI composition as a visual component. An action view can then be embedded in surrounding a composite view. It litterally takes the action away from the toolbar/context menu it is located when registered in an action map and makes it a primary citizen of the UI.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>actionView properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>action</emphasis><para><code> RefAction</code></para></para>
                </entry>
                <entry><para>Assigns the action to display as a view. The action will typically be rendered as a button in the UI. whenever you want to size the icon used to display the action (and thus the button peer), you might use the preferredWidth / preferredHeight properties.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>renderingOptions</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Indicates how the actions should be rendered. This is either a value of the ERenderingOptions enum or its equivalent string representation : <itemizedlist> <listitem>LABEL_ICON for label and icon</listitem> <listitem>LABEL for label only</listitem> <listitem>ICON for icon only</listitem> </itemizedlist> Default value is null, i.e. determined from outside, e.g. the view factory.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>Tree</title>
    <section>
      <title>treeNode</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>model, validationModel, icon, name, description, i18nNameKey, actionMap, readOnly, background, foreground, font, borderType, preferredWidth, preferredHeight, paramSets, grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>nameElement</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>actionMap</code></listitem>
      </itemizedlist>
      <para><programlisting> treeNode('Department-teams.treeNode',
        render: 'ouId', actionMap: 'masterDetail')
treeNode('Company-departments.treeNode',
        render: 'ouId', actionMap: 'masterDetail')
treeNode('Company-teams.treeNode',
        render: 'ouId', actionMap: 'masterDetail')
</programlisting></para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>treeNode properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>parent</emphasis><para><code> RefView</code></para></para>
                </entry>
                <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>rendered</emphasis><para><code> RefField</code></para></para><para><code>renderedProperty</code></para>
                </entry>
                <entry><para>This property allows to define the model property used to label the node.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>tree</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>model, validationModel, icon, name, description, i18nNameKey, actionMap, readOnly, background, foreground, font, borderType, preferredWidth, preferredHeight, paramSets, grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>subTree, actionMap, rowAction, list, set, map</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicTreeViewDescriptor</code></listitem>
      </itemizedlist>
      <para>This descriptor is use to design a tree view. The way to define a tree view in Jspresso and SJS is a matter of assembling treeNode descriptors hierarchically. A treeNode descriptor is a group of sibling nodes that usually represent a component collection property. Each individual treeNode collection can be secured by using role-based authorization (i.e. grantedRoles) on its descriptor. There are no properties child or children with SJS.  The way in which the hierarchy of the tree is built depends on the overlap of the subTree declarations. <programlisting>
tree('Company.tree', render: 'name', icon: 'structure-48x48.png'){
  subTree('Company-departments.treeNode')
    subTree('Department-teams.treeNode')
  }
}
  </programlisting> This SJS declaration produces this type of tree <programlisting>
Company
    department 1
        team A
        team B
    department 2
        team C
        ...
    ...
  </programlisting>  But it is also possible to define a tree this way : <programlisting>
tree('Company.tree', render: 'name', icon: 'structure-48x48.png') {
  subTree('Company-departments.treeNode')
  subTree('Company-teams.treeNode')
}
  </programlisting> which produces this type of tree <programlisting>
Company
    departments
        department 1
        department 2
        ...
    teams
        team 1
        team 2
        ...
  </programlisting> In this second example you should notice intermediate collection property grouping nodes (departments and teams). They automatically appeared to clearly group the tree nodes belonging to the different collections.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>tree properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>parent</emphasis><para><code> RefView</code></para></para>
                </entry>
                <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>rendered</emphasis><para><code> RefField</code></para></para><para><code>renderedProperty</code></para>
                </entry>
                <entry><para>This property allows to define the model property used to label the root node.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>iconProvider</emphasis><para><code> RefBean</code></para></para><para><code>iconImageURLProvider</code></para>
                </entry>
                <entry><para>The icon image URL provider is the delegate responsible for inferring a tree node icon based on its underlying model. By default (i.e. when iconImageURLProvider is null), Jspresso will use the underlying component descriptor icon, if any. Using a custom icon image URL provider allows to implement finer rules like using different icons based on the underlying object state. There is a single method to implement to achieve this :
String getIconImageURLForObject(Object userObject);</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>expanded</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>Setting this property to true configures the created tree to appear with its node expanded. A value of false (default) means that the tree nodes are initially collapsed.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>itemSelectionAction</emphasis><para><code> RefAction</code></para></para>
                </entry>
                <entry><para>This property alows to bind an action that gets triggered every time the selection changes on the tree view. The action context passed to the action when it is executed is the same as if it had been registered on the tree view.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>rowAction</emphasis><para><code> RefAction</code></para></para>
                </entry>
                <entry><para>Registers an action that is implicitely triggered everytime a row is activated (e.g. double-clicked for current UI channels) on the collection view UI peer. The context of the action execution is the same as if the action was registered in the view action map.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>maxDepth</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>This property is used only when the tree (or sub-tree) is declared recursively, i.e. a tree level belongs to its own children hierarchy. Default value is 10, meaning that a maximum number of 10 levels can be nested.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
      <section>
        <title>subTree</title>
        <itemizedlist>
          <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
          <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>model, validationModel, icon, name, description, i18nNameKey, actionMap, readOnly, background, foreground, font, borderType, preferredWidth, preferredHeight, paramSets, grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
          <listitem><emphasis role='bold'>mandatory</emphasis> : <code>nameElement</code></listitem>
          <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>tree, subTree</code></listitem>
          <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>subTree</code></listitem>
          <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicSimpleTreeLevelDescriptor</code></listitem>
        </itemizedlist>
        <para>A SubTree is an instantiation of a TreeNode in a tree. In SJS a subTree has the same identifier as the treeNode it instantiates.</para>
        <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
          <?dbfo keep-together='auto'?>
            <title>subTree properties</title>
            <tgroup cols='2'>
              <colspec colname='property' colwidth='1*' />
              <colspec colname='description' colwidth='2*' />
              <thead>
                <row>
                  <entry align='left'>Property</entry>
                  <entry align='left'>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para><emphasis role='bold'>parent</emphasis><para><code> RefView</code></para></para>
                  </entry>
                  <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
                </row>
              </tbody>
            </tgroup>
        </table>
      </section>
    </section>
  </section>
  <section>
    <title>Composite view</title>
    <section>
      <title>tabs</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>model, validationModel, icon, name, description, i18nNameKey, actionMap, readOnly, background, foreground, font, borderType, preferredWidth, preferredHeight, paramSets, grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front, left, right, top, bottom, east, west, south, north, center, cell, evenCell, views</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>views, actionMap, list, set, map</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicTabViewDescriptor</code></listitem>
      </itemizedlist>
      <para>This composite view arranges its children in tabs. Each tab potentially displays a label (that is translated based on the name of the view in the tab), an icon (based on the icon of the view in the tab) and a tooltip (based on the description of the view in the tab). Default cascading order follows the order of nested view registrations in the container.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>tabs properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>parent</emphasis><para><code> RefView</code></para></para>
                </entry>
                <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>views</emphasis><para><code> ListOfView</code></para></para>
                </entry>
                <entry><para>Registers the list of views to be displayed as tabs. The tabs order follows the children views order of this list.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>cascadingModels</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>Enables the model "cascading" behaviour. This allows for instance to link 2 nested tables where the 2nd table model is the selected row of the first table (or null if selection is empty). Using cascadingModel=true is only necessary when tracking view selection on the master nested view. You don't need it if, for instance, the master nested view is a single model view like a omponent view. In the latter case, you can bind a table detail view just by adding it to the same composite without having to set cascadingModel=true. Default value is false, i.e. al nested views share the same model than the outer composite unless explicitely specified differently.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>renderingOptions</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Indicates how the actions should be rendered. This is either a value of the ERenderingOptions enum or its equivalent string representation : <itemizedlist> <listitem>LABEL_ICON for label and icon</listitem> <listitem>LABEL for label only</listitem> <listitem>ICON for icon only</listitem> </itemizedlist> Default value is null, i.e. determined from outside, e.g. the view factory.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>views</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>tabs, entityCardView, basicCardView</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>form, table, listView, propertyView, image, actionView, tabs, split, border, grid, evenGrid, entityCardView, basicCardView</code></listitem>
      </itemizedlist>
      <para>Open a list of views where each view can be defined "inline"</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>views properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>split</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>model, validationModel, icon, name, description, i18nNameKey, actionMap, readOnly, background, foreground, font, borderType, preferredWidth, preferredHeight, paramSets, grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front, left, right, top, bottom, east, west, south, north, center, cell, evenCell, views</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>left, right, top, bottom, actionMap, list, set, map</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicSplitViewDescriptor</code></listitem>
      </itemizedlist>
      <para>This composite view arranges its children in a container splitted either horizontally or vertically.  With SJS the orientation is defined directly in the name of the descriptor : <emphasis role='bold'>split_vertical</emphasis> or <emphasis role='bold'>split_horizontal</emphasis> An horizontal split disposes its 2 children left and right whereas a vertical split disposes its 2 children top and bottom. The dividing bar can typically be moved by the user to distribute the available space. Default cascading order for master-detail is : left -> right or top -> bottom depending on the split orientation.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>split properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>parent</emphasis><para><code> RefView</code></para></para>
                </entry>
                <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>orientation</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>With SJS the orientation is defined directly in the name of the descriptor : <emphasis role='bold'>split_vertical</emphasis> or <emphasis role='bold'>split_horizontal</emphasis></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>left</emphasis><para><code> RefView</code></para></para><para><code>leftTopViewDescriptor</code></para>
                </entry>
                <entry><para>Sets the child view to layout in the left zone of a split_horizontal</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>right</emphasis><para><code> RefView</code></para></para><para><code>rightBottomViewDescriptor</code></para>
                </entry>
                <entry><para>Sets the child view to layout in the rigth zone of a split_horizontal</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>top</emphasis><para><code> RefView</code></para></para><para><code>leftTopViewDescriptor</code></para>
                </entry>
                <entry><para>Sets the child view to layout in the top zone of a split_vertical</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>bottom</emphasis><para><code> RefView</code></para></para><para><code>rightBottomViewDescriptor</code></para>
                </entry>
                <entry><para>Sets the child view to layout in the bottom zone of a split_vertical</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>cascadingModels</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>Enables the model "cascading" behaviour. This allows for instance to link 2 nested tables where the 2nd table model is the selected row of the first table (or null if selection is empty). Using cascadingModel=true is only necessary when tracking view selection on the master nested view. You don't need it if, for instance, the master nested view is a single model view like a omponent view. In the latter case, you can bind a table detail view just by adding it to the same composite without having to set cascadingModel=true. Default value is false, i.e. al nested views share the same model than the outer composite unless explicitely specified differently.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
      <section>
        <title>left</title>
        <itemizedlist>
          <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>split</code></listitem>
          <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>form, table, listView, propertyView, image, actionView, tabs, split, border, grid, evenGrid, entityCardView, basicCardView</code></listitem>
        </itemizedlist>
        <para>Enable to set an in-line view in in the left zone of a split_horizontal</para>
        <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
          <?dbfo keep-together='auto'?>
            <title>left properties</title>
            <tgroup cols='2'>
              <colspec colname='property' colwidth='1*' />
              <colspec colname='description' colwidth='2*' />
              <thead>
                <row>
                  <entry align='left'>Property</entry>
                  <entry align='left'>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
                </row>
              </tbody>
            </tgroup>
        </table>
      </section>
      <section>
        <title>right</title>
        <itemizedlist>
          <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>split</code></listitem>
          <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>form, table, listView, propertyView, image, actionView, tabs, split, border, grid, evenGrid, entityCardView, basicCardView</code></listitem>
        </itemizedlist>
        <para>Enable to set an in-line view in in the rigth zone of a split_horizontal</para>
        <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
          <?dbfo keep-together='auto'?>
            <title>right properties</title>
            <tgroup cols='2'>
              <colspec colname='property' colwidth='1*' />
              <colspec colname='description' colwidth='2*' />
              <thead>
                <row>
                  <entry align='left'>Property</entry>
                  <entry align='left'>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
                </row>
              </tbody>
            </tgroup>
        </table>
      </section>
      <section>
        <title>top</title>
        <itemizedlist>
          <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>split</code></listitem>
          <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>form, table, listView, propertyView, image, actionView, tabs, split, border, grid, evenGrid, entityCardView, basicCardView</code></listitem>
        </itemizedlist>
        <para>Enable to set an in-line view in in the top zone of a split_vertical</para>
        <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
          <?dbfo keep-together='auto'?>
            <title>top properties</title>
            <tgroup cols='2'>
              <colspec colname='property' colwidth='1*' />
              <colspec colname='description' colwidth='2*' />
              <thead>
                <row>
                  <entry align='left'>Property</entry>
                  <entry align='left'>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
                </row>
              </tbody>
            </tgroup>
        </table>
      </section>
      <section>
        <title>bottom</title>
        <itemizedlist>
          <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>split</code></listitem>
          <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>form, table, listView, propertyView, image, actionView, tabs, split, border, grid, evenGrid, entityCardView, basicCardView</code></listitem>
        </itemizedlist>
        <para>Enable to set an in-line view in in the the bottom zone of a split_vertical</para>
        <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
          <?dbfo keep-together='auto'?>
            <title>bottom properties</title>
            <tgroup cols='2'>
              <colspec colname='property' colwidth='1*' />
              <colspec colname='description' colwidth='2*' />
              <thead>
                <row>
                  <entry align='left'>Property</entry>
                  <entry align='left'>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
                </row>
              </tbody>
            </tgroup>
        </table>
      </section>
    </section>
    <section>
      <title>border</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>model, validationModel, icon, name, description, i18nNameKey, actionMap, readOnly, background, foreground, font, borderType, preferredWidth, preferredHeight, paramSets, grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front, left, right, top, bottom, east, west, south, north, center, cell, evenCell, views</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>east, west, south, north, center, actionMap, list, set, map</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicBorderViewDescriptor</code></listitem>
      </itemizedlist>
      <para>A border view is a composite view that arranges its children to the north, west, east, south and center. Depending its position in the container, the resizing rules apply differently : <itemizedlist> <listitem>north and south are resized horizontally and kept to their preferred size vertically</listitem> <listitem>west and east are resized vertically and kept to their preferred size horizontally</listitem> <listitem>center is resized both horizontally and vertically</listitem> </itemizedlist> Default cascading order for master-detail is : north -> west -> center -> east -> south</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>border properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>parent</emphasis><para><code> RefView</code></para></para>
                </entry>
                <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>east</emphasis><para><code> RefView</code></para></para><para><code>eastViewDescriptor</code></para>
                </entry>
                <entry><para>Sets the child view to layout in the east zone. The child view will be resized vertically.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>west</emphasis><para><code> RefView</code></para></para><para><code>westViewDescriptor</code></para>
                </entry>
                <entry><para>Sets the child view to layout in the west zone. The child view will be resized vertically.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>south</emphasis><para><code> RefView</code></para></para><para><code>southViewDescriptor</code></para>
                </entry>
                <entry><para>Sets the child view to layout in the south zone. The child view will be resized horizontally.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>north</emphasis><para><code> RefView</code></para></para><para><code>northViewDescriptor</code></para>
                </entry>
                <entry><para>Sets the child view to layout in the north zone. The child view will be resized horizontally.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>center</emphasis><para><code> RefView</code></para></para><para><code>centerViewDescriptor</code></para>
                </entry>
                <entry><para>Sets the child view to layout in the center zone. The child view will be resized both horizontally and vertically.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>cascadingModels</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>Enables the model "cascading" behaviour. This allows for instance to link 2 nested tables where the 2nd table model is the selected row of the first table (or null if selection is empty). Using cascadingModel=true is only necessary when tracking view selection on the master nested view. You don't need it if, for instance, the master nested view is a single model view like a omponent view. In the latter case, you can bind a table detail view just by adding it to the same composite without having to set cascadingModel=true. Default value is false, i.e. al nested views share the same model than the outer composite unless explicitely specified differently.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
      <section>
        <title>east</title>
        <itemizedlist>
          <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>border</code></listitem>
          <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>form, table, listView, propertyView, image, actionView, tabs, split, border, grid, evenGrid, entityCardView, basicCardView</code></listitem>
        </itemizedlist>
        <para>Enable to set an in-line view in the east zone of a border</para>
        <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
          <?dbfo keep-together='auto'?>
            <title>east properties</title>
            <tgroup cols='2'>
              <colspec colname='property' colwidth='1*' />
              <colspec colname='description' colwidth='2*' />
              <thead>
                <row>
                  <entry align='left'>Property</entry>
                  <entry align='left'>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
                </row>
              </tbody>
            </tgroup>
        </table>
      </section>
      <section>
        <title>west</title>
        <itemizedlist>
          <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>border</code></listitem>
          <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>form, table, listView, propertyView, image, actionView, tabs, split, border, grid, evenGrid, entityCardView, basicCardView</code></listitem>
        </itemizedlist>
        <para>Enable to set an in-line view in the west zone of a border</para>
        <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
          <?dbfo keep-together='auto'?>
            <title>west properties</title>
            <tgroup cols='2'>
              <colspec colname='property' colwidth='1*' />
              <colspec colname='description' colwidth='2*' />
              <thead>
                <row>
                  <entry align='left'>Property</entry>
                  <entry align='left'>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
                </row>
              </tbody>
            </tgroup>
        </table>
      </section>
      <section>
        <title>south</title>
        <itemizedlist>
          <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>border</code></listitem>
          <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>form, table, listView, propertyView, image, actionView, tabs, split, border, grid, evenGrid, entityCardView, basicCardView</code></listitem>
        </itemizedlist>
        <para>Enable to set an in-line view in the south zone of a border</para>
        <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
          <?dbfo keep-together='auto'?>
            <title>south properties</title>
            <tgroup cols='2'>
              <colspec colname='property' colwidth='1*' />
              <colspec colname='description' colwidth='2*' />
              <thead>
                <row>
                  <entry align='left'>Property</entry>
                  <entry align='left'>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
                </row>
              </tbody>
            </tgroup>
        </table>
      </section>
      <section>
        <title>north</title>
        <itemizedlist>
          <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>border</code></listitem>
          <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>form, table, listView, propertyView, image, actionView, tabs, split, border, grid, evenGrid, entityCardView, basicCardView</code></listitem>
        </itemizedlist>
        <para>Enable to set an in-line view in the north zone of a border</para>
        <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
          <?dbfo keep-together='auto'?>
            <title>north properties</title>
            <tgroup cols='2'>
              <colspec colname='property' colwidth='1*' />
              <colspec colname='description' colwidth='2*' />
              <thead>
                <row>
                  <entry align='left'>Property</entry>
                  <entry align='left'>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
                </row>
              </tbody>
            </tgroup>
        </table>
      </section>
      <section>
        <title>center</title>
        <itemizedlist>
          <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>border</code></listitem>
          <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>form, table, listView, propertyView, image, actionView, tabs, split, border, grid, evenGrid, entityCardView, basicCardView</code></listitem>
        </itemizedlist>
        <para>Enable to set an in-line view in the center zone of a border</para>
        <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
          <?dbfo keep-together='auto'?>
            <title>center properties</title>
            <tgroup cols='2'>
              <colspec colname='property' colwidth='1*' />
              <colspec colname='description' colwidth='2*' />
              <thead>
                <row>
                  <entry align='left'>Property</entry>
                  <entry align='left'>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
                </row>
              </tbody>
            </tgroup>
        </table>
      </section>
    </section>
    <section>
      <title>grid</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>model, validationModel, icon, name, description, i18nNameKey, actionMap, readOnly, background, foreground, font, borderType, preferredWidth, preferredHeight, paramSets, grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front, left, right, top, bottom, east, west, south, north, center, cell, evenCell, views</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>cells, actionMap, list, set, map</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicConstrainedGridViewDescriptor</code></listitem>
      </itemizedlist>
      <para>This composite view arranges its children in a grid where cell behaviour and dimensions are configured using cell constraints in a cells list</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>grid properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>parent</emphasis><para><code> RefView</code></para></para>
                </entry>
                <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>cascadingModels</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>Enables the model "cascading" behaviour. This allows for instance to link 2 nested tables where the 2nd table model is the selected row of the first table (or null if selection is empty). Using cascadingModel=true is only necessary when tracking view selection on the master nested view. You don't need it if, for instance, the master nested view is a single model view like a omponent view. In the latter case, you can bind a table detail view just by adding it to the same composite without having to set cascadingModel=true. Default value is false, i.e. al nested views share the same model than the outer composite unless explicitely specified differently.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
      <section>
        <title>evenGrid</title>
        <itemizedlist>
          <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
          <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>model, validationModel, icon, name, description, i18nNameKey, actionMap, readOnly, background, foreground, font, borderType, preferredWidth, preferredHeight, paramSets, grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
          <listitem><emphasis role='bold'>mandatory</emphasis> : <code>drivingDimension, drivingCellCount</code></listitem>
          <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front, left, right, top, bottom, east, west, south, north, center, cell, evenCell, views</code></listitem>
          <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>cells, actionMap, list, set, map</code></listitem>
          <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicEvenGridViewDescriptor</code></listitem>
        </itemizedlist>
        <para>This composite view arranges its children in a grid where cells are distributed evenly. All cells are resized horizontally and vertically to fill its available space. The number of cells in a row / column is determined by the combination of the drivingDimension and drivingCellCount properties. the cells are spread along the driving dimension (row or column) until the maximum number of cells in the dimension has been reached. Then a new row (or column) is added. The process repeats until all the cells have been added</para>
        <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
          <?dbfo keep-together='auto'?>
            <title>evenGrid properties</title>
            <tgroup cols='2'>
              <colspec colname='property' colwidth='1*' />
              <colspec colname='description' colwidth='2*' />
              <thead>
                <row>
                  <entry align='left'>Property</entry>
                  <entry align='left'>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para><emphasis role='bold'>parent</emphasis><para><code> RefView</code></para></para>
                  </entry>
                  <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
                </row>
                <row>
                  <entry>
                    <para><emphasis role='bold'>cascadingModels</emphasis><para><code> Boolean</code></para></para>
                  </entry>
                  <entry><para>Enables the model "cascading" behaviour. This allows for instance to link 2 nested tables where the 2nd table model is the selected row of the first table (or null if selection is empty). Using cascadingModel=true is only necessary when tracking view selection on the master nested view. You don't need it if, for instance, the master nested view is a single model view like a omponent view. In the latter case, you can bind a table detail view just by adding it to the same composite without having to set cascadingModel=true. Default value is false, i.e. al nested views share the same model than the outer composite unless explicitely specified differently.</para></entry>
                </row>
                <row>
                  <entry>
                    <para><emphasis role='bold'>drivingDimension</emphasis><para><code> String</code></para></para>
                  </entry>
                  <entry><para>Configures the driving dimension of the grid : <itemizedlist> <listitem>ROW for distributing cells along rows then columns</listitem> <listitem>COLUMN for distributing cells along columns then rows</listitem> </itemizedlist> Default value is ROW, i.e. distribute cells along rows then columns.</para></entry>
                </row>
                <row>
                  <entry>
                    <para><emphasis role='bold'>drivingCellCount</emphasis><para><code> Integer</code></para></para><para><code>drivingDimensionCellCount</code></para>
                  </entry>
                  <entry><para>This property configures the maximum number of cells in the driving dimension (row or column). Nested views are distributed along the driving axis until this maximum number has been reached. A new row or column is then created to host the remaining cells.</para></entry>
                </row>
              </tbody>
            </tgroup>
        </table>
      </section>
      <section>
        <title>cells</title>
        <itemizedlist>
          <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>grid, evenGrid</code></listitem>
          <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>propertyView, cell, evenCell</code></listitem>
        </itemizedlist>
        <para>open a cells list in grid or in an evenGrid</para>
        <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
          <?dbfo keep-together='auto'?>
            <title>cells properties</title>
            <tgroup cols='2'>
              <colspec colname='property' colwidth='1*' />
              <colspec colname='description' colwidth='2*' />
              <thead>
                <row>
                  <entry align='left'>Property</entry>
                  <entry align='left'>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
                </row>
              </tbody>
            </tgroup>
        </table>
      </section>
      <section>
        <title>cell</title>
        <itemizedlist>
          <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>cells</code></listitem>
          <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>form, table, listView, propertyView, image, actionView, tabs, split, border, grid, evenGrid, entityCardView, basicCardView</code></listitem>
        </itemizedlist>
        <para>Describes constraints on a cell of a grid</para>
        <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
          <?dbfo keep-together='auto'?>
            <title>cell properties</title>
            <tgroup cols='2'>
              <colspec colname='property' colwidth='1*' />
              <colspec colname='description' colwidth='2*' />
              <thead>
                <row>
                  <entry align='left'>Property</entry>
                  <entry align='left'>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para><emphasis role='bold'>view</emphasis><para><code> RefView</code></para></para>
                  </entry>
                  <entry><para>the view to layout in the cell</para></entry>
                </row>
                <row>
                  <entry>
                    <para><emphasis role='bold'>row</emphasis><para><code> Integer</code></para></para>
                  </entry>
                  <entry><para>the row to which the cell belongs</para></entry>
                </row>
                <row>
                  <entry>
                    <para><emphasis role='bold'>column</emphasis><para><code> Integer</code></para></para>
                  </entry>
                  <entry><para>the column to which the cell belongs</para></entry>
                </row>
                <row>
                  <entry>
                    <para><emphasis role='bold'>height</emphasis><para><code> Integer</code></para></para>
                  </entry>
                  <entry><para>the number of rows the cell spans vertically</para></entry>
                </row>
                <row>
                  <entry>
                    <para><emphasis role='bold'>width</emphasis><para><code> Integer</code></para></para>
                  </entry>
                  <entry><para>the number of columns the cell spans horizontally (default value is 1)</para></entry>
                </row>
                <row>
                  <entry>
                    <para><emphasis role='bold'>widthResizable</emphasis><para><code> Boolean</code></para></para>
                  </entry>
                  <entry><para>wether the cell should be resized to take all the available space horizontally</para></entry>
                </row>
                <row>
                  <entry>
                    <para><emphasis role='bold'>heightResizable</emphasis><para><code> Boolean</code></para></para>
                  </entry>
                  <entry><para>wether the cell should be resized to take all the available space vertically</para></entry>
                </row>
              </tbody>
            </tgroup>
        </table>
      </section>
      <section>
        <title>evenCell</title>
        <itemizedlist>
          <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>cells</code></listitem>
          <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>form, table, listView, propertyView, image, actionView, tabs, split, border, grid, evenGrid, entityCardView, basicCardView</code></listitem>
        </itemizedlist>
        <para>Describes a cell of an evenGrid <emphasis role='bold'>evenCell IS NEVER DIRECTLY USED</emphasis>, like for a grid, cell is used. <emphasis role='bold'>SJS automatically transforms cell it in evenCell in an evenGrid context</emphasis></para>
        <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
          <?dbfo keep-together='auto'?>
            <title>evenCell properties</title>
            <tgroup cols='2'>
              <colspec colname='property' colwidth='1*' />
              <colspec colname='description' colwidth='2*' />
              <thead>
                <row>
                  <entry align='left'>Property</entry>
                  <entry align='left'>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para><emphasis role='bold'>view</emphasis><para><code> RefView</code></para></para>
                  </entry>
                  <entry><para>the view to layout in the cell</para></entry>
                </row>
              </tbody>
            </tgroup>
        </table>
      </section>
    </section>
    <section>
      <title>entityCardView</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>model, validationModel, icon, name, description, i18nNameKey, actionMap, readOnly, background, foreground, font, borderType, preferredWidth, preferredHeight, paramSets, grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front, left, right, top, bottom, east, west, south, north, center, cell, evenCell, views</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>views, actionMap, list, set, map</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>EntityCardViewDescriptor</code></listitem>
      </itemizedlist>
      <para>A card view is a view stack made of children views (the cards) where only the view (card) at the top of the stack is visible. The actual child view to place on the top of the stack is dynamically determined based on the bound model.  An entityCardView view provides a simple card determination strategy that is based on the bound model type. This strategy pulls up the card whose model descriptor matches the type of the bound model</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>entityCardView properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>parent</emphasis><para><code> RefView</code></para></para>
                </entry>
                <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>views</emphasis><para><code> ListOfView</code></para></para><para><code>viewDescriptors</code></para>
                </entry>
                <entry><para>Registers the list of card view descriptors. Every time the bound model changes, this list is iterated until a card with a matching model is found. The first matching card is displayed. Whenever no registered card matches, an empty view is displayed.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>basicCardView</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>common</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>model, validationModel, icon, name, description, i18nNameKey, actionMap, readOnly, background, foreground, font, borderType, preferredWidth, preferredHeight, paramSets, grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>selector</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front, left, right, top, bottom, east, west, south, north, center, cell, evenCell, views</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>views, actionMap, list, set, map</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BasicCardViewDescriptor</code></listitem>
      </itemizedlist>
      <para>A card view is a view stack made of children views (the cards) where only the view (card) at the top  of the stack is visible. The actual child view to place on the top of the stack is dynamically  determined based on the bound model.

A basicCardView describes a multi-purpose card view that is configurable with a custom card determination strategy. Cards are registered with a name key that is used to retrieve the card to display based on the card selector selected name key.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>basicCardView properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>parent</emphasis><para><code> RefView</code></para></para>
                </entry>
                <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>selector</emphasis><para><code> String</code></para></para><para><code>cardNameSelector</code></para>
                </entry>
                <entry><para>Configures the card determination strategy. This delegate is responsible for selecting the card name key based on the model bound to the view. Everytime the bound model changes, the card name selector is triggered to select a new card. The names returned by the card name selector must match the names under which the cards are registered. Whenever the card name selector returns an unknown name, the card view displays an empty view.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>views</emphasis><para><code> MapOfView</code></para></para><para><code>cardViewDescriptors</code></para>
                </entry>
                <entry><para>Registers the card views keyed by their name keys. The names used as key of the Map must match the names that are returned by the registered card name selector.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>Action</title>
    <section>
      <title>actionMap</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front, treeNode, controller, form, propertyView, tabs, tree, table, listView, split, border, grid, evenGrid, image, entityCardView, basicCardView, actionView</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>actionList</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>ActionMap</code></listitem>
      </itemizedlist>
      <para>An action map is generally represented as a toolbar attached to the view. The toolbar follows the structure of the action map : <itemizedlist> <listitem>each action list is contained in its own toolbar section which is visually separated from the other sections. This allows for visually grouping related actions as they are grouped in the action lists.</listitem> <listitem>each action contained in an action list is represented by a toolbar button using the action image as icon and translated action description as tooltip.</listitem> </itemizedlist></para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>actionMap properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>parents</emphasis><para><code> ListOfActionMaps</code></para></para><para><code>parentActionMaps</code></para>
                </entry>
                <entry><para>Assigns the parent action maps. The action lists that will actually be rendered will be the merge of the directly owned action lists and of the parent action maps. Action lists that have the same name are merged together and into a merged action list, local actions will replace parent actions with the same name.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>renderingOptions</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Indicates how the actions should be rendered. This is either a value of the ERenderingOptions enum or its equivalent string representation : <itemizedlist> <listitem>LABEL_ICON for label and icon</listitem> <listitem>LABEL for label only</listitem> <listitem>ICON for icon only</listitem> </itemizedlist> Default value is null, i.e. determined from outside, e.g. the view factory.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
      <section>
        <title>actionList</title>
        <itemizedlist>
          <listitem><emphasis role='bold'>mandatory</emphasis> : <code>nameElement</code></listitem>
          <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>actionMap</code></listitem>
          <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>action, next, wrapped, rowAction, itemSelectionAction, sortingAction</code></listitem>
          <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>ActionList</code></listitem>
        </itemizedlist>
        <para>In an actionMap, an action list is contained in its own toolbar section which is visually separated from the other sections. This allows for visually grouping related actions as they are grouped in the action lists</para>
        <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
          <?dbfo keep-together='auto'?>
            <title>actionList properties</title>
            <tgroup cols='2'>
              <colspec colname='property' colwidth='1*' />
              <colspec colname='description' colwidth='2*' />
              <thead>
                <row>
                  <entry align='left'>Property</entry>
                  <entry align='left'>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para><emphasis role='bold'>description</emphasis><para><code> String</code></para></para>
                  </entry>
                  <entry><para>Sets the description of this actionList. Most of the descriptor descriptions are used in conjunction with the Jspresso i18n layer so that the description property set here is actually an i18n key used for translation.</para></entry>
                </row>
                <row>
                  <entry>
                    <para><emphasis role='bold'>icon</emphasis><para><code> String</code></para></para><para><code>iconImageURL</code></para>
                  </entry>
                  <entry><para>Sets the icon image URL of this descriptor. Supported URL protocols include : <itemizedlist> <listitem>all JVM supported protocols</listitem> <listitem>the jar:/ pseudo URL protocol</listitem> <listitem>the classpath:/ pseudo URL protocol</listitem> </itemizedlist></para></entry>
                </row>
                <row>
                  <entry>
                    <para><emphasis role='bold'>actions</emphasis><para><code> ListOfAction</code></para></para>
                  </entry>
                  <entry><para>Assigns the list of actions owned by this action list.</para></entry>
                </row>
                <row>
                  <entry>
                    <para><emphasis role='bold'>renderingOptions</emphasis><para><code> String</code></para></para>
                  </entry>
                  <entry><para>Indicates how the actions should be rendered. This is either a value of the ERenderingOptions enum or its equivalent string representation : <itemizedlist> <listitem>LABEL_ICON for label and icon</listitem> <listitem>LABEL for label only</listitem> <listitem>ICON for icon only</listitem> </itemizedlist> Default value is null, i.e. determined from outside, e.g. the view factory.</para></entry>
                </row>
              </tbody>
            </tgroup>
        </table>
      </section>
    </section>
    <section>
      <title>action</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>actionList, Front, controller, actionView</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>next, wrapped, list, set, map</code></listitem>
      </itemizedlist>
      <para>This descriptor establishes the foundation of the Jspresso action framework, i.e. each action can link : <itemizedlist> <listitem>a wrapped action that will execute a return back to the caller action</listitem> <listitem>a next action that will execute after the caller</listitem> </itemizedlist> The action chaining described above supports the separation of concerns that consists in splitting the actions in two distinct categrories : <itemizedlist> <listitem>frontend actions that deal with user interaction. They are typically used to bootstrap a service request from th UI, update the UI state, trigger the display of informations, errors, ...</listitem> <listitem>backend actions that are faceless, UI agnostic and deal with the manipulation of the domain model, backend services, ...</listitem> </itemizedlist> Conceptually, a frontend action can call a backend action or another frontend action but a backend action should stay on the backend, thus should only reference another backend action. In other words, the backend layer should never explicitely reference the frontend layer.<para></para> That's the main reason for having a wrapped and a next action in the action chain. The wrapped action is perfectly suited to call the backend layer (a backend action) and give the flow back to the frontend layer. The next action is perfectly suited to chain 2 actions of the same type (i.e. 2 frontend actions or 2 backend actions). Using this scheme helps keeping layer dependencies clear. Of course, this dual chaining mechanism is completely recursive thus allowing to compose small (generic) actions into larger composite ones and promoting reusability.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>action properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>parent</emphasis><para><code> RefAction</code></para></para>
                </entry>
                <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>class</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>java class that implement the action</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>ref</emphasis><para><code> RefAction</code></para></para>
                </entry>
                <entry><para>Allows to reference an existing action using its identifier. It can be used everywhere an action can, e.g. in action lists.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>next</emphasis><para><code> RefAction</code></para></para><para><code>nextAction</code></para>
                </entry>
                <entry><para>Registers an action to be executed after this action and after the wrapped one. This is perfectly suited to chain an action of the same type (frontend or backend) as this one.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>wrapped</emphasis><para><code> RefAction</code></para></para><para><code>wrappedAction</code></para>
                </entry>
                <entry><para>Registers an action to be executed after this action but before the next one. This is perfectly suited to chain a backend action from a frontend action since the control flow will return back to the calling layer (the frontend).</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>custom</emphasis><para><code> Map</code></para></para>
                </entry>
                <entry><para>Map of custom properties that have to be set on the action. When a property is a reference, its key has to be suffixed by "_ref". This enables SJS to generate the appropriate XML and to control the existence of the reference. <programlisting> custom:[
      parentModuleName:'Projects', 
      componentDescriptor_ref:'Project']) </programlisting></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>name</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the key used to compute the internationalized name of the action. The translated name is then usually used as label for the action (button label, menu label, ...)</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>description</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the description of this action. Most of the descriptor descriptions are used in conjunction with the Jspresso i18n layer so that the description property set here is actually an i18n key used for translation.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>icon</emphasis><para><code> String</code></para></para><para><code>iconImageURL</code></para>
                </entry>
                <entry><para>Sets the icon image URL of this descriptor. Supported URL protocols include : <itemizedlist> <listitem>all JVM supported protocols</listitem> <listitem>the jar:/ pseudo URL protocol</listitem> <listitem>the classpath:/ pseudo URL protocol</listitem> </itemizedlist></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>grantedRoles</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>Assigns the roles that are authorized to execute this action. This will directly influence the UI behaviour since unauthorized actions won't be displayed. Setting the collection of granted roles to null (default value) disables role based authorization on this action. Note that this Actions authorization enforcement does not prevent programatic access that is of the developer responsbility.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>booleanActionabilityGates</emphasis><para><code> MapOfBoolean</code></para></para>
                </entry>
                <entry><para>Assigns a collection of gates to determine action actionability. An action will be considered actionable (enabled)  if and only if all booleanGates are open. With SJS a booleanActionnabilityGate is an entry in a Map. The entry key  indicates the name of the model property that determines the gate state. The entry value is a boolean that determines  if the gate is collection based. Collection based actions will typically be installed on selectable views (table, list , tree)  and will be enabled only when the view selection is not empty (a default gate is installed for this purpose).  Moreover, booleanActionnabilityGates that are configured on collection based actions take their model from the  view selected components instead of the view model itself. In case of multi-selection enabled UI views, the actionability gates  will actually open if and only if their opening condition is met for all the selected items.  <programlisting> action('actionA', booleanActionabilityGates: ['!val1': false, 'val2': true] ... </programlisting>  <itemizedlist> <listitem>The first '!val1' gate is open if val1 is false, the gate is not applied to each collection item individually</listitem> <listitem>The second 'val2' gate is open if val2 is true, the gate is applied to each collection item individually</listitem> </itemizedlist>  This mecanism is mainly used for dynamic UI authorization based on model state, e.g. a validated invoice should not be validated twice. Action assigned gates will be cloned for each concrete action instance created and bound to its respective UI component (usually a button). So basically, each action instance will have its own, unshared collection of actionability gates. By default, frontend actions are assigned a generic gate that closes (disables the action) when the view is not assigned any model</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>rolesActionabilityGates</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>Assigns a collection of gates to determine action actionability. An action will be  considered actionable (enabled) if and only if all rolesGates are open.  <programlisting> action('actionA', rolesActionabilityGates: ['role1', '!role2'] ... </programlisting> <itemizedlist> <listitem>The first gate 'role1' is open if the connected user has the role1</listitem> <listitem>The second gate '!role2' is open if the connected user does not have the role2</listitem> </itemizedlist> Same mecanism has booleanActionabilityGates</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>collectionBased</emphasis><para><code> Boolean</code></para></para>
                </entry>
                <entry><para>Declares the action as working on a collection of objects. Collection based actions will typically be installed on selectable views (table, list , tree) and will be enabled only when the view selection is not empty (a default gate is installed for this purpose). Moreover, model gates that are configured on collection based actions take their model from the view selected components instead of the view model itself. In case of multi-selection enabled UI views, the actionability gates will actually open if and only if their opening condition is met for all the selected items.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>next</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>action</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>parent, class, ref, next, wrapped, custom, name, description, icon, grantedRoles, booleanActionabilityGates, rolesActionabilityGates, collectionBased</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>actionList, controller, actionView, action, next, wrapped</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>next, wrapped</code></listitem>
      </itemizedlist>
      <para>Allows defining "inline" next action for the current action. A next action is an action to be executed after this action and after the wrapped one. This is perfectly suited to chain an action of the same type (frontend or backend) as this one.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>next properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>wrapped</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>next</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>parent, class, ref, next, wrapped, custom, name, description, icon, grantedRoles, booleanActionabilityGates, rolesActionabilityGates, collectionBased</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>actionList, controller, actionView, action, next, wrapped</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>next, wrapped</code></listitem>
      </itemizedlist>
      <para>Allows defining "inline" wrapped action for the current action. This is perfectly suited to chain a backend action from a frontend action since the control flow will return back to the calling layer (the frontend).</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>wrapped properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>rowAction</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>action</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>parent, class, ref, next, wrapped, custom, name, description, icon, grantedRoles, booleanActionabilityGates, rolesActionabilityGates, collectionBased</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>actionList, controller, actionView, table, listView, tree</code></listitem>
      </itemizedlist>
      <para>Allows defining "inline" rowAction for the current action. It is an action  that is implicitely triggered everytime a row is activated (e.g. double-clicked for current UI channels) on the collection view UI peer. The context of the action execution is the same as if the action was registered in the view action map.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>rowAction properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>itemSelectionAction</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>action</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>parent, class, ref, next, wrapped, custom, name, description, icon, grantedRoles, booleanActionabilityGates, rolesActionabilityGates, collectionBased</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>actionList, controller, actionView, table, listView</code></listitem>
      </itemizedlist>
      <para>Allows defining "inline" itemSelectionAction for the current action.  It is an action that is implicitely triggered everytime the selection changes on the collection view UI peer. The context of the action execution is the same as if the action was registered in the view action map.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>itemSelectionAction properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>sortingAction</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>action</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>parent, class, ref, next, wrapped, custom, name, description, icon, grantedRoles, booleanActionabilityGates, rolesActionabilityGates, collectionBased</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>actionList, controller, actionView, table</code></listitem>
      </itemizedlist>
      <para>Allows defining "inline" itemSelectionAction for the current action.  It configures the action to be activated when a sort is triggered by the user. It should be used with caution and rarely be overriden from the default.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>sortingAction properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>workspace</title>
    <section>
      <title>workspace</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>Security</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>grantedRoles, booleanWritabilityGates, rolesWritabilityGates</code></listitem>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>nameElement</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>module, collectionModule, filterModule, beanModule, nodeModule, list, set, map</code></listitem>
      </itemizedlist>
      <para>A workspace is an group of functional application modules. You may decide arbitrarily how to group modules into workspaces but a good approach might be to design the workspaces based on roles (i.e. business activities). This helps to clearly seperates tasks-unrelated modules and eases authorization management since a workspace can be granted or forbidden as a whole by Jspresso security.<para></para> Workspaces might be graphically represented differently depending on the UI technology used. For instance, the Swing and ULC channels use a MDI UI in which each workspace is represented as an internal frame (document). On the other hand, Flex and qooxdoo channels represent workspaces stacked in an accordion. Whatever the graphical representation is, there is at most one workspace active at a time for a user session - either the active (focused) internal frame or the expanded accordion section.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>workspace properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>name</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Configures the key used to translate actual internationalized workspace name. The resulting translation will be leveraged as the workspace label on the UI side.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>description</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Configures the key used to translate actual internationalized workspace description. The resulting translation will generally be leveraged as a tooltip on the UI side but its use may be extended for online help.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>icon</emphasis><para><code> String</code></para></para><para><code>iconImageURL</code></para>
                </entry>
                <entry><para>Sets the icon image URL of this descriptor. Supported URL protocols include : <itemizedlist> <listitem>all JVM supported protocols</listitem> <listitem>the jar:/ pseudo URL protocol</listitem> <listitem>the classpath:/ pseudo URL protocol</listitem> </itemizedlist></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>startup</emphasis><para><code> RefAction</code></para></para><para><code>startupAction</code></para>
                </entry>
                <entry><para>Configures an action to be executed the first time the workspace is "started" by the user. The action will execute in the context of the workspace but with no specific module selected. It will help initializing workspace values, notify user, ...</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>Module</title>
    <section>
      <title>module</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>nameElement</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>workspace, module, nodeModule, collectionModule, filterModule, beanModule</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>module, collectionModule, filterModule, beanModule, nodeModule, list, set, map</code></listitem>
      </itemizedlist>
      <para>A module is an entry point in the application. Modules are organized in bi-directional, parent-children hierarchy. As such, they can be viewed (and they are materalized in the UI) as trees. Modules can be (re)organized dynamically by changing their parent-children relationship and their owning workspace UI will reflect the change seamlessly, as with any Jspresso model (in fact workspaces and modules are regular beans that are used as model in standard Jspresso views).<para></para> Modules, among other features, are capable of providing a view to be installed in the UI wen they are selected. This makes Jspresso applications really modular and their architecture flexible enough to embed and run a large variety of different module types.<para></para> A module can also be as simple as a grouping structure for other modules (nodeModule).</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>module properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>name</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Configures the key used to translate actual internationalized module name. The resulting translation will be leveraged as the module label on the UI side.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>description</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Configures the key used to translate actual internationalized module description. The resulting translation will generally be leveraged as a tooltip on the UI side but its use may be extended for online help.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>icon</emphasis><para><code> String</code></para></para><para><code>iconImageURL</code></para>
                </entry>
                <entry><para>Sets the icon image URL of this descriptor. Supported URL protocols include : <itemizedlist> <listitem>all JVM supported protocols</listitem> <listitem>the jar:/ pseudo URL protocol</listitem> <listitem>the classpath:/ pseudo URL protocol</listitem> </itemizedlist></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>grantedRoles</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>Assigns the roles that are authorized to start this module. It supports "!" prefix to negate the role(s). Whenever the user is not granted sufficient privileges, the module is simply not installed in the workspace . Setting the collection of granted roles to null (default value) disables role based authorization on this module.<para></para> Some specific modules that are component/entity model based i.e. Bean(Collection)Module also inherit their authrorizations from their model.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>moduleView</emphasis><para><code> RefView</code></para></para><para><code>projectedViewDescriptor</code></para>
                </entry>
                <entry><para>Configures the view descriptor used to construct the view that will be displayed when this module is selected.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>startup</emphasis><para><code> RefAction</code></para></para><para><code>startupAction</code></para>
                </entry>
                <entry><para>Reference to an action trigerred at statup when the module is first selected</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>entry</emphasis><para><code> RefAction</code></para></para><para><code>entryAction</code></para>
                </entry>
                <entry><para>Configures an action to be executed every time the module becomes the current selected module (either through a user explicit navigation or a programmatic selection). The action will execute in the context of the current workspace, this module being the current selected module.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>exit</emphasis><para><code> RefAction</code></para></para><para><code>exitAction</code></para>
                </entry>
                <entry><para>Configures an action to be executed every time the module becomes unselected (either through a user explicit navigation or a programmatic deselection). The action will execute in the context of the current workspace, this module being the current selected module (i.e. the action occurs before the module is actually left).</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>collectionModule</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>module</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>name, description, icon, grantedRoles, moduleView, startup, entry, exit</code></listitem>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>nameElement, nameElement</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>workspace, module, nodeModule, collectionModule, filterModule, beanModule</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>module, collectionModule, filterModule, beanModule, nodeModule</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BeanCollectionModule</code></listitem>
      </itemizedlist>
      <para>This type of module keeps a reference on a beans collection. There is no assumption made on wether these beans are actually persistent entites or any other type of java beans.<para></para> Simple bean collection modules must have their collection of referenced beans initialized somehow. There is no standard built-in action to do so, since it is highly dependent on what's needed. So it's rather common to have the module content initialized through a startup action depending on the session state.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>collectionModule properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>component</emphasis><para><code> RefDomain</code></para></para><para><code>elementComponentDescriptor</code></para>
                </entry>
                <entry><para>Configures the type of bean element this collection module manages . A bunch of default values are inferred from this element component descriptor. For instance, paging size (if used) will default to the component one unless explicitely set. Same goes for icon image URL, default ordering properties or even granted roles. The latter means that bean collection modules based on forbidden entities will automatically be excluded from the workspace of the logged-in user.<para></para> if not explicitely configured, the eement component descriptor can be inferred from the collection view descriptor configured as projected view descriptor.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>detailView</emphasis><para><code> RefView</code></para></para><para><code>elementViewDescriptor</code></para>
                </entry>
                <entry><para>This property is not used by the module itself, but by built-in actions that maybe registered on this module. One of tese actions is AddBeanAsSubModuleAction.<para></para> This property indicates the view to use whenever the user requests a "form-like" view on a collection element. Naturally the configured element view descriptor must be backed by a model matching the type of the module managed beans.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>filterModule</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>collectionModule</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>detailView, name, description, icon, grantedRoles, moduleView, startup, entry, exit</code></listitem>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>nameElement, nameElement, nameElement</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>workspace, module, nodeModule, collectionModule, filterModule, beanModule</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>module, collectionModule, filterModule, beanModule, nodeModule</code></listitem>
      </itemizedlist>
      <para>This is a specialized type of bean collection module that provides a filter ( an instance of IQueryComponent ). This type of module, coupled with a generic, built-in, action map is perfectly suited for CRUD-like operations.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>filterModule properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>component</emphasis><para><code> RefDomain</code></para></para><para><code>elementComponentDescriptor</code></para>
                </entry>
                <entry><para>This property allows to configure a custom filter model descriptor. If not set, which is the default value, the filter model is built out of the element component descriptor (QBE filter model).</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>filterComponent</emphasis><para><code> RefDomain</code></para></para>
                </entry>
                <entry><para>Assigns the filter to this module instance. It is by default assigned by the module startup action (see InitModuleFilterAction). So if you ever want to change the default implementation of the filter, you have to write and install you own custom startup action or explicitely inject a specific instance.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>filterView</emphasis><para><code> RefView</code></para></para><para><code>filterViewDescriptor</code></para>
                </entry>
                <entry><para>This property allows to refine the default filer view to re-arange the filter fields. Custom filter view descriptors assigned here must not be assigned a model descriptor since they will be at runtime. This is because the filter component descriptor must be reworked - to adapt comparable field structures for instance.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>pagingStatus</emphasis><para><code> RefView</code></para></para>
                </entry>
                <entry><para>Allows to change the default view for the paging status. If not set (default), a default paging status view is created containing the curent pageas well as the total number of pages available and the total number of records in the result set. This paging status view is the bordered with the bage navigation actions.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>ordering</emphasis><para><code> Map</code></para></para>
                </entry>
                <entry><para>Configures a custom map of ordering properties for the result set. If not set, which is the default, the elements ordering properties is used. This property consist of a Map whose entries are composed with : <itemizedlist> <listitem>the property name as key</listitem> <listitem>the sort order for this property as value. This is either a value of the ESort enum (ASCENDING or DESCENDING) or its equivalent string representation.</listitem> </itemizedlist> Ordering properties are considered following their order in the map iterator.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>pageSize</emphasis><para><code> Integer</code></para></para>
                </entry>
                <entry><para>Configures a custom page size for the result set. If not set, which is the default, the elements default page size is used.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>beanModule</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>module</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>name, description, icon, grantedRoles, moduleView, startup, entry, exit</code></listitem>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>nameElement, nameElement</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>workspace, module, nodeModule, collectionModule, filterModule, beanModule</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>module, collectionModule, filterModule, beanModule, nodeModule, list, set, map</code></listitem>
        <listitem><emphasis role='bold'>Jspresso</emphasis> : <code>BeanModule</code></listitem>
      </itemizedlist>
      <para>This type of module keeps a reference on a beans collection. There is no assumption made on wether these beans are actually persistent entites or any other type of java beans.<para></para> Simple bean collection modules must have their collection of referenced beans initialized somehow. There is no standard built-in action to do so, since it is highly dependent on what's needed. So it's rather common to have the module content initialized through a startup action depending on the session state.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>beanModule properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>component</emphasis><para><code> RefDomain</code></para></para><para><code>componentDescriptor</code></para>
                </entry>
                <entry><para>Configures the type of bean element this collection module manages . A bunch of default values are inferred from this element component descriptor. For instance, paging size (if used) will default to the component one unless explicitely set. Same goes for icon image URL, default ordering properties or even granted roles. The latter means that bean collection modules based on forbidden entities will automatically be excluded from the workspace of the logged-in user.<para></para> if not explicitely configured, the element component descriptor can be inferred from the collection view descriptor configured as projected view descriptor.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>nodeModule</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>extend</emphasis> : <code>module</code></listitem>
        <listitem><emphasis role='bold'>Inherited properties </emphasis> : <code>name, description, icon, grantedRoles, moduleView, startup, entry, exit</code></listitem>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>nameElement, nameElement</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>workspace, module, nodeModule, collectionModule, filterModule, beanModule</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>module, collectionModule, filterModule, beanModule, nodeModule</code></listitem>
      </itemizedlist>
      <para>Allows to group modules under a simple node in a hierarchy of modules.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>nodeModule properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>Controller</title>
    <section>
      <title>controller</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>nameElement</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>actionMap, action, next, wrapped, rowAction, itemSelectionAction, sortingAction</code></listitem>
      </itemizedlist>
      <para>Sets the frontend application controllers. This controller is the place where you define the toplevel application structure like the workspace list, the name, the application-wide actions, ...</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>controller properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>icon</emphasis><para><code> String</code></para></para><para><code>iconImageURL</code></para>
                </entry>
                <entry><para>Sets the icon image URL that is used as the application icon. <itemizedlist> <listitem>all JVM supported protocols</listitem> <listitem>the jar:/ pseudo URL protocol</listitem> <listitem>the classpath:/ pseudo URL protocol</listitem> </itemizedlist></para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>workspaceIcon</emphasis><para><code> String</code></para></para><para><code>workspacesMenuIconImageUrl</code></para>
                </entry>
                <entry><para>Sets the icon image URL that is used as the workspace menu icon. Same supported URL protocols than icon property.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>actionMap</emphasis><para><code> RefActionMap</code></para></para>
                </entry>
                <entry><para>Reference an application-wide action map that will be installed in the main application frame. These actions are available at any time from the UI and thus, do not depend on the active workspace. General purpose actions like "Change password" action should be installed here.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>helpActionMap</emphasis><para><code> RefActionMap</code></para></para>
                </entry>
                <entry><para>Reference the help action map. The help action map should contain actions that are related to helping the user (online help, reference manual, tutorial, version dialog...).<para></para> The help action map is visually distinguished from the regular aplication action map. For instance elp actions can be represented in a menu that is right-aligned in the menubar.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>context</emphasis><para><code> String</code></para></para><para><code>loginContextName</code></para>
                </entry>
                <entry><para>Configures the name of the JAAS login context to use to authenticate users. It must reference a valid JAAS context that is installed in the JVM, either through setting the java.security.auth.login .config system property or through server-specific configuration.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>language</emphasis><para><code> String</code></para></para><para><code>forcedStartingLocale</code></para>
                </entry>
                <entry><para>Configures the locale used to initiate the login process. Whenever the forced starting locale is null, the client host default locale is used.<para></para> As soon as the user logs-in, his locale is then used to translate the UI . Whenever the login process is disabled, then the forced starting locale is kept as the UI I18N locale.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>startup</emphasis><para><code> RefAction</code></para></para><para><code>startupAction</code></para>
                </entry>
                <entry><para>Reference to an action trigerred at statup when when the application starts. An example of such an action would be a default workspace/module opening and selection, a "tip of the day" like action, ...</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>onModuleEnter</emphasis><para><code> RefAction</code></para></para><para><code>onModuleEnterAction</code></para>
                </entry>
                <entry><para>Reference an action to be executed each time a module of the application is entered. The action is executed in the context of the module the user enters.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>onModuleExit</emphasis><para><code> RefAction</code></para></para><para><code>onModuleExitAction</code></para>
                </entry>
                <entry><para>Reference an action to be executed each time a module of the application is exited. The action is executed in the context of the module the user exits. Default frontend controller configuration installs an action that checks current module dirty state.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>workspaces</emphasis><para><code> ListOfWorkspace</code></para></para>
                </entry>
                <entry><para>Registers the workspaces that are available in the application. Workspaces are application entry-points and are hierarchically composed of modules / sub-modules.</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>Message</title>
    <section>
      <title>messageSource</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>basenames</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front</code></listitem>
      </itemizedlist>
      <para>Jspresso relies on the well-known java I18N mechanism through the use of resource bundle property files.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>messageSource properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>basenames</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>Configures the list of I18N resource bundles that will be used for the translations</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>Support</title>
    <section>
      <title>external</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front</code></listitem>
      </itemizedlist>
      <para>External gives SJS the List of references witch are not declared in SJS witch but can be used as reference.</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>external properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>id</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>List of authorized external references</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>template</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front</code></listitem>
      </itemizedlist>
      <para>template configures a Map of default properties values for a descriptor <programlisting> template 'form', parent: 'decoratedView', labelsPosition: 'ABOVE', columnCount: 2
  template 'table', parent: 'decoratedView' </programlisting> All new forms and tables will have these properties set</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>template properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>SJSAll</emphasis><para><code> *</code></para></para>
                </entry>
                <entry><para>Map of any valid SJS properties with their values</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>paramSet</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front</code></listitem>
      </itemizedlist>
      <para>paramSet allows to create a reusable groups of properties in SJS declarations. <programlisting> paramSet 'myCommon', readOnly:true, mandatory:true  </programlisting> paramSet can be used by declaration SJS using the attribute paramSets</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>paramSet properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>SJSAll</emphasis><para><code> *</code></para></para>
                </entry>
                <entry><para>Map of any valid SJS properties with their values</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>namespace</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>*</code></listitem>
      </itemizedlist>
      <para>namespace allows to declare and open a namespace scope. The use of namespaces allows simplifying the declarations SJS referring to resources with a complex path. <programlisting> namespace('org.jspresso.hrsample'){...} </programlisting> This declaration allows, for example, to replace the following statement <programlisting> Entity('City', 
          icon: 'classpath:org/jspresso/hrsample/images/city-48x48.png'){...} </programlisting> by <programlisting> ('City',icon:'city-48x48.png') {...} </programlisting> With namespaces, conventions on the organization of the Jspresso's directories are used. In this exemple, images are in the subdirectory /images of the project</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>namespace properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>spec</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>*</code></listitem>
      </itemizedlist>
      <para>spec allows to declare and open a named scope. Each definition declared into this spec will remain visible  from outer specs but sibling specs are isolated from each other. What a spec means depends on what you want  to use it for. For instance you can have 1 spec per UI channel to customize a Jspresso application based on  the runtime UI. Once a spec is used, it can be generated in its own Spring XML so that you can reference it  in any Spring context.  <programlisting> spec('Flex'){...} </programlisting></para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>spec properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>include</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>*</code></listitem>
      </itemizedlist>
      <para>include allows to use multi SJS sources files and to include them into each other. <programlisting> include('fileName') </programlisting></para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>include properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry namest='property' nameend='description'>This class does not have any specific named property.</entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>Generic</title>
    <section>
      <title>bean</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>Front, list, set, map</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>list, set, map</code></listitem>
      </itemizedlist>
      <para>Allows to generate a bean Spring in the XML generated file</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>bean properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>parent</emphasis><para><code> Ref</code></para></para>
                </entry>
                <entry><para>parent property allows to used an other descriptor as a model and to override certain properties.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>class</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Bean's java class</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>ref</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Allows to reference an existing reference using its identifier.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>name</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the name of this descriptor. Most of the descriptor names are used in conjunction with the Jspresso  i18n layer so that the name property set here is actually an i18n key used for translation. The descriptor  name property semantic may vary depending on the actual descriptor type. For instance, a property descriptor  name is the name of the property and a component descriptor name is the fully qualified name of the underlying class...</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>description</emphasis><para><code> String</code></para></para>
                </entry>
                <entry><para>Sets the description of this bean. Most of the descriptor descriptions are used in conjunction with the Jspresso i18n layer so that the description property set here is actually an i18n key used for translation.</para></entry>
              </row>
              <row>
                <entry>
                  <para><emphasis role='bold'>custom</emphasis><para><code> Map</code></para></para>
                </entry>
                <entry><para>Map of custom properties that have to be set on the action. When a property is a reference,  its key has to be suffixed by "_ref". This enables SJS to generate the appropriate XML and  to control the existence of the reference. <programlisting> custom:[
      parentModuleName:'Projects', 
      componentDescriptor_ref:'Project']) </programlisting></para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>list</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>nameElement</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>form, propertyView, tabs, tree, table, listView, split, border, grid, evenGrid, image, entityCardView, basicCardView, actionView, action, workspace, module, beanModule, bean</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>bean</code></listitem>
      </itemizedlist>
      <para>Allows to generate a list Spring in the XML generated file</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>list properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>values</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>List of string values</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>set</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>nameElement</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>form, propertyView, tabs, tree, table, listView, split, border, grid, evenGrid, image, entityCardView, basicCardView, actionView, action, workspace, module, beanModule, bean</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>bean</code></listitem>
      </itemizedlist>
      <para>Allows to generate a list Spring in the XML generated file</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>set properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>values</emphasis><para><code> ListOfString</code></para></para>
                </entry>
                <entry><para>List of string values</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
    <section>
      <title>map</title>
      <itemizedlist>
        <listitem><emphasis role='bold'>mandatory</emphasis> : <code>nameElement</code></listitem>
        <listitem><emphasis role='bold'>allowed previous element</emphasis> : <code>form, propertyView, tabs, tree, table, listView, split, border, grid, evenGrid, image, entityCardView, basicCardView, actionView, action, workspace, module, beanModule, bean</code></listitem>
        <listitem><emphasis role='bold'>allowed next element</emphasis> : <code>bean</code></listitem>
      </itemizedlist>
      <para>Allows to generate a Map Spring in the XML generated file</para>
      <table colsep='0' rowsep='1' tabstyle='splitable' frame='topbot'>
        <?dbfo keep-together='auto'?>
          <title>map properties</title>
          <tgroup cols='2'>
            <colspec colname='property' colwidth='1*' />
            <colspec colname='description' colwidth='2*' />
            <thead>
              <row>
                <entry align='left'>Property</entry>
                <entry align='left'>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para><emphasis role='bold'>values</emphasis><para><code> Map</code></para></para>
                </entry>
                <entry><para>Map of string values</para></entry>
              </row>
            </tbody>
          </tgroup>
      </table>
    </section>
  </section>
</section>
