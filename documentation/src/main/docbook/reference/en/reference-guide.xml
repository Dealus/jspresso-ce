<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<book lang="en" revision="1.0">
  <bookinfo>
    <title>The Jspresso Framework</title>

    <subtitle>Jspresso Reference Manual</subtitle>

    <releaseinfo>2.3</releaseinfo>

    <mediaobject>
      <imageobject>
        <imagedata align="center" contentdepth="60%"
                   fileref="../images/jspresso_logo.jpg" scalefit="1"
                   width="100%" />
      </imageobject>
    </mediaobject>

    <abstract>
      <para>This document is a reference manual for the Jspresso framework. It
      deals with all the building blocks of a Jspresso application.</para>
    </abstract>
  </bookinfo>

  <toc></toc>

  <preface id="preface">
    <title>Preface</title>

    <para>Software development requires many different skills. This is even
    more true when you have to deal with a distributed business application
    for which you have to get expertise on :</para>

    <itemizedlist>
      <listitem>
        <para>Database design and performance (schema design, data access
        optimisation, data integrity, ...)</para>
      </listitem>

      <listitem>
        <para>Gui design and binding on domain model (views, flow, actions,
        ...)</para>
      </listitem>

      <listitem>
        <para>N-tier architecture design for distributed applications
        (frontend deployment, bandwidth consumption, network round trips,
        ...)</para>
      </listitem>

      <listitem>
        <para>System scalability and robustness (fail over, load-balancing,
        ...)</para>
      </listitem>

      <listitem>
        <para>Software architecture and best practices (design patterns,
        security, manageability, logging, low coupling, separation of
        concerns, ...)</para>
      </listitem>

      <listitem>
        <para>Up-to-date technology building blocks (stay with standards,
        leverage on existing components, easy switch between equivalent
        components, ...)</para>
      </listitem>
    </itemizedlist>

    <para>Whenever one of these skills is not efficiently addressed, the
    software may simply never become available or may not meet the promised
    quality or exploitability required standards. It surely leads to huge
    delays on the schedule and bad ROI.</para>

    <para>Big software vendors have tried to address this situation more or
    less succesfully by providing end to end CASE tools, but there are
    well-known drawbacks to this approach. Some of them are :</para>

    <itemizedlist>
      <listitem>
        <para>High license fees for development and generally for
        runtime</para>
      </listitem>

      <listitem>
        <para>End-to-end proprietary solutions locking the software and thus
        the customer into the chosen technology and tools</para>
      </listitem>

      <listitem>
        <para>The resulting software is often completely opaque and rarely
        intergrates seamlessly in the overall information
        infrastructure</para>
      </listitem>
    </itemizedlist>

    <para>With these ideas in mind, the Jspresso application framework was
    developed. To get an idea of what a software framework is and what it is
    not, please, refer to the following <ulink
    url="http://en.wikipedia.org/wiki/Software_framework">link</ulink>. The
    Jspresso framework differs from most of the other frameworks since it
    addresses the complete software architecture (see the <link
    linkend="Jspresso-modules">Jspresso modules diagram</link>) including all
    the key success factors formerly described; but instead of "reinventing
    the wheel", Jspresso strongly relies on production-proof open source
    libraries and components. To get a complete list of the used libraries,
    please refer to the Appendices.</para>

    <para>Each of these libraries is distributed using a business-friendly
    licence (<ulink
    url="http://www.opensource.org/licenses/lgpl-license.php">LGPL</ulink>,
    <ulink
    url="http://www.opensource.org/licenses/bsd-license.php">BSD</ulink>,
    <ulink
    url="http://www.opensource.org/licenses/apachepl.php">Apache</ulink>, ...)
    that enables its inclusion in closed-source software under copyright
    notice conditions. Jspresso put them all together, in a loosely coupled
    architecture so that the resulting software is not locked in any of them.
    As an example, you don't have to choose whether you want to distribute
    your application as a Java swing application through Java Web Start or as
    an Ajax application without any plug in or both ! Jspresso will take care
    of it at runtime.<figure id="Jspresso-modules">
        <title>Jspresso Modules</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="40%"
                       fileref="../images/Jspresso-modules.jpg" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>The whole objective of Jspresso is to shorten the gap (and thus
    avoid the "tunnel" effect) between the business requirement analysis, the
    detailed specifications, the design and the software available and
    running. The development process becomes extremely agile since the
    prototype progressively becomes the final application through very short
    iterations.</para>

    <para>To achieve this goal, the main paradigm of Jspresso is "whenever
    describing is enough, do not code". Take a simple frontend example : you
    want to provide the end user with a table listing a set of articles. Of
    course, this table view has to be editable, sortable and present the
    different columns based on their types (an image, the remaining stock
    quantity, the date when this article was made available in the system, and
    so on). Everyone is able to describe this view precisely and everyone is
    able to understand what has been described. There should not be a need for
    coding a single line of code (swing, html, jsp, javascript, ...) whenever
    this description has been captured by the framework. That is exactly what
    Jspresso does by taking care of the implementation once you have expressed
    the requirements. And there is no complex code generation. Everything is
    just handled at runtime.</para>

    <para>Here are some of the key features of the Jspresso framework :</para>

    <para><emphasis role="bold">General design</emphasis></para>

    <itemizedlist>
      <listitem>
        <para>Develop by assembling built-in java beans descriptors through
        dependency injection. Descriptors can also be dynamically composed in
        plain java code if needed.</para>
      </listitem>

      <listitem>
        <para>Desktop ergonomics oriented. Jspresso is not another web
        framework so just forget about page flows.</para>
      </listitem>

      <listitem>
        <para>I18N and security (authentication and authorizations) as first
        citizens.</para>
      </listitem>
    </itemizedlist>

    <para><emphasis role="bold">Domain model</emphasis></para>

    <itemizedlist>
      <listitem>
        <para>Rich domain model paradigm (as opposed to thin or even anorexic
        domain models). Entities are responsible of their integrity, offer
        services and handle their relationships to others.</para>
      </listitem>

      <listitem>
        <para>Model descriptors allow for the implementation of arbitrarily
        complex domain models :</para>

        <itemizedlist>
          <listitem>
            <para>1-N, N-1, N-N, 1-1 unidirectional and bidirectional
            relationships</para>
          </listitem>

          <listitem>
            <para>association and composition semantics</para>
          </listitem>

          <listitem>
            <para>list and set collection semantics</para>
          </listitem>

          <listitem>
            <para>entities, inlined components and service interfaces</para>
          </listitem>

          <listitem>
            <para>entities inheritance o more than 15 property types handled
            through all layers (string, integer, enumeration, date, duration,
            color, percentage, binary, ...)</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Services offered by entities (and components) are objects
        themselves that are assembled in the entity (or component) through
        dependency injection. This allows for easy mok-up, logging and
        tracing, KPI implementation, inheritance between services, ... You can
        get all the advantages of AOP without its drawbacks.</para>
      </listitem>

      <listitem>
        <para>Model descriptors offer fine-grained model description (rich
        validation constraints on properties). This is one of the most
        important feature of Jspresso since this rich semantic is then
        leveraged in all other layers without the need of repeating things.
        For instance, once you have constrained a property with a regular
        expression, views presenting this property will automagically enforce
        this constraint by allowing only matching values to be entered.
        Describe finely your domain model and building a complete application
        over it will be an effortless process.</para>
      </listitem>

      <listitem>
        <para>Jspresso entities (and components) support computed properties.
        Once defined, they are just usable as any primary property in the
        other layers.</para>
      </listitem>

      <listitem>
        <para>Jspresso entities (and components) support life-cycle
        interceptors (on-create, on-persist, on-update, on-delete). Life-cycle
        interceptors are objects that are assembled in entities and
        dynamically triggered by the framework when needed.</para>
      </listitem>

      <listitem>
        <para>Jspresso entities (and components) support property modifiers
        interceptors (before, intercept, after). Property modifiers
        interceptors are objects that are assembled in entities and
        dynamically triggered by the framework when needed.</para>
      </listitem>

      <listitem>
        <para>Jspresso handles transparently the persistence of the domain
        model in the backend store. Everything needed to achieve this is
        inferred form the model description. Atomic backend synchronization is
        also completely handled by the framework and allow delayed updates of
        in-memory changes.</para>
      </listitem>
    </itemizedlist>

    <para><emphasis role="bold">Views</emphasis></para>

    <itemizedlist>
      <listitem>
        <para>Technology neutral view description. Following the assembling
        principle, views are generated at runtime through built-in factories
        depending on the chosen deployment strategy. Developing views is
        achieved by composing technology agnostic java beans view descriptors;
        this means absolutely no swing, ULC, javascript, HTML or whatever
        direct coding. Jspresso offers an extensive range of ready-to-use,
        highly configurable, view descriptors including :</para>

        <itemizedlist>
          <listitem>
            <para>tree view</para>
          </listitem>

          <listitem>
            <para>table view</para>
          </listitem>

          <listitem>
            <para>list view</para>
          </listitem>

          <listitem>
            <para>form (component) view leveraging all supported property
            types with calendar component, filtered fields, list of values for
            relationships, ...</para>
          </listitem>

          <listitem>
            <para>single property view o image view o composite (container)
            views :</para>

            <itemizedlist>
              <listitem>
                <para>border (north, south, east, west, center) composite
                view</para>
              </listitem>

              <listitem>
                <para>card composite view</para>
              </listitem>

              <listitem>
                <para>split composite view</para>
              </listitem>

              <listitem>
                <para>tab composite view</para>
              </listitem>

              <listitem>
                <para>grid composite views : evenly size distributed grids and
                constrained size distributed grids</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Jspresso is open for extensions. You can easily implement your
        own view descriptors and extend the built-in view factories so that
        they are ready to handle them.</para>
      </listitem>

      <listitem>
        <para>View descriptors are highly configurable but offer sensible
        default values; you can assemble really rich views in minutes. General
        customizations include fonts, colors and border. Of course, each view
        descriptor allows for specialized customization; some examples of such
        customizations are :</para>

        <itemizedlist>
          <listitem>
            <para>number of columns and list of displayed properties in form
            views o split orientation in split views</para>
          </listitem>

          <listitem>
            <para>columns in table views</para>
          </listitem>

          <listitem>
            <para>many, many others...</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Jspresso views are naturally internationalized. Special care has
        been taken to nicely handle common I18N problems such as translation
        lengths differences by exclusively using layouts behind the scene;
        this means no problematic absolute positioning of components and thus
        GUI resize friendly behaviour.</para>
      </listitem>

      <listitem>
        <para>Jspresso avoids description repetition. Views are automatically
        configured based on their underlying model. For instance, fields (or
        table columns) preferred length are computed based on the maximum
        length constraint of the underlying model property.</para>
      </listitem>
    </itemizedlist>

    <para><emphasis role="bold">High-level application
    components</emphasis></para>

    <itemizedlist>
      <listitem>
        <para>Jspresso offers a rich set of ready-to-use high level
        application components that are ready to assemble in application
        modules. For instance, Jspresso offers a highly configurable built-in
        module for CRUD operations on an entity family.</para>
      </listitem>
    </itemizedlist>

    <para><emphasis role="bold">Binding</emphasis></para>

    <itemizedlist>
      <listitem>
        <para>Jspresso transparently implements a true bidirectional MVC
        (Model-View-Controller). Views are always in sync with their session,
        in-memory, server-side model. This kind of design is a real challenge
        for distributed applications since it implies a lot of effort in terms
        of client-server communication efficiency and model integrity
        (Jspresso heavily uses the Unit-of-Work architectural pattern to
        guarantee the coherence of the backend transactional updates and of
        the in-memory model state).</para>
      </listitem>

      <listitem>
        <para>Binding views and model doesn't require any special effort from
        the developer. It is just implicit when you describe your views.
        Binding is based on the JavaBeans' property semantics (property
        accessors).</para>
      </listitem>
    </itemizedlist>

    <para><emphasis role="bold">Actions</emphasis></para>

    <itemizedlist>
      <listitem>
        <para>Jspresso offers a rich and extensible set of built-in actions.
        Actions are implemented following a comprehensive action framework.
        There are more than 50 different built-in actions ready to be
        customized and assembled in Jspresso applications. Some example of
        such actions are :</para>

        <itemizedlist>
          <listitem>
            <para>save action that transactionally updates the backend
            store</para>
          </listitem>

          <listitem>
            <para>copy, cut, paste actions that manage an entity oriented
            clipboard o create and add, remove from, duplicate and add actions
            to handle "master-detail" like GUIs</para>
          </listitem>

          <listitem>
            <para>query action that implements a query by example to retrieve
            entities from the backend store o wizard action that chain views
            and populate an arbitrary context</para>
          </listitem>

          <listitem>
            <para>many, many others...</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>Jspresso actions are naturally split in 2 main categories
        :</para>

        <itemizedlist>
          <listitem>
            <para>front-end actions that handle user interactions with the
            application. They offer customizable (and internationalized) tool
            tips, icons, keyboard shortcuts, ...</para>
          </listitem>

          <listitem>
            <para>back-end actions that are faceless and thus GUI independent.
            They are related to domain model operations.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Front-end actions are assembled in views so that users can
        trigger them. They compose a tool bar attached to the view but can
        also be triggered using a contextual pop-up menu.</para>
      </listitem>

      <listitem>
        <para>Jspresso actions can be chained together so that you can
        implement complex application workflows by composing basic
        actions.</para>
      </listitem>

      <listitem>
        <para>Jspresso actions are objects. This means that you can easily
        implement object-oriented hierarchies of actions, capitalize standard
        action sets that are reusable across your company applications,
        implement common behaviour for tracing, performance monitoring of
        services and so on.</para>
      </listitem>
    </itemizedlist>

    <para><emphasis role="bold">Security</emphasis></para>

    <itemizedlist>
      <listitem>
        <para>Security is everywhere in Jspresso but you won't notice it
        unless you actually need it.</para>
      </listitem>

      <listitem>
        <para>Authentication is based on JAAS. Jspresso provides standard
        login modules that are fully JAAS compliant.</para>
      </listitem>

      <listitem>
        <para>Authorizations are not handled by JAAS. This choice is
        deliberate since we believe that JAAS authorizations (and all the
        authorization frameworks we heard about) are too much code related,
        quite difficult to implement and lack some higher level concepts (like
        "make this field read-only for non-admin profiles"). So we implemented
        a simple yet complete and powerful authorization infrastructure
        :</para>

        <itemizedlist>
          <listitem>
            <para>based on profiles that are hierarchically organized and
            populated by JAAS authentication</para>
          </listitem>

          <listitem>
            <para>declarative so that you just have to configure the
            descriptors with a list of authorized profiles (using their
            names). Whenever this list is missing means that there is no
            restriction on the underlying component.</para>
          </listitem>

          <listitem>
            <para>applicable in all layers.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>Each and every part of a Jspresso application is securable with
        authorization rules Authorizations are propagated across layers so
        that if you declare a restriction in the domain model layer it is
        automatically propagated in the related views. But of course you can
        declare the restriction in the view (or part of the view) itself.
        Securable Jspresso components include :</para>

        <itemizedlist>
          <listitem>
            <para>entity (or component) families</para>
          </listitem>

          <listitem>
            <para>single entity (or component) properties</para>
          </listitem>

          <listitem>
            <para>actions</para>
          </listitem>

          <listitem>
            <para>views (and view parts)</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <para><emphasis role="bold">I18N</emphasis></para>

    <itemizedlist>
      <listitem>
        <para>Jspresso has been developed to address the widest range of
        business. That is why it has been built with I18N in mind since the
        very beginning. But again, Jspresso makes internationalization
        easy.</para>
      </listitem>

      <listitem>
        <para>I18N is not tied to the client desktop locale but to the user
        preferred language.</para>
      </listitem>

      <listitem>
        <para>I18N applies to label translation and various formats (date,
        decimal, ...)</para>
      </listitem>

      <listitem>
        <para>I18N traverses all layers with easy to apply conventions. For
        instance, whenever a form field is presented to the user, the
        framework will automatically look for a translation of the underlying
        property name. This means that once you've translated your entities
        names and property names, all your application is potentially
        internationalized. You can of course override this standard behaviour
        if you want to name the same property differently in different
        views.</para>
      </listitem>
    </itemizedlist>

    <para><emphasis role="bold">Deployment architecture</emphasis></para>

    <itemizedlist>
      <listitem>
        <para>Seamless multi-channel deployment of the front-end :</para>

        <itemizedlist>
          <listitem>
            <para>Swing</para>
          </listitem>

          <listitem>
            <para>ULC (lightweight distributed swing, commercial development
            licence needed)</para>
          </listitem>

          <listitem>
            <para>WingS (Ajax)</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>No need for a full-fledged application server unless you really
        need it. Jspresso embraced the Spring framework philosophy to keep the
        required software infrastructure as light as possible. The minimum
        requirement is a 2.5 servlet container (even not needed for a 2-tier
        swing deployment) and an Hibernate supported database.</para>
      </listitem>
    </itemizedlist>

    <para>This manual is organized around developing a sample application
    which is targeted at human resources management. We will cover the
    complete development process while presenting as much as possible of the
    Jspresso framework. We believe that this approach will be more efficient
    than a raw description of the framework features since it will show you
    not only what to use but also how to use it efficiently. And of course,
    whenever a new feature is introduced we will suggest a link to its full
    reference.</para>

    <para>So let's begin.</para>
  </preface>

  <!--
  <xi:include href="chapter1.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="chapter2.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="chapter3.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="chapter4.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="chapter5.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="chapter6.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="chapter7.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude" />
  -->

  <xi:include href="chapter1.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="chapter2.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="chapter3.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="chapter4.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="chapter5.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="chapter6.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="chapter7.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
</book>
