class AbstractComponentInvocationHandler
!!!135303.java!!!	AbstractComponentInvocationHandler(inout componentDescriptor : IComponentDescriptor, inout inlineComponentFactory : IComponentFactory, inout collectionFactory : IComponentCollectionFactory, inout accessorFactory : IAccessorFactory, inout extensionFactory : IComponentExtensionFactory)

    this.componentDescriptor = componentDescriptor;
    this.inlineComponentFactory = inlineComponentFactory;
    this.collectionFactory = collectionFactory;
    this.accessorFactory = accessorFactory;
    this.extensionFactory = extensionFactory;
!!!135431.java!!!	getComponentContract() : Class<? extends Object>

    return componentDescriptor.getComponentContract();
!!!135559.java!!!	invoke(inout proxy : Object, inout method : Method, inout args : Object) : Object

    String methodName = method.getName();
    if ("hashCode".equals(methodName)) {
      return new Integer(computeHashCode());
    } else if ("equals".equals(methodName)) {
      return new Boolean(computeEquals((IComponent) proxy, args[0]));
    } else if ("toString".equals(methodName)) {
      return toString(proxy);
    } else if ("getContract".equals(methodName)) {
      return componentDescriptor.getComponentContract();
    } else if ("addPropertyChangeListener".equals(methodName)) {
      if (args.length == 1) {
        addPropertyChangeListener(proxy, (PropertyChangeListener) args[0]);
        return null;
      }
      addPropertyChangeListener(proxy, (String) args[0],
          (PropertyChangeListener) args[1]);
      return null;
    } else if ("removePropertyChangeListener".equals(methodName)) {
      if (args.length == 1) {
        removePropertyChangeListener((PropertyChangeListener) args[0]);
        return null;
      }
      removePropertyChangeListener((String) args[0],
          (PropertyChangeListener) args[1]);
      return null;
    } else if ("firePropertyChange".equals(methodName)) {
      firePropertyChange((String) args[0], args[1], args[2]);
      return null;
    } else if ("straightSetProperty".equals(methodName)) {
      straightSetProperty((String) args[0], args[1]);
      return null;
    } else if ("straightGetProperty".equals(methodName)) {
      return straightGetProperty((String) args[0]);
    } else if ("straightSetProperties".equals(methodName)) {
      straightSetProperties((Map<String, Object>) args[0]);
      return null;
    } else if ("straightGetProperties".equals(methodName)) {
      return straightGetProperties();
    } else {
      boolean isLifecycleMethod = false;
      try {
        isLifecycleMethod = ILifecycleCapable.class.getMethod(methodName,
            method.getParameterTypes()) != null;
      } catch (NoSuchMethodException ignored) {
        // this is certainly normal.
      }
      if (isLifecycleMethod) {
        return new Boolean(invokeLifecycleInterceptors(proxy, method, args));
      }
      AccessorInfo accessorInfo = new AccessorInfo(method);
      int accessorType = accessorInfo.getAccessorType();
      IPropertyDescriptor propertyDescriptor = null;
      if (accessorType != AccessorInfo.NONE) {
        String accessedPropertyName = accessorInfo.getAccessedPropertyName();
        if (accessedPropertyName != null) {
          propertyDescriptor = componentDescriptor
              .getPropertyDescriptor(accessedPropertyName);
        }
      }
      if (propertyDescriptor != null) {
        Class extensionClass = propertyDescriptor.getDelegateClass();
        if (extensionClass != null) {
          IComponentExtension extensionDelegate = getExtensionInstance(
              extensionClass, (IComponent) proxy);
          return invokeExtensionMethod(extensionDelegate, method, args);
        }
        if (accessorInfo.isModifier()) {
          if (modifierMonitors != null && modifierMonitors.contains(methodName)) {
            return null;
          }
          if (modifierMonitors == null) {
            modifierMonitors = new HashSet<String>();
          }
          modifierMonitors.add(methodName);
        }
        try {
          switch (accessorType) {
            case AccessorInfo.GETTER:
              return getProperty(proxy, propertyDescriptor);
            case AccessorInfo.SETTER:
              setProperty(proxy, propertyDescriptor, args[0]);
              return null;
            case AccessorInfo.ADDER:
              if (args.length == 2) {
                addToProperty(proxy,
                    (ICollectionPropertyDescriptor) propertyDescriptor,
                    ((Integer) args[0]).intValue(), args[1]);
              } else {
                addToProperty(proxy,
                    (ICollectionPropertyDescriptor) propertyDescriptor, args[0]);
              }
              return null;
            case AccessorInfo.REMOVER:
              removeFromProperty(proxy,
                  (ICollectionPropertyDescriptor) propertyDescriptor, args[0]);
              return null;
            default:
              break;
          }
        } finally {
          if (modifierMonitors != null && accessorInfo.isModifier()) {
            modifierMonitors.remove(methodName);
          }
        }
      } else {
        try {
          return invokeServiceMethod(proxy, method, args);
        } catch (NoSuchMethodException ignored) {
          // it will fall back in the general case.
        }
      }
    }
    throw new ComponentException(method.toString()
        + " is not supported on the component "
        + componentDescriptor.getComponentContract());
!!!135687.java!!!	setCollectionFactory(inout collectionFactory : IComponentCollectionFactory) : void

    this.collectionFactory = collectionFactory;
!!!136199.java!!!	getAccessorFactory() : IAccessorFactory

    return accessorFactory;
!!!136327.java!!!	getCollectionProperty(inout proxy : Object, inout propertyDescriptor : ICollectionPropertyDescriptor) : Object

    Object property = straightGetProperty(propertyDescriptor.getName());
    if (property == null) {
      property = collectionFactory.createEntityCollection(propertyDescriptor
          .getReferencedDescriptor().getCollectionInterface());
      storeProperty(propertyDescriptor.getName(), property);
    }
    if (property instanceof List) {
      List<IComponent> propertyAsList = (List<IComponent>) property;
      for (int i = 0; i < propertyAsList.size(); i++) {
        IComponent referent = propertyAsList.get(i);
        IComponent decorated = decorateReferent(referent, propertyDescriptor
            .getReferencedDescriptor().getElementDescriptor()
            .getComponentDescriptor());
        if (decorated != referent) {
          propertyAsList.set(i, decorated);
        }
      }
    } else if (property instanceof Set) {
      Set<IComponent> propertyAsSet = (Set<IComponent>) property;
      for (IComponent referent : new HashSet<IComponent>(propertyAsSet)) {
        IComponent decorated = decorateReferent(referent, propertyDescriptor
            .getReferencedDescriptor().getElementDescriptor()
            .getComponentDescriptor());
        if (decorated != referent) {
          propertyAsSet.add(decorated);
        }
      }
    }
    return property;
!!!136455.java!!!	getProperty(inout proxy : Object, inout propertyDescriptor : IPropertyDescriptor) : Object

    if (propertyDescriptor instanceof ICollectionPropertyDescriptor) {
      return getCollectionProperty(
          proxy,
          (ICollectionPropertyDescriptor<? extends IComponent>) propertyDescriptor);
    } else if (propertyDescriptor instanceof IReferencePropertyDescriptor) {
      return getReferenceProperty(proxy,
          (IReferencePropertyDescriptor<IComponent>) propertyDescriptor);
    }
    Object propertyValue = straightGetProperty(propertyDescriptor.getName());
    return propertyValue;
!!!136583.java!!!	isInlineComponentReference(inout propertyDescriptor : IReferencePropertyDescriptor) : boolean

    return !IEntity.class.isAssignableFrom(propertyDescriptor
        .getReferencedDescriptor().getComponentContract())
        && !propertyDescriptor.getReferencedDescriptor().isPurelyAbstract();
!!!136711.java!!!	getReferenceProperty(inout proxy : Object, in propertyDescriptor : IReferencePropertyDescriptor) : Object

    IComponent property = (IComponent) straightGetProperty(propertyDescriptor
        .getName());
    if (property == null && isInlineComponentReference(propertyDescriptor)) {
      property = inlineComponentFactory
          .createComponentInstance(propertyDescriptor.getReferencedDescriptor()
              .getComponentContract());

      property.addPropertyChangeListener(new PropertyChangeListener() {

        public void propertyChange(PropertyChangeEvent evt) {
          firePropertyChange(propertyDescriptor.getName(), null, evt
              .getSource());
          firePropertyChange(propertyDescriptor.getName() + "."
              + evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());
        }
      });
      storeProperty(propertyDescriptor.getName(), property);
    }
    return decorateReferent(property, propertyDescriptor
        .getReferencedDescriptor());
!!!136839.java!!!	invokeServiceMethod(inout proxy : Object, inout method : Method, inout args : Object) : Object

    IComponentService service = componentDescriptor.getServiceDelegate(method);
    if (service != null) {
      int signatureSize = method.getParameterTypes().length + 1;
      Class<?>[] parameterTypes = new Class[signatureSize];
      Object[] parameters = new Object[signatureSize];

      parameterTypes[0] = componentDescriptor.getComponentContract();
      parameters[0] = proxy;

      for (int i = 1; i < signatureSize; i++) {
        parameterTypes[i] = method.getParameterTypes()[i - 1];
        parameters[i] = args[i - 1];
      }
      try {
        return MethodUtils.invokeMethod(service, method.getName(), parameters,
            parameterTypes);
      } catch (IllegalAccessException ex) {
        throw new ComponentException(ex);
      } catch (InvocationTargetException ex) {
        throw new ComponentException(ex.getCause());
      } catch (NoSuchMethodException ex) {
        throw new ComponentException(ex);
      }
    }
    throw new NoSuchMethodException(method.toString());
!!!136967.java!!!	isInitialized(inout objectOrProxy : Object) : boolean

    return true;
!!!137351.java!!!	straightGetProperty(in propertyName : String) : Object

    Object propertyValue = retrievePropertyValue(propertyName);
    if (propertyValue == null
        && componentDescriptor.getPropertyDescriptor(propertyName) instanceof IBooleanPropertyDescriptor) {
      return Boolean.FALSE;
    }
    return propertyValue;
!!!137479.java!!!	addPropertyChangeListener(inout proxy : Object, inout listener : PropertyChangeListener) : void

    if (listener == null) {
      return;
    }
    if (changeSupport == null) {
      changeSupport = new SinglePropertyChangeSupport(proxy);
    }
    changeSupport.addPropertyChangeListener(listener);
!!!137607.java!!!	addPropertyChangeListener(inout proxy : Object, in propertyName : String, inout listener : PropertyChangeListener) : void

    if (listener == null) {
      return;
    }
    if (changeSupport == null) {
      changeSupport = new SinglePropertyChangeSupport(proxy);
    }
    changeSupport.addPropertyChangeListener(propertyName, listener);
!!!137735.java!!!	addToProperty(inout proxy : Object, inout propertyDescriptor : ICollectionPropertyDescriptor, in index : int, inout value : Object) : void

    String propertyName = propertyDescriptor.getName();
    try {
      Collection collectionProperty = (Collection) accessorFactory
          .createPropertyAccessor(propertyName,
              componentDescriptor.getComponentContract()).getValue(proxy);
      propertyDescriptor.preprocessAdder(proxy, collectionProperty, value);
      IRelationshipEndPropertyDescriptor reversePropertyDescriptor = propertyDescriptor
          .getReverseRelationEnd();
      if (reversePropertyDescriptor != null) {
        if (reversePropertyDescriptor instanceof IReferencePropertyDescriptor) {
          accessorFactory.createPropertyAccessor(
              reversePropertyDescriptor.getName(),
              propertyDescriptor.getReferencedDescriptor()
                  .getElementDescriptor().getComponentContract()).setValue(
              value, proxy);
        } else if (reversePropertyDescriptor instanceof ICollectionPropertyDescriptor) {
          ICollectionAccessor collectionAccessor = accessorFactory
              .createCollectionPropertyAccessor(reversePropertyDescriptor
                  .getName(), propertyDescriptor.getReferencedDescriptor()
                  .getElementDescriptor().getComponentContract(),
                  ((ICollectionPropertyDescriptor) reversePropertyDescriptor)
                      .getCollectionDescriptor().getElementDescriptor()
                      .getComponentContract());
          if (collectionAccessor instanceof IModelDescriptorAware) {
            ((IModelDescriptorAware) collectionAccessor)
                .setModelDescriptor(reversePropertyDescriptor);
          }
          collectionAccessor.addToValue(value, proxy);
        }
      }
      Collection oldCollectionSnapshot = CollectionHelper
          .cloneCollection((Collection<?>) collectionProperty);
      boolean inserted = false;
      if (collectionProperty instanceof List && index >= 0
          && index < collectionProperty.size()) {
        ((List) collectionProperty).add(index, value);
        inserted = true;
      } else {
        inserted = collectionProperty.add(value);
      }
      if (inserted) {
        firePropertyChange(propertyName, oldCollectionSnapshot,
            collectionProperty);
        propertyDescriptor.postprocessAdder(proxy, collectionProperty, value);
      }
    } catch (IllegalAccessException ex) {
      // This cannot happen but throw anyway.
      throw new ComponentException(ex);
    } catch (InvocationTargetException ex) {
      // This cannot happen but throw anyway.
      throw new ComponentException(ex.getCause());
    } catch (NoSuchMethodException ex) {
      // This cannot happen but throw anyway.
      throw new ComponentException(ex);
    }
!!!137863.java!!!	addToProperty(inout proxy : Object, inout propertyDescriptor : ICollectionPropertyDescriptor, inout value : Object) : void

    addToProperty(proxy, propertyDescriptor, -1, value);
!!!137991.java!!!	checkIntegrity(inout proxy : Object) : void

    for (IPropertyDescriptor propertyDescriptor : componentDescriptor
        .getPropertyDescriptors()) {
      propertyDescriptor.checkValueIntegrity(proxy,
          straightGetProperty(propertyDescriptor.getName()));
    }
!!!138119.java!!!	firePropertyChange(in propertyName : String, inout oldValue : Object, inout newValue : Object) : void

    if (changeSupport == null || (oldValue == null && newValue == null)) {
      return;
    }
    if (!isInitialized(oldValue)) {
      changeSupport.firePropertyChange(propertyName, null, newValue);
    } else {
      changeSupport.firePropertyChange(propertyName, oldValue, newValue);
    }
!!!138247.java!!!	getExtensionInstance(inout extensionClass : Class<IComponentExtension<IComponent>>, inout proxy : IComponent) : IComponentExtension

    IComponentExtension<IComponent> extension;
    if (componentExtensions == null) {
      componentExtensions = new HashMap<Class<IComponentExtension<IComponent>>, IComponentExtension<IComponent>>();
      extension = null;
    } else {
      extension = componentExtensions.get(extensionClass);
    }
    if (extension == null) {
      extension = extensionFactory.createComponentExtension(extensionClass,
          componentDescriptor.getComponentContract(), proxy);
      componentExtensions.put(extensionClass, extension);
    }
    return extension;
!!!138375.java!!!	invokeExtensionMethod(inout componentExtension : IComponentExtension, inout method : Method, inout args : Object) : Object

    try {
      return MethodUtils.invokeMethod(componentExtension, method.getName(),
          args, method.getParameterTypes());
    } catch (IllegalAccessException ex) {
      throw new ComponentException(ex);
    } catch (InvocationTargetException ex) {
      throw new ComponentException(ex.getCause());
    } catch (NoSuchMethodException ex) {
      throw new ComponentException(ex);
    }
!!!138503.java!!!	invokeLifecycleInterceptors(inout proxy : Object, inout lifecycleMethod : Method, inout args : Object) : boolean

    if (ILifecycleCapable.ON_PERSIST_METHOD_NAME.equals(lifecycleMethod
        .getName())
        || ILifecycleCapable.ON_UPDATE_METHOD_NAME.equals(lifecycleMethod
            .getName())) {
      checkIntegrity(proxy);
    }
    boolean interceptorResults = false;
    for (ILifecycleInterceptor<?> lifecycleInterceptor : componentDescriptor
        .getLifecycleInterceptors()) {
      int signatureSize = lifecycleMethod.getParameterTypes().length + 1;
      Class<?>[] parameterTypes = new Class[signatureSize];
      Object[] parameters = new Object[signatureSize];

      parameterTypes[0] = componentDescriptor.getComponentContract();
      parameters[0] = proxy;

      for (int i = 1; i < signatureSize; i++) {
        parameterTypes[i] = lifecycleMethod.getParameterTypes()[i - 1];
        parameters[i] = args[i - 1];
      }
      try {
        interceptorResults = interceptorResults
            || ((Boolean) MethodUtils.invokeMethod(lifecycleInterceptor,
                lifecycleMethod.getName(), parameters, parameterTypes))
                .booleanValue();
      } catch (IllegalAccessException ex) {
        throw new ComponentException(ex);
      } catch (InvocationTargetException ex) {
        throw new ComponentException(ex.getCause());
      } catch (NoSuchMethodException ex) {
        throw new ComponentException(ex);
      }
    }
    // invoke lifecycle method on inlined components
    for (IPropertyDescriptor propertyDescriptor : componentDescriptor
        .getPropertyDescriptors()) {
      if (propertyDescriptor instanceof IReferencePropertyDescriptor<?>
          && isInlineComponentReference((IReferencePropertyDescriptor<IComponent>) propertyDescriptor)) {
        Object inlineComponent = getProperty(proxy, propertyDescriptor);
        if (inlineComponent != null) {
          try {
            interceptorResults = interceptorResults
                || ((Boolean) MethodUtils.invokeMethod(inlineComponent,
                    lifecycleMethod.getName(), args, lifecycleMethod
                        .getParameterTypes())).booleanValue();
          } catch (NoSuchMethodException ex) {
            throw new ComponentException(ex);
          } catch (IllegalAccessException ex) {
            throw new ComponentException(ex);
          } catch (InvocationTargetException ex) {
            throw new ComponentException(ex);
          }
        }
      }
    }
    return interceptorResults;
!!!138631.java!!!	removeFromProperty(inout proxy : Object, inout propertyDescriptor : ICollectionPropertyDescriptor, inout value : Object) : void

    String propertyName = propertyDescriptor.getName();
    if (!isInitialized(straightGetProperty(propertyName))) {
      return;
    }
    try {
      Collection<?> collectionProperty = (Collection<?>) accessorFactory
          .createPropertyAccessor(propertyName,
              componentDescriptor.getComponentContract()).getValue(proxy);
      propertyDescriptor.preprocessRemover(proxy, collectionProperty, value);
      if (collectionProperty.contains(value)) {
        IRelationshipEndPropertyDescriptor reversePropertyDescriptor = propertyDescriptor
            .getReverseRelationEnd();
        if (reversePropertyDescriptor != null) {
          if (reversePropertyDescriptor instanceof IReferencePropertyDescriptor) {
            accessorFactory.createPropertyAccessor(
                reversePropertyDescriptor.getName(),
                propertyDescriptor.getReferencedDescriptor()
                    .getElementDescriptor().getComponentContract()).setValue(
                value, null);
          } else if (reversePropertyDescriptor instanceof ICollectionPropertyDescriptor) {
            ICollectionAccessor collectionAccessor = accessorFactory
                .createCollectionPropertyAccessor(
                    reversePropertyDescriptor.getName(),
                    propertyDescriptor.getReferencedDescriptor()
                        .getElementDescriptor().getComponentContract(),
                    ((ICollectionPropertyDescriptor<?>) reversePropertyDescriptor)
                        .getCollectionDescriptor().getElementDescriptor()
                        .getComponentContract());
            if (collectionAccessor instanceof IModelDescriptorAware) {
              ((IModelDescriptorAware) collectionAccessor)
                  .setModelDescriptor(reversePropertyDescriptor);
            }
            collectionAccessor.removeFromValue(value, proxy);
          }
        }
        Collection<?> oldCollectionSnapshot = CollectionHelper
            .cloneCollection((Collection<?>) collectionProperty);
        if (collectionProperty.remove(value)) {
          firePropertyChange(propertyName, oldCollectionSnapshot,
              collectionProperty);
          propertyDescriptor.postprocessRemover(proxy, collectionProperty,
              value);
        }
      }
    } catch (IllegalAccessException ex) {
      // This cannot happen but throw anyway.
      throw new ComponentException(ex);
    } catch (InvocationTargetException ex) {
      // This cannot happen but throw anyway.
      throw new ComponentException(ex.getCause());
    } catch (NoSuchMethodException ex) {
      // This cannot happen but throw anyway.
      throw new ComponentException(ex);
    }
!!!138759.java!!!	removePropertyChangeListener(inout listener : PropertyChangeListener) : void

    if (listener == null || changeSupport == null) {
      return;
    }
    changeSupport.removePropertyChangeListener(listener);
!!!138887.java!!!	removePropertyChangeListener(in propertyName : String, inout listener : PropertyChangeListener) : void

    if (listener == null || changeSupport == null) {
      return;
    }
    changeSupport.removePropertyChangeListener(propertyName, listener);
!!!139015.java!!!	setProperty(inout proxy : Object, inout propertyDescriptor : IPropertyDescriptor, inout newProperty : Object) : void

    String propertyName = propertyDescriptor.getName();

    Object oldProperty = null;
    try {
      oldProperty = accessorFactory.createPropertyAccessor(propertyName,
          componentDescriptor.getComponentContract()).getValue(proxy);
    } catch (IllegalAccessException ex) {
      throw new ComponentException(ex);
    } catch (InvocationTargetException ex) {
      throw new ComponentException(ex.getCause());
    } catch (NoSuchMethodException ex) {
      throw new ComponentException(ex);
    }
    if (ObjectUtils.equals(oldProperty, newProperty)) {
      return;
    }
    propertyDescriptor.preprocessSetter(proxy, oldProperty, newProperty);
    if (propertyDescriptor instanceof IRelationshipEndPropertyDescriptor) {
      // It's a relation end
      IRelationshipEndPropertyDescriptor reversePropertyDescriptor = ((IRelationshipEndPropertyDescriptor) propertyDescriptor)
          .getReverseRelationEnd();
      try {
        if (propertyDescriptor instanceof IReferencePropertyDescriptor) {
          // It's a 'one' relation end
          storeProperty(propertyName, newProperty);
          if (reversePropertyDescriptor != null) {
            // It is bidirectionnal, so we are going to update the other end.
            if (reversePropertyDescriptor instanceof IReferencePropertyDescriptor) {
              // It's a one-to-one relationship
              IAccessor reversePropertyAccessor = accessorFactory
                  .createPropertyAccessor(reversePropertyDescriptor.getName(),
                      ((IReferencePropertyDescriptor) propertyDescriptor)
                          .getReferencedDescriptor().getComponentContract());
              if (oldProperty != null) {
                reversePropertyAccessor.setValue(oldProperty, null);
              }
              if (newProperty != null) {
                reversePropertyAccessor.setValue(newProperty, proxy);
              }
            } else if (reversePropertyDescriptor instanceof ICollectionPropertyDescriptor) {
              // It's a one-to-many relationship
              ICollectionAccessor reversePropertyAccessor = accessorFactory
                  .createCollectionPropertyAccessor(
                      reversePropertyDescriptor.getName(),
                      ((IReferencePropertyDescriptor) propertyDescriptor)
                          .getReferencedDescriptor().getComponentContract(),
                      ((ICollectionPropertyDescriptor) reversePropertyDescriptor)
                          .getCollectionDescriptor().getElementDescriptor()
                          .getComponentContract());
              if (reversePropertyAccessor instanceof IModelDescriptorAware) {
                ((IModelDescriptorAware) reversePropertyAccessor)
                    .setModelDescriptor(reversePropertyDescriptor);
              }
              if (oldProperty != null) {
                reversePropertyAccessor.removeFromValue(oldProperty, proxy);
              }
              if (newProperty != null) {
                reversePropertyAccessor.addToValue(newProperty, proxy);
              }
            }
          }
        } else if (propertyDescriptor instanceof ICollectionPropertyDescriptor) {
          // It's a 'many' relation end
          Collection<Object> oldPropertyElementsToRemove = new HashSet<Object>();
          Collection<Object> newPropertyElementsToAdd = new HashSet<Object>();
          Collection<Object> propertyElementsToKeep = new HashSet<Object>();

          if (oldProperty != null) {
            oldPropertyElementsToRemove.addAll((Collection<?>) oldProperty);
            propertyElementsToKeep.addAll((Collection<?>) oldProperty);
          }
          if (newProperty != null) {
            newPropertyElementsToAdd.addAll((Collection<?>) newProperty);
          }
          propertyElementsToKeep.retainAll(newPropertyElementsToAdd);
          oldPropertyElementsToRemove.removeAll(propertyElementsToKeep);
          newPropertyElementsToAdd.removeAll(propertyElementsToKeep);
          ICollectionAccessor propertyAccessor = accessorFactory
              .createCollectionPropertyAccessor(propertyDescriptor.getName(),
                  componentDescriptor.getComponentContract(),
                  ((ICollectionPropertyDescriptor) propertyDescriptor)
                      .getCollectionDescriptor().getElementDescriptor()
                      .getComponentContract());
          for (Object element : oldPropertyElementsToRemove) {
            propertyAccessor.removeFromValue(proxy, element);
          }
          for (Object element : newPropertyElementsToAdd) {
            propertyAccessor.addToValue(proxy, element);
          }
          // if the property is a list we may restore the element order and be
          // careful not to miss one...
          if (newProperty instanceof List) {
            Collection currentProperty = propertyAccessor.getValue(proxy);
            if (currentProperty instanceof List) {
              // Just check the only order differs
              Set<Object> temp = new HashSet<Object>(currentProperty);
              temp.removeAll((List<?>) newProperty);
              currentProperty.clear();
              currentProperty.addAll((List<?>) newProperty);
              currentProperty.addAll(temp);
            }
          }
        }
      } catch (IllegalAccessException ex) {
        throw new ComponentException(ex);
      } catch (InvocationTargetException ex) {
        throw new ComponentException(ex.getCause());
      } catch (NoSuchMethodException ex) {
        throw new ComponentException(ex);
      }
    } else {
      storeProperty(propertyName, newProperty);
    }
    firePropertyChange(propertyName, oldProperty, newProperty);
    propertyDescriptor.postprocessSetter(proxy, oldProperty, newProperty);
!!!139143.java!!!	straightGetProperties() : Map<String, Object>

    Map<String, Object> allProperties = new HashMap<String, Object>();
    for (IPropertyDescriptor propertyDescriptor : componentDescriptor
        .getPropertyDescriptors()) {
      allProperties.put(propertyDescriptor.getName(),
          retrievePropertyValue(propertyDescriptor.getName()));
    }
    return allProperties;
!!!139271.java!!!	straightSetProperties(inout backendProperties : Map<String, Object>) : void

    for (Map.Entry<String, Object> propertyEntry : backendProperties.entrySet()) {
      straightSetProperty(propertyEntry.getKey(), propertyEntry.getValue());
    }
!!!139399.java!!!	straightSetProperty(in propertyName : String, inout newPropertyValue : Object) : void

    Object currentPropertyValue = straightGetProperty(propertyName);
    storeProperty(propertyName, newPropertyValue);
    if (componentDescriptor.getPropertyDescriptor(propertyName) instanceof ICollectionPropertyDescriptor) {
      ICollectionPropertyDescriptor propertyDescriptor = (ICollectionPropertyDescriptor) componentDescriptor
          .getPropertyDescriptor(propertyName);
      if (currentPropertyValue != null) {
        currentPropertyValue = Proxy.newProxyInstance(Thread.currentThread()
            .getContextClassLoader(), new Class[] {propertyDescriptor
            .getReferencedDescriptor().getCollectionInterface()},
            new NeverEqualsInvocationHandler(currentPropertyValue));
      }
    }
    firePropertyChange(propertyName, currentPropertyValue, newPropertyValue);
!!!139527.java!!!	toString(inout proxy : Object) : String

    try {
      String toStringPropertyName = componentDescriptor.getToStringProperty();
      Object toStringValue = accessorFactory.createPropertyAccessor(
          toStringPropertyName, componentDescriptor.getComponentContract())
          .getValue(proxy);
      if (toStringValue == null) {
        return "";
      }
      return toStringValue.toString();
    } catch (IllegalAccessException ex) {
      throw new ComponentException(ex);
    } catch (InvocationTargetException ex) {
      throw new ComponentException(ex);
    } catch (NoSuchMethodException ex) {
      throw new ComponentException(ex);
    }
