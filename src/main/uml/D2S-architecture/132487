format 48
"descriptor" // com::d2s::framework::view::descriptor
  revision 2
  modified_by 7 "Vincent"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default
  
  java_dir "com/d2s/framework/view/descriptor"
  java_package "com.d2s.framework.view.descriptor"
  classview 131975 "descriptor"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default
    class 146439 "IViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This public interface is the super-interface of all view descriptors.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 153735 // <generalisation>
	relation 153735 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 153735 // <generalisation>
	  b parent class_ref 148103 // ISubViewDescriptor
      end

      classrelation 153863 // <generalisation>
	relation 153863 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 153863 // <generalisation>
	  b parent class_ref 147591 // IActionable
      end

      attribute 143751 "NONE"
	package explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	idl_decl ""
	comment "
<code>NONE</code> border constant.

"
      end

      attribute 143879 "SIMPLE"
	package explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	idl_decl ""
	comment "
<code>SIMPLE</code> border constant.

"
      end

      attribute 144007 "TITLED"
	package explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	idl_decl ""
	comment "
<code>TITLED</code> border constant.

"
      end

      operation 202247 "getBackground"
	package explicit_return_type "Color"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the background color of this view.

@return this view's foreground color.
"
      end

      operation 202375 "getBorderType"
	package explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the border type used to surround view.

@return the border type :
        <li> <code>NONE</code> means no border.
        <li> <code>SIMPLE</code> means a simple line border.
        <li> <code>TITLED</code> means a titled border. The title will be
        the name of the view.
"
      end

      operation 202503 "getFont"
	package explicit_return_type "Font"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the font of this view.

@return this view's font.
"
      end

      operation 202631 "getForeground"
	package explicit_return_type "Color"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the foreground color of this view.

@return this view's foreground color.
"
      end
    end

    class 147847 "IBorderViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This public interface is implemented by container view descriptors which are
organizing their contained view descriptors in a north / south / east / west /
center manner. This kind of described view can typically be implemented using
a swing JPanel with a BorderLayout.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 154247 // <generalisation>
	relation 154247 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 154247 // <generalisation>
	  b parent class_ref 147975 // ICompositeViewDescriptor
      end

      operation 202887 "getCenterViewDescriptor"
	package return_type class_ref 146439 // IViewDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the contained view descriptor located at the center position.

@return the contained view descriptor or null.
"
      end

      operation 203015 "getEastViewDescriptor"
	package return_type class_ref 146439 // IViewDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the contained view descriptor located at the east position.

@return the contained view descriptor or null.
"
      end

      operation 203143 "getNorthViewDescriptor"
	package return_type class_ref 146439 // IViewDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the contained view descriptor located at the north position.

@return the contained view descriptor or null.
"
      end

      operation 203271 "getSouthViewDescriptor"
	package return_type class_ref 146439 // IViewDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the contained view descriptor located at the south position.

@return the contained view descriptor or null.
"
      end

      operation 203399 "getWestViewDescriptor"
	package return_type class_ref 146439 // IViewDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the contained view descriptor located at the west position.

@return the contained view descriptor or null.
"
      end
    end

    class 147975 "ICompositeViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This public interface is the super-interface of all view descriptors used as
containers for others.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 154119 // <generalisation>
	relation 154119 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 154119 // <generalisation>
	  b parent class_ref 146439 // IViewDescriptor
      end

      operation 202759 "isMasterDetail"
	package explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets wether this composite view is a master / detail view. When such a
master / detail composite view is built, each added child is bound to the
previous one in a master / detail relationship.

@return true if the child views are in a master / detail relationship.
"
      end
    end

    class 148103 "ISubViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
The sub views contract.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      operation 201735 "getModelDescriptor"
	package return_type class_ref 134663 // IModelDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the model descriptor this view descriptor acts on.

@return the view model descriptor.
"
      end

      operation 201863 "getReadabilityGates"
	package explicit_return_type "Collection<IGate>"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the collection of gates determining the readability state of this
property.

@return the collection of gates determining the readability state of this
        property.
"
      end

      operation 201991 "getWritabilityGates"
	package explicit_return_type "Collection<IGate>"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the collection of gates determining the writability state of this
property.

@return the collection of gates determining the writability state of this
        property.
"
      end

      operation 202119 "isReadOnly"
	package explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets wether this view is read-only.

@return true if the view is read-only.
"
      end
    end

    class 148359 "ICardViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This public interface is implemented by \"Card\" view descriptors. A typical
implementation of the described view could be a swing JPanel using a card
layout.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 154375 // <generalisation>
	relation 154375 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 154375 // <generalisation>
	  b parent class_ref 146439 // IViewDescriptor
      end

      attribute 144135 "DEFAULT_CARD"
	package explicit_type "String"
	init_value "=  \"DEFAULT_CARD\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	idl_decl ""
	comment "
<code>DEFAULT_CARD</code>.

"
      end

      attribute 144263 "SECURITY_CARD"
	package explicit_type "String"
	init_value "=  \"SECURITY_CARD\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	idl_decl ""
	comment "
<code>SECURITY_CARD</code>.

"
      end

      operation 203527 "getCardNameForModel"
	package explicit_return_type "String"
	nparams 1
	  param inout name "model" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the card name to use to present the model.

@param model
           the model to back the view.
@return the card name to look up the view.
"
      end

      operation 203655 "getCardViewDescriptors"
	package return_type class_ref 146439 // IViewDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}Map<String, ${type}> ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the children views registered in the card view and indexed by their
card names.

@return the children view descriptors.
"
      end
    end

    class 148487 "ICollectionViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This public interface is implemented by any collection view descriptor. For
example, a collection view is a table view, a list view, ...
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 154503 // <generalisation>
	relation 154503 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 154503 // <generalisation>
	  b parent class_ref 146439 // IViewDescriptor
      end
    end

    class 148615 "IComponentViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This public interface is implemented by view descriptors which are used to
display a model in a formular way. A form view will typically display a
subset of a bean simple properties. For instance, this might be implemented
by a swing JPanel containing a set of arranged label/widget pairs.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 154631 // <generalisation>
	relation 154631 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 154631 // <generalisation>
	  b parent class_ref 146439 // IViewDescriptor
      end

      attribute 144391 "ABOVE"
	package explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	idl_decl ""
	comment "
<code>ABOVE</code> location constant.

"
      end

      attribute 144519 "ASIDE"
	package explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	idl_decl ""
	comment "
<code>ASIDE</code> location constant.

"
      end

      operation 203783 "getColumnCount"
	package explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the number of properties displayed in a row. This is actually a
maximum value since a property might span multiple columns.

@return the number of properties displayed in a row of this view.
"
      end

      operation 203911 "getLabelsPosition"
	package explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the position of the labels naming the displayed properties.

@return the relative position of the labels (<code>ABOVE</code> or
        <code>ASIDE</code>).
"
      end

      operation 204039 "getPropertyViewDescriptors"
	package return_type class_ref 148103 // ISubViewDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the property view descriptors.

@return the property view descriptors.
"
      end

      operation 204167 "getPropertyWidth"
	package explicit_return_type "int"
	nparams 1
	  param in name "propertyName" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the number of columns a property spans when displayed.

@param propertyName
           the name of the property.
@return the spanned column count.
"
      end

      operation 204295 "getRenderedChildProperties"
	package explicit_return_type "List<String>"
	nparams 1
	  param in name "propertyName" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the child properties to display in case of a complex property.

@param propertyName
           the name of the property.
@return The list of displayed properties in the case of a complex property.
"
      end
    end

    class 148743 "ICompositeTreeLevelDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This interface is implemented by descriptors of composite tree levels.
composite tree levels are tree levels where children are organised into sub
groups.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 154759 // <generalisation>
	relation 154759 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 154759 // <generalisation>
	  b parent class_ref 148871 // ITreeLevelDescriptor
      end

      operation 204551 "getChildDescriptor"
	package return_type class_ref 148871 // ITreeLevelDescriptor
	nparams 1
	  param in name "name" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the subtree descriptor from its name.

@param name
           the name of the child tree level descriptor.
@return the subtree descriptor.
"
      end

      operation 204679 "getChildrenDescriptors"
	package return_type class_ref 148871 // ITreeLevelDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the subtree descriptors.

@return the subtree descriptors.
"
      end
    end

    class 148871 "ITreeLevelDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This interface is implemented by descriptors of a subtree.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      operation 204423 "getNodeGroupDescriptor"
	package return_type class_ref 148999 // IListViewDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the list descriptor describing the collection of nodes composing the
tree level this subtree starts at.

@return the list view descriptor describing the node collection this
        subtree is headed by.
"
      end
    end

    class 148999 "IListViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This public interface is implemented by list view descriptors. The described
view will typically be implemented by a swing JList representing a collection
of java beans described by one of their property.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 155399 // <generalisation>
	relation 155399 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 155399 // <generalisation>
	  b parent class_ref 148487 // ICollectionViewDescriptor
      end

      operation 205319 "getRenderedProperty"
	package explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the name of the underlying model propertiy which is made visible by
the list.

@return the name of the underlying model rendered property.
"
      end
    end

    class 149127 "IConstrainedGridViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
A grid view descriptor which organises its components in constrained cells.
This kind of described container view might typically be implemented by a
swing JPanel with a GridBagLayout.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 155015 // <generalisation>
	relation 155015 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 155015 // <generalisation>
	  b parent class_ref 149255 // IGridViewDescriptor
      end

      operation 204935 "getViewConstraints"
	package return_type class_ref 149383 // ViewConstraints
	nparams 1
	  param inout name "viewDescriptor" type class_ref 146439 // IViewDescriptor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the constraint applied to a contained view descriptor.

@param viewDescriptor
           the contained view descriptor.
@return the constraints applied to the contained view or null if none.
"
      end
    end

    class 149255 "IGridViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This public interface is implemented by any composite view descriptor
organizing their contained descriptors in a grid way.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 154887 // <generalisation>
	relation 154887 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 154887 // <generalisation>
	  b parent class_ref 147975 // ICompositeViewDescriptor
      end

      operation 204807 "getChildViewDescriptors"
	package return_type class_ref 146439 // IViewDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the list of view descriptors contained in this grid composite view.

@return the list of contained view descriptors.
"
      end
    end

    class 149383 "ViewConstraints"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
Simple holder of view constraints.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      attribute 145159 "column"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	idl_decl ""
      end

      attribute 145287 "height"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	idl_decl ""
      end

      attribute 145415 "heightResizable"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	idl_decl ""
      end

      attribute 145543 "row"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	idl_decl ""
      end

      attribute 145671 "width"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	idl_decl ""
      end

      attribute 145799 "widthResizable"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	idl_decl ""
      end

      operation 207239 "ViewConstraints"
	public explicit_return_type ""
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Constructs a new <code>ViewConstraints</code> instance.
"
      end

      operation 207367 "ViewConstraints"
	public explicit_return_type ""
	nparams 6
	  param in name "row" explicit_type "int"
	  param in name "column" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param inout name "widthResizable" explicit_type "boolean"
	  param inout name "heightResizable" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Constructs a new <code>ViewConstraints</code> instance.

@param row
           the row.
@param column
           the column.
@param width
           the width.
@param height
           the height.
@param widthResizable
           is resizable in width ?
@param heightResizable
           is resizable in height ?
"
      end

      operation 207495 "getColumn"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the column.

@return the column.
"
      end

      operation 207623 "getHeight"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the height.

@return the height.
"
      end

      operation 207751 "getRow"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the row.

@return the row.
"
      end

      operation 207879 "getWidth"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the width.

@return the width.
"
      end

      operation 208007 "isHeightResizable"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the heightResizable.

@return the heightResizable.
"
      end

      operation 208135 "isWidthResizable"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the widthResizable.

@return the widthResizable.
"
      end

      operation 208263 "setColumn"
	public explicit_return_type "void"
	nparams 1
	  param in name "column" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Sets the column.

@param column
           the column to set.
"
      end

      operation 208391 "setHeight"
	public explicit_return_type "void"
	nparams 1
	  param in name "height" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Sets the height.

@param height
           the height to set.
"
      end

      operation 208519 "setHeightResizable"
	public explicit_return_type "void"
	nparams 1
	  param inout name "heightResizable" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Sets the heightResizable.

@param heightResizable
           the heightResizable to set.
"
      end

      operation 208647 "setRow"
	public explicit_return_type "void"
	nparams 1
	  param in name "row" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Sets the row.

@param row
           the row to set.
"
      end

      operation 208775 "setWidth"
	public explicit_return_type "void"
	nparams 1
	  param in name "width" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Sets the width.

@param width
           the width to set.
"
      end

      operation 208903 "setWidthResizable"
	public explicit_return_type "void"
	nparams 1
	  param inout name "widthResizable" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Sets the widthResizable.

@param widthResizable
           the widthResizable to set.
"
      end
    end

    class 149511 "IEvenGridViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
A grid view descriptor which organises its contained views in fixed-sized
cells. This kind of described container view might typically be implemented
by a swing JPanel with a GridLayout.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 155143 // <generalisation>
	relation 155143 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 155143 // <generalisation>
	  b parent class_ref 149255 // IGridViewDescriptor
      end

      attribute 144647 "COLUMN"
	package explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	idl_decl ""
	comment "
<code>COLUMN</code> dimension constant.

"
      end

      attribute 144775 "ROW"
	package explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	idl_decl ""
	comment "
<code>ROW</code> dimension constant.

"
      end

      operation 205063 "getDrivingDimension"
	package explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the dimension identifier driving the distribution of the contained
components. If <code>LINE</code>, the grid has an unlimited number of
lines but lines have a maximum number of cells. If <code>COLUMN</code>,
the grid has an unlimited number of columns but columns have a maximum
number of cells.

@return the driving dimension constant.
"
      end

      operation 205191 "getDrivingDimensionCellCount"
	package explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the number of cells contained in a line of the driving dimension. This
is actually a maximum value since a sub view descriptor might span multiple
cells.

@return the number of sub view descriptors displayed in a row of this view
        or 0 if unlimited means that rows are driving the distribution.
"
      end
    end

    class 149639 "IImageViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This public interface is implemented by view descriptors which are just
presenting an image based on its binary representation.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 155271 // <generalisation>
	relation 155271 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 155271 // <generalisation>
	  b parent class_ref 146439 // IViewDescriptor
      end
    end

    class 149767 "ILovViewDescriptorFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
Factory for list-of-value views.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      operation 205447 "createLovViewDescriptor"
	package return_type class_ref 146439 // IViewDescriptor
	nparams 1
	  param inout name "entityRefDescriptor" type class_ref 132871 // IReferencePropertyDescriptor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Creates a new lov view descriptor for a component descriptor.

@param entityRefDescriptor
           the entity reference descriptor.
@return the created view descriptor.
"
      end
    end

    class 149895 "INestingViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This public interface is implemented by container view descriptors which are
just nesting a child view. This type of view is useful to build nested
property views.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 155527 // <generalisation>
	relation 155527 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 155527 // <generalisation>
	  b parent class_ref 146439 // IViewDescriptor
      end

      operation 205575 "getNestedViewDescriptor"
	package return_type class_ref 146439 // IViewDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the nested contained view descriptor.

@return the nested contained view descriptor.
"
      end
    end

    class 150023 "IPropertyViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This public interface is implemented by view descriptors which are just
presenting a property.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 155655 // <generalisation>
	relation 155655 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 155655 // <generalisation>
	  b parent class_ref 146439 // IViewDescriptor
      end

      operation 205703 "getRenderedChildProperties"
	package explicit_return_type "List<String>"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the child properties to display in case of a complex property.

@return The list of displayed properties in the case of a complex property.
"
      end
    end

    class 150151 "ISimpleTreeLevelDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This interface is implemented by descriptors of simpl tree levels. Simple
tree levels are tree levels where children are organised into a single group.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 155783 // <generalisation>
	relation 155783 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 155783 // <generalisation>
	  b parent class_ref 148871 // ITreeLevelDescriptor
      end

      operation 205831 "getChildDescriptor"
	package return_type class_ref 148871 // ITreeLevelDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the subtree descriptor.

@return the subtree descriptor.
"
      end
    end

    class 150279 "ISplitViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This public interface is implemented by a composite view descriptor which
organizes 2 view descriptors in a splitted manner. The described view can
typically be implemented using a swing JSplitPane.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 155911 // <generalisation>
	relation 155911 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 155911 // <generalisation>
	  b parent class_ref 147975 // ICompositeViewDescriptor
      end

      attribute 144903 "HORIZONTAL"
	package explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	idl_decl ""
	comment "
<code>HORIZONTAL</code> location constant.

"
      end

      attribute 145031 "VERTICAL"
	package explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	idl_decl ""
	comment "
<code>VERTICAL</code> location constant.

"
      end

      operation 205959 "getLeftTopViewDescriptor"
	package return_type class_ref 146439 // IViewDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the left / top sub view descriptor of this split composite view
descriptor.

@return the left / top sub view descriptor.
"
      end

      operation 206087 "getOrientation"
	package explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the orientation of the split described view.

@return the split orientation. The admissible values are :
        <li>VERTICAL
        <li>HORIZONTAL
"
      end

      operation 206215 "getRightBottomViewDescriptor"
	package return_type class_ref 146439 // IViewDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the right / bottom sub view descriptor of this split composite view
descriptor.

@return the right / bottom sub view descriptor.
"
      end
    end

    class 150407 "ITableViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This public interface is implemented by tabular view descriptors. For
instance, the described view can be a swing JTable presenting a collection of
java beans.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 156039 // <generalisation>
	relation 156039 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 156039 // <generalisation>
	  b parent class_ref 148487 // ICollectionViewDescriptor
      end

      operation 206343 "getColumnViewDescriptors"
	package return_type class_ref 148103 // ISubViewDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the column view descriptors.

@return the column view descriptors.
"
      end
    end

    class 150535 "ITabViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This public interface is implemented by \"Tab\" view descriptors. A typical
implementation of the described view could be a swing JTabPane.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 156167 // <generalisation>
	relation 156167 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 156167 // <generalisation>
	  b parent class_ref 147975 // ICompositeViewDescriptor
      end

      operation 206471 "getChildViewDescriptors"
	package return_type class_ref 146439 // IViewDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the list of view descriptors contained in this tab composite view.
Each sub view descriptor should be then presented using its name.

@return the list of contained view descriptors.
"
      end
    end

    class 150663 "ITreeViewDescriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This public interface is implemented by any tree view descriptor.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      classrelation 156295 // <generalisation>
	relation 156295 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 156295 // <generalisation>
	  b parent class_ref 146439 // IViewDescriptor
      end

      operation 206599 "getIconImageURLForUserObject"
	package explicit_return_type "String"
	nparams 1
	  param inout name "userObject" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Given a user object, this method qives the ability to the tree view
descriptor to return the url of an image used to render the user object.
This method may return null.

@param userObject
           the user object to render.
@return the url of the image to use for the renderer or null.
"
      end

      operation 206727 "getMaxDepth"
	package explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
It gets the maximum depth of the tree structure whichis mandatory in case
of a recursive one.

@return the maximum tree structure depth.
"
      end

      operation 206855 "getRootSubtreeDescriptor"
	package return_type class_ref 148871 // ITreeLevelDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
Gets the root tree level descriptor of this tree view.

@return the root tree level descriptor of this tree view.
"
      end
    end

    class 150791 "TreeDescriptorHelper"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
This is a helper class for tree descriptor management.
<p>
Copyright 2005 Design2See. All rights reserved.
<p>

@version $LastChangedRevision: 843 $
@author Vincent Vandenschrick
"
      operation 206983 "TreeDescriptorHelper"
	private explicit_return_type ""
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
      end

      operation 207111 "getSubtreeDescriptorFromPath"
	class_operation public return_type class_ref 148871 // ITreeLevelDescriptor
	nparams 2
	  param inout name "treeLevelDescriptor" type class_ref 148871 // ITreeLevelDescriptor
	  param inout name "treePath" explicit_type "List<String>"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
${body}}
"
	
	
	comment "
From a tree path of descriptor names, it retrieves the list descriptor of
the node collection.

@param treeLevelDescriptor
           the tree level descriptor to start from.
@param treePath
           a tree path of descriptor names.
@return the node group list descriptor.
"
      end
    end
  end

  deploymentview 131847 "descriptor"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default
    artifact 145543 "ISubViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Collection;
import com.d2s.framework.model.descriptor.IModelDescriptor;
import com.d2s.framework.util.descriptor.IIconDescriptor;
import com.d2s.framework.util.gate.IGate;
${definition}"
      associated_classes
	class_ref 148103 // ISubViewDescriptor
      end
    end

    artifact 145671 "IViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Color;
import java.awt.Font;
import com.d2s.framework.security.ISecurable;
import com.d2s.framework.view.action.IActionable;
${definition}"
      associated_classes
	class_ref 146439 // IViewDescriptor
      end
    end

    artifact 145799 "ICompositeViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 147975 // ICompositeViewDescriptor
      end
    end

    artifact 145927 "IBorderViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 147847 // IBorderViewDescriptor
      end
    end

    artifact 146055 "ICardViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
${definition}"
      associated_classes
	class_ref 148359 // ICardViewDescriptor
      end
    end

    artifact 146183 "ICollectionViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 148487 // ICollectionViewDescriptor
      end
    end

    artifact 146311 "IComponentViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_classes
	class_ref 148615 // IComponentViewDescriptor
      end
    end

    artifact 146439 "ITreeLevelDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 148871 // ITreeLevelDescriptor
      end
    end

    artifact 146567 "ICompositeTreeLevelDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_classes
	class_ref 148743 // ICompositeTreeLevelDescriptor
      end
    end

    artifact 146695 "IGridViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_classes
	class_ref 149255 // IGridViewDescriptor
      end
    end

    artifact 146823 "IConstrainedGridViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 149127 // IConstrainedGridViewDescriptor
      end
    end

    artifact 146951 "IEvenGridViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 149511 // IEvenGridViewDescriptor
      end
    end

    artifact 147079 "IImageViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 149639 // IImageViewDescriptor
      end
    end

    artifact 147207 "IListViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 148999 // IListViewDescriptor
      end
    end

    artifact 147335 "ILovViewDescriptorFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.d2s.framework.model.descriptor.IReferencePropertyDescriptor;
${definition}"
      associated_classes
	class_ref 149767 // ILovViewDescriptorFactory
      end
    end

    artifact 147463 "INestingViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 149895 // INestingViewDescriptor
      end
    end

    artifact 147591 "IPropertyViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_classes
	class_ref 150023 // IPropertyViewDescriptor
      end
    end

    artifact 147719 "ISimpleTreeLevelDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 150151 // ISimpleTreeLevelDescriptor
      end
    end

    artifact 147847 "ISplitViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 150279 // ISplitViewDescriptor
      end
    end

    artifact 147975 "ITableViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_classes
	class_ref 150407 // ITableViewDescriptor
      end
    end

    artifact 148103 "ITabViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_classes
	class_ref 150535 // ITabViewDescriptor
      end
    end

    artifact 148231 "ITreeViewDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 150663 // ITreeViewDescriptor
      end
    end

    artifact 148359 "TreeDescriptorHelper"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_classes
	class_ref 150791 // TreeDescriptorHelper
      end
    end

    artifact 148487 "ViewConstraints"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 149383 // ViewConstraints
      end
    end
  end

  package_ref 132743 // basic
end
