class BasicDelegatingComponentInvocationHandler
!!!140807.java!!!	BasicDelegatingComponentInvocationHandler(inout delegate : Object, inout componentFactory : IComponentFactory, inout componentDescriptor : IComponentDescriptor, inout collectionFactory : IComponentCollectionFactory, inout accessorFactory : IAccessorFactory, inout extensionFactory : IComponentExtensionFactory)

    super(componentDescriptor, componentFactory, collectionFactory, accessorFactory,
        extensionFactory);
    this.delegate = delegate;
    this.componentFactory = componentFactory;
!!!140935.java!!!	computeEquals(inout proxy : IComponent, inout another : Object) : boolean

    if (proxy == another) {
      return true;
    }
    if (another instanceof IComponent) {
      if (Proxy.isProxyClass(another.getClass())
          && Proxy.getInvocationHandler(another) instanceof BasicEntityInvocationHandler) {
        BasicDelegatingComponentInvocationHandler otherInvocationHandler = (BasicDelegatingComponentInvocationHandler) Proxy
            .getInvocationHandler(another);
        return delegate.equals(otherInvocationHandler.delegate);
      }
      return delegate.equals(another);
    }
    return false;
!!!141063.java!!!	computeHashCode() : int

    return delegate.hashCode();
!!!141191.java!!!	decorateReferent(inout referent : IComponent, inout referentDescriptor : IComponentDescriptor) : IComponent

    if (Proxy.isProxyClass(referent.getClass())
        && Proxy.getInvocationHandler(referent) instanceof AbstractComponentInvocationHandler) {
      return referent;
    }
    return componentFactory.createComponentInstance(referentDescriptor
        .getComponentContract(), delegate);
!!!141319.java!!!	invokeServiceMethod(inout proxy : Object, inout method : Method, inout args : Object) : Object

    try {
      return super.invokeServiceMethod(proxy, method, args);
    } catch (NoSuchMethodException ex) {
      try {
        return delegate.getClass().getMethod(method.getName(),
            method.getParameterTypes()).invoke(delegate, args);
      } catch (IllegalArgumentException ex1) {
        throw new ComponentException(method.toString()
            + " is not supported on the component " + getComponentContract());
      } catch (IllegalAccessException ex1) {
        throw new ComponentException(method.toString()
            + " is not supported on the component " + getComponentContract());
      } catch (InvocationTargetException ex1) {
        throw new ComponentException(method.toString()
            + " is not supported on the component " + getComponentContract());
      }
    }
!!!141447.java!!!	retrievePropertyValue(in propertyName : String) : Object

    try {
      return getAccessorFactory().createPropertyAccessor(propertyName,
          getComponentContract()).getValue(delegate);
    } catch (IllegalAccessException ex) {
      throw new ComponentException(ex);
    } catch (InvocationTargetException ex) {
      throw new ComponentException(ex);
    } catch (NoSuchMethodException ex) {
      throw new ComponentException(ex);
    }
!!!141575.java!!!	storeProperty(in propertyName : String, inout propertyValue : Object) : void

    try {
      getAccessorFactory().createPropertyAccessor(propertyName,
          getComponentContract()).setValue(delegate, propertyValue);
    } catch (IllegalAccessException ex) {
      throw new ComponentException(ex);
    } catch (InvocationTargetException ex) {
      throw new ComponentException(ex);
    } catch (NoSuchMethodException ex) {
      throw new ComponentException(ex);
    }
