class BasicComponentDescriptor
!!!163207.java!!!	BasicComponentDescriptor()

    this(null);
!!!163335.java!!!	BasicComponentDescriptor(in name : String)

    setName(name);
    this.computed = false;
    this.purelyAbstract = true;
!!!163463.java!!!	getAncestorDescriptors() : IComponentDescriptor

    return ancestorDescriptors;
!!!163591.java!!!	getComponentContract() : Class<? extends E>

    if (componentContract == null && getName() != null) {
      try {
        componentContract = Class.forName(getName());
      } catch (ClassNotFoundException ex) {
        throw new NestedRuntimeException(ex);
      }
    }
    return (Class<? extends E>) componentContract;
!!!163719.java!!!	getComponentDescriptor() : IComponentDescriptor

    return this;
!!!163847.java!!!	getDeclaredPropertyDescriptors() : IPropertyDescriptor

    processPropertiesBufferIfNecessary();
    if (propertyDescriptors != null) {
      return propertyDescriptors.values();
    }
    return null;
!!!163975.java!!!	getLifecycleInterceptors() : ILifecycleInterceptor

    List<ILifecycleInterceptor<?>> allInterceptors = new ArrayList<ILifecycleInterceptor<?>>();
    if (getAncestorDescriptors() != null) {
      for (IComponentDescriptor<?> ancestorDescriptor : getAncestorDescriptors()) {
        allInterceptors.addAll(ancestorDescriptor.getLifecycleInterceptors());
      }
    }
    if (lifecycleInterceptors != null) {
      allInterceptors.addAll(lifecycleInterceptors);
    }
    return allInterceptors;
!!!164103.java!!!	getModelType() : Class<?>

    return getComponentContract();
!!!164231.java!!!	getOrderingProperties() : List<String>

    // use a set to avoid duplicates.
    Set<String> properties = new LinkedHashSet<String>();
    if (orderingProperties != null) {
      properties.addAll(orderingProperties);
    }
    if (ancestorDescriptors != null) {
      for (IComponentDescriptor<?> ancestorDescriptor : ancestorDescriptors) {
        if (ancestorDescriptor.getOrderingProperties() != null) {
          properties.addAll(ancestorDescriptor.getOrderingProperties());
        }
      }
    }
    if (properties.isEmpty()) {
      return null;
    }
    return new ArrayList<String>(properties);
!!!164359.java!!!	getPropertyDescriptor(in propertyName : String) : IPropertyDescriptor

    IPropertyDescriptor descriptor = null;
    int nestedDotIndex = propertyName.indexOf('.');
    if (nestedDotIndex > 0) {
      if (nestedPropertyDescriptors == null) {
        nestedPropertyDescriptors = new HashMap<String, IPropertyDescriptor>();
      }
      descriptor = nestedPropertyDescriptors.get(propertyName);
      if (descriptor == null) {
        IComponentDescriptor<?> componentDescriptor = ((IComponentDescriptorProvider<?>) getPropertyDescriptor(propertyName
            .substring(0, nestedDotIndex))).getComponentDescriptor();
        descriptor = componentDescriptor.getPropertyDescriptor(
            propertyName.substring(nestedDotIndex + 1)).clone();
        if (descriptor instanceof BasicPropertyDescriptor) {
          ((BasicPropertyDescriptor) descriptor).setName(propertyName);
        }
        nestedPropertyDescriptors.put(propertyName, descriptor);
      }
    } else {
      descriptor = getDeclaredPropertyDescriptor(propertyName);
      if (descriptor == null && ancestorDescriptors != null) {
        for (Iterator<IComponentDescriptor<?>> ite = ancestorDescriptors
            .iterator(); descriptor == null && ite.hasNext();) {
          IComponentDescriptor<?> ancestorDescriptor = ite.next();
          descriptor = ancestorDescriptor.getPropertyDescriptor(propertyName);
        }
      }
    }
    return descriptor;
!!!164487.java!!!	getPropertyDescriptors() : IPropertyDescriptor

    // A map is used instead of a set since a set does not replace an element it
    // already contains.
    Map<String, IPropertyDescriptor> allDescriptors = new LinkedHashMap<String, IPropertyDescriptor>();
    if (ancestorDescriptors != null) {
      for (IComponentDescriptor<?> ancestorDescriptor : ancestorDescriptors) {
        for (IPropertyDescriptor propertyDescriptor : ancestorDescriptor
            .getPropertyDescriptors()) {
          allDescriptors.put(propertyDescriptor.getName(), propertyDescriptor);
        }
      }
    }
    Collection<IPropertyDescriptor> declaredPropertyDescriptors = getDeclaredPropertyDescriptors();
    if (declaredPropertyDescriptors != null) {
      for (IPropertyDescriptor propertyDescriptor : declaredPropertyDescriptors) {
        allDescriptors.put(propertyDescriptor.getName(), propertyDescriptor);
      }
    }
    return allDescriptors.values();
!!!164615.java!!!	getQueryableProperties() : List<String>

    if (queryableProperties == null) {
      return getRenderedProperties();
    }
    return queryableProperties;
!!!164743.java!!!	getRenderedProperties() : List<String>

    if (renderedProperties == null) {
      List<String> allProperties = new ArrayList<String>();
      for (IPropertyDescriptor propertyDescriptor : getPropertyDescriptors()) {
        if ((propertyDescriptor instanceof IReferencePropertyDescriptor<?> && !IEntity.class
            .isAssignableFrom(((IReferencePropertyDescriptor<?>) propertyDescriptor)
                .getReferencedDescriptor().getComponentContract()))) {
          for (String nestedRenderedProperty : ((IReferencePropertyDescriptor<?>) propertyDescriptor)
              .getReferencedDescriptor().getRenderedProperties()) {
            allProperties.add(propertyDescriptor.getName() + "."
                + nestedRenderedProperty);
          }
        } else if (!(propertyDescriptor instanceof ICollectionPropertyDescriptor)
            && !(propertyDescriptor instanceof ITextPropertyDescriptor)) {
          allProperties.add(propertyDescriptor.getName());
        }
      }
      return allProperties;
    }
    return new ArrayList<String>(renderedProperties);
!!!164871.java!!!	getServiceContracts() : Collection<Class<?>>

    if (serviceContracts != null) {
      return new ArrayList<Class<?>>(serviceContracts);
    }
    return null;
!!!164999.java!!!	getServiceDelegate(inout targetMethod : Method) : IComponentService

    IComponentService service = null;
    if (serviceDelegates != null) {
      service = serviceDelegates.get(targetMethod);
    }
    if (service == null && ancestorDescriptors != null) {
      for (Iterator<IComponentDescriptor<?>> ite = ancestorDescriptors
          .iterator(); service == null && ite.hasNext();) {
        IComponentDescriptor<?> ancestorDescriptor = ite.next();
        service = ancestorDescriptor.getServiceDelegate(targetMethod);
      }
    }
    return service;
!!!165127.java!!!	getToStringProperty() : String

    if (toStringProperty == null) {
      for (String renderedProperty : getRenderedProperties()) {
        if (getPropertyDescriptor(renderedProperty) instanceof IStringPropertyDescriptor) {
          toStringProperty = renderedProperty;
          break;
        }
      }
      if (toStringProperty == null) {
        toStringProperty = getRenderedProperties().get(0);
      }
    }
    return toStringProperty;
!!!165255.java!!!	getUnclonedProperties() : Collection<String>

    Set<String> properties = new HashSet<String>();
    if (unclonedProperties != null) {
      properties.addAll(unclonedProperties);
    }
    if (ancestorDescriptors != null) {
      for (IComponentDescriptor<?> ancestorDescriptor : ancestorDescriptors) {
        properties.addAll(ancestorDescriptor.getUnclonedProperties());
      }
    }
    return properties;
!!!165383.java!!!	isComputed() : boolean

    return computed;
!!!165511.java!!!	isEntity() : boolean

    return false;
!!!165639.java!!!	isPurelyAbstract() : boolean

    return purelyAbstract;
!!!165767.java!!!	setPurelyAbstract(inout purelyAbstract : boolean) : void

    this.purelyAbstract = purelyAbstract;
!!!165895.java!!!	setAncestorDescriptors(inout ancestorDescriptors : List<IComponentDescriptor<?>>) : void

    this.ancestorDescriptors = ancestorDescriptors;
!!!166023.java!!!	setComputed(inout computed : boolean) : void

    this.computed = computed;
!!!166151.java!!!	setLifecycleInterceptors(inout lifecycleInterceptors : List<ILifecycleInterceptor<?>>) : void

    this.lifecycleInterceptors = lifecycleInterceptors;
!!!166279.java!!!	setOrderingProperties(inout orderingProperties : List<String>) : void

    this.orderingProperties = orderingProperties;
!!!166407.java!!!	setPropertyDescriptors(inout descriptors : Collection<IPropertyDescriptor>) : void

    // This is important to use an intermediate structure since all descriptors
    // may not have their names fully initialized.
    if (descriptors != null) {
      tempPropertyBuffer = new ArrayList<IPropertyDescriptor>(descriptors);
      propertyDescriptors = null;
    } else {
      tempPropertyBuffer = null;
      propertyDescriptors = null;
    }
!!!166535.java!!!	setQueryableProperties(inout queryableProperties : List<String>) : void

    this.queryableProperties = queryableProperties;
!!!166663.java!!!	setRenderedProperties(inout renderedProperties : List<String>) : void

    this.renderedProperties = renderedProperties;
!!!166791.java!!!	setServiceDelegates(inout servicesByServiceContracts : Map<String, IComponentService>) : void

    for (Entry<String, IComponentService> nextPair : servicesByServiceContracts
        .entrySet()) {
      registerService(Class.forName(nextPair.getKey()), nextPair.getValue());
    }
!!!166919.java!!!	setToStringProperty(in toStringProperty : String) : void

    this.toStringProperty = toStringProperty;
!!!167047.java!!!	setUnclonedProperties(inout unclonedProperties : Collection<String>) : void

    this.unclonedProperties = unclonedProperties;
!!!167175.java!!!	getDeclaredPropertyDescriptor(in propertyName : String) : IPropertyDescriptor

    processPropertiesBufferIfNecessary();
    if (propertyDescriptors != null) {
      return propertyDescriptors.get(propertyName);
    }
    return null;
!!!167303.java!!!	processPropertiesBufferIfNecessary() : void

    if (tempPropertyBuffer != null) {
      propertyDescriptors = new LinkedHashMap<String, IPropertyDescriptor>();
      for (IPropertyDescriptor descriptor : tempPropertyBuffer) {
        propertyDescriptors.put(descriptor.getName(), descriptor);
      }
      tempPropertyBuffer = null;
    }
!!!167431.java!!!	registerService(inout serviceContract : Class<?>, inout service : IComponentService) : void

    if (serviceDelegates == null) {
      serviceDelegates = new HashMap<Method, IComponentService>();
      serviceContracts = new HashSet<Class<?>>();
    }
    serviceContracts.add(serviceContract);
    Method[] contractServices = serviceContract.getMethods();
    for (Method serviceMethod : contractServices) {
      serviceDelegates.put(serviceMethod, service);
    }
