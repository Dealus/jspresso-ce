class BasicStringPropertyDescriptor
!!!172167.java!!!	checkValueIntegrity(in component : Object, inout propertyValue : Object) : void

    super.checkValueIntegrity(component, propertyValue);
    final String propertyValueAsString = getValueAsString(propertyValue);
    if (propertyValueAsString != null && getMaxLength() != null
        && propertyValueAsString.length() > getMaxLength().intValue()) {
      IntegrityException ie = new IntegrityException("[" + getName()
          + "] value (" + propertyValueAsString + ") is too long on ["
          + component + "].") {

        private static final long serialVersionUID = 7459823123892198831L;

        @Override
        public String getI18nMessage(ITranslationProvider translationProvider,
            Locale locale) {
          StringBuffer boundsSpec = new StringBuffer("l");
          if (getMaxLength() != null) {
            boundsSpec.append(" &lt= ").append(getMaxLength());
          }
          return translationProvider.getTranslation(
              "integrity.property.toolong", new Object[] {
                  getI18nName(translationProvider, locale), boundsSpec,
                  component}, locale);
        }

      };
      throw ie;
    }
    if (propertyValueAsString != null && getRegexpPattern() != null
        && !Pattern.matches(getRegexpPattern(), propertyValueAsString)) {
      IntegrityException ie = new IntegrityException("[" + getName()
          + "] value (" + propertyValueAsString + ") does not match pattern ["
          + getRegexpPattern() + "] on [" + component + "].") {

        private static final long serialVersionUID = 7459823123892198831L;

        @Override
        public String getI18nMessage(ITranslationProvider translationProvider,
            Locale locale) {
          return translationProvider.getTranslation(
              "integrity.property.pattern", new Object[] {
                  getI18nName(translationProvider, locale),
                  getRegexpPatternSample(), component}, locale);
        }

      };
      throw ie;
    }
!!!172295.java!!!	getMaxLength() : Integer

    if (maxLength != null) {
      return maxLength;
    }
    if (getParentDescriptor() != null) {
      return ((IStringPropertyDescriptor) getParentDescriptor()).getMaxLength();
    }
    return maxLength;
!!!172423.java!!!	getModelType() : Class<?>

    return String.class;
!!!172551.java!!!	getRegexpPattern() : String

    if (regexpPattern != null) {
      return regexpPattern;
    }
    if (getParentDescriptor() != null) {
      return ((IStringPropertyDescriptor) getParentDescriptor())
          .getRegexpPattern();
    }
    return regexpPattern;
!!!172679.java!!!	getRegexpPatternSample() : String

    if (regexpPatternSample != null) {
      return regexpPatternSample;
    }
    if (getParentDescriptor() != null) {
      return ((IStringPropertyDescriptor) getParentDescriptor())
          .getRegexpPatternSample();
    }
    return regexpPatternSample;
!!!172807.java!!!	setMaxLength(inout maxLength : Integer) : void

    this.maxLength = maxLength;
!!!172935.java!!!	setRegexpPattern(in regexpPattern : String) : void

    this.regexpPattern = regexpPattern;
!!!173063.java!!!	setRegexpPatternSample(in regexpPatternSample : String) : void

    this.regexpPatternSample = regexpPatternSample;
!!!173191.java!!!	getValueAsString(inout value : Object) : String

    return (String) value;
!!!173319.java!!!	clone() : BasicStringPropertyDescriptor

    BasicStringPropertyDescriptor clonedDescriptor = (BasicStringPropertyDescriptor) super
        .clone();

    return clonedDescriptor;
