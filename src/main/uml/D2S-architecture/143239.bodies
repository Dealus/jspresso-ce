class SmartEntityCloneFactory
!!!185223.java!!!	cloneEntity(inout entityToClone : E, inout entityFactory : IEntityFactory) : E

    E clonedEntity = (E) entityFactory.createEntityInstance(entityToClone
        .getContract());

    IComponentDescriptor componentDescriptor = entityFactory
        .getComponentDescriptor(entityToClone.getContract());

    Map<Object, ICollectionPropertyDescriptor> collRelToUpdate = new HashMap<Object, ICollectionPropertyDescriptor>();
    for (Map.Entry<String, Object> propertyEntry : entityToClone
        .straightGetProperties().entrySet()) {
      if (propertyEntry.getValue() != null
          && !(IEntity.ID.equals(propertyEntry.getKey())
              || IEntity.VERSION.equals(propertyEntry.getKey()) || componentDescriptor
              .getUnclonedProperties().contains(propertyEntry.getKey()))) {
        IPropertyDescriptor propertyDescriptor = componentDescriptor
            .getPropertyDescriptor(propertyEntry.getKey());
        if (propertyDescriptor instanceof IRelationshipEndPropertyDescriptor) {
          if (propertyEntry.getValue() instanceof IComponent
              && !(propertyEntry.getValue() instanceof IEntity)) {
            clonedEntity.straightSetProperty(propertyEntry.getKey(),
                cloneComponent((IComponent) propertyEntry.getValue(),
                    entityFactory));
          } else {
            IRelationshipEndPropertyDescriptor reverseDescriptor = ((IRelationshipEndPropertyDescriptor) propertyDescriptor)
                .getReverseRelationEnd();
            if (propertyDescriptor instanceof IReferencePropertyDescriptor) {
              if (!(reverseDescriptor instanceof IReferencePropertyDescriptor)) {
                clonedEntity.straightSetProperty(propertyEntry.getKey(),
                    propertyEntry.getValue());
                if (reverseDescriptor instanceof ICollectionPropertyDescriptor) {
                  if (isInitialized(propertyEntry.getValue())) {
                    collRelToUpdate.put(propertyEntry.getValue(),
                        (ICollectionPropertyDescriptor) reverseDescriptor);
                  }
                }
              }
            } else if (propertyDescriptor instanceof ICollectionPropertyDescriptor) {
              if (reverseDescriptor instanceof ICollectionPropertyDescriptor) {
                for (Object reverseCollectionElement : (Collection) propertyEntry
                    .getValue()) {
                  if (isInitialized(reverseCollectionElement)) {
                    collRelToUpdate.put(reverseCollectionElement,
                        (ICollectionPropertyDescriptor) reverseDescriptor);
                  }
                }
              }
            }
          }
        } else {
          clonedEntity.straightSetProperty(propertyEntry.getKey(),
              propertyEntry.getValue());
        }
      }
    }
    for (Map.Entry<Object, ICollectionPropertyDescriptor> collectionEntry : collRelToUpdate
        .entrySet()) {
      ICollectionPropertyDescriptor collectionDescriptor = collectionEntry
          .getValue();
      Class masterContract = null;
      if (collectionDescriptor.getReverseRelationEnd() instanceof IReferencePropertyDescriptor) {
        masterContract = ((IReferencePropertyDescriptor) collectionDescriptor
            .getReverseRelationEnd()).getReferencedDescriptor()
            .getComponentContract();
      } else if (collectionDescriptor.getReverseRelationEnd() instanceof ICollectionPropertyDescriptor) {
        masterContract = ((ICollectionPropertyDescriptor) collectionDescriptor
            .getReverseRelationEnd()).getReferencedDescriptor()
            .getElementDescriptor().getComponentContract();
      }
      ICollectionAccessor collectionAccessor = accessorFactory
          .createCollectionPropertyAccessor(collectionDescriptor.getName(),
              masterContract, clonedEntity.getContract());
      if (collectionAccessor instanceof IModelDescriptorAware) {
        ((IModelDescriptorAware) collectionAccessor)
            .setModelDescriptor(collectionDescriptor);
      }
      try {
        collectionAccessor.addToValue(collectionEntry.getKey(), clonedEntity);
      } catch (IllegalAccessException ex) {
        throw new EntityException(ex);
      } catch (InvocationTargetException ex) {
        throw new EntityException(ex);
      } catch (NoSuchMethodException ex) {
        throw new EntityException(ex);
      }
    }
    return clonedEntity;
!!!185351.java!!!	setAccessorFactory(inout accessorFactory : IAccessorFactory) : void

    this.accessorFactory = accessorFactory;
!!!185479.java!!!	isInitialized(inout objectOrProxy : Object) : boolean

    return true;
