class BasicEntityRegistry
!!!186631.java!!!	BasicEntityRegistry()

    backingStore = new HashMap<Class<? extends IEntity>, Map<Object, IEntity>>();
!!!186759.java!!!	get(inout entityContract : Class, inout id : Object) : IEntity

    IEntity registeredEntity = null;
    Map<Object, IEntity> contractStore = backingStore.get(entityContract);
    if (contractStore != null) {
      registeredEntity = contractStore.get(id);
      if (registeredEntity == null) {
        contractStore.remove(id);
      }
    }
    if (registeredEntity == null) {
      // we may try subclasses
      for (Map.Entry<Class<? extends IEntity>, Map<Object, IEntity>> subclassContractStore : backingStore
          .entrySet()) {
        if (entityContract.isAssignableFrom(subclassContractStore.getKey())) {
          contractStore = subclassContractStore.getValue();
          if (contractStore != null) {
            registeredEntity = contractStore.get(id);
            if (registeredEntity == null) {
              contractStore.remove(id);
            } else {
              break;
            }
          }
        }
      }
    }
    return registeredEntity;
!!!186887.java!!!	register(inout entity : IEntity) : void

    IEntity existingRegisteredEntity = get(entity.getContract(), entity.getId());
    if (existingRegisteredEntity != null) {
      if (entity != existingRegisteredEntity) {
        throw new EntityRegistryException(
            "This entity was previously registered with a different instance"
                + entity);
      }
      // do nothing since the entity is already registered.
    } else {
      Map<Object, IEntity> contractStore = backingStore.get(entity
          .getContract());
      if (contractStore == null) {
        contractStore = new ReferenceMap(AbstractReferenceMap.HARD,
            AbstractReferenceMap.WEAK, true);
        backingStore.put(entity.getContract(), contractStore);
      }
      contractStore.put(entity.getId(), entity);
    }
