class AbstractAddCollectionToMasterAction
!!!232711.java!!!	execute(inout actionHandler : IActionHandler, inout context : Map<String, Object>) : boolean

    ICollectionConnector collectionConnector = getModelConnector(context);
    if (collectionConnector == null) {
      return false;
    }

    List<?> newComponents = getAddedComponents(context);
    if (newComponents != null && newComponents.size() > 0) {
      Class newComponentContract = getModelDescriptor(context)
          .getCollectionDescriptor().getElementDescriptor()
          .getComponentContract();
      Object master = collectionConnector.getParentConnector()
          .getConnectorValue();
      ICollectionAccessor collectionAccessor = getAccessorFactory(master,
          context).createCollectionPropertyAccessor(
          collectionConnector.getId(),
          ((IModelValueConnector) collectionConnector).getModelProvider()
              .getModelDescriptor().getComponentDescriptor()
              .getComponentContract(), newComponentContract);
      if (collectionAccessor instanceof IModelDescriptorAware) {
        ((IModelDescriptorAware) collectionAccessor)
            .setModelDescriptor(getModelDescriptor(context));
      }
      try {
        int index = -1;
        if (collectionAccessor instanceof IListAccessor) {
          if (getSelectedIndices(context) != null
              && getSelectedIndices(context).length > 0) {
            index = getSelectedIndices(context)[getSelectedIndices(context).length - 1];
          }
        }
        for (int i = 0; i < newComponents.size(); i++) {
          if (index >= 0) {
            ((IListAccessor) collectionAccessor).addToValue(master, index + 1
                + i, newComponents.get(i));
          } else {
            collectionAccessor.addToValue(master, newComponents.get(i));
          }
        }
        if (!(master instanceof IPropertyChangeCapable)
            && collectionConnector instanceof ModelPropertyConnector) {
          ((ModelPropertyConnector) collectionConnector).propertyChange(null);
        }
      } catch (IllegalAccessException ex) {
        throw new ActionException(ex);
      } catch (InvocationTargetException ex) {
        throw new ActionException(ex);
      } catch (NoSuchMethodException ex) {
        throw new ActionException(ex);
      }
      context.put(ActionContextConstants.ACTION_PARAM, newComponents);
      context.put(ActionContextConstants.SELECTED_INDICES, ConnectorHelper
          .getIndicesOf(collectionConnector, newComponents));
    }
    return super.execute(actionHandler, context);
