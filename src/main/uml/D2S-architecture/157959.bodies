class RemoveCollectionFromMasterAction
!!!235143.java!!!	execute(inout actionHandler : IActionHandler, inout context : Map<String, Object>) : boolean

    ICollectionConnector collectionConnector = getModelConnector(context);
    if (collectionConnector == null) {
      return false;
    }
    int[] selectedIndices = getSelectedIndices(context);
    if (selectedIndices != null) {
      Class<?> newComponentContract = getModelDescriptor(context)
          .getCollectionDescriptor().getElementDescriptor()
          .getComponentContract();
      Object master = collectionConnector.getParentConnector()
          .getConnectorValue();
      ICollectionAccessor collectionAccessor = getAccessorFactory(master,
          context).createCollectionPropertyAccessor(
          collectionConnector.getId(),
          ((IModelValueConnector) collectionConnector).getModelProvider()
              .getModelDescriptor().getComponentDescriptor()
              .getComponentContract(), newComponentContract);
      if (collectionAccessor instanceof IModelDescriptorAware) {
        ((IModelDescriptorAware) collectionAccessor)
            .setModelDescriptor(getModelDescriptor(context));
      }
      // Traverse the collection reversly for performance reasons.
      for (int i = selectedIndices.length - 1; i >= 0; i--) {
        int selectedIndex = selectedIndices[i];
        Object nextDetailToRemove = collectionConnector.getChildConnector(
            selectedIndex).getConnectorValue();
        try {
          collectionAccessor.removeFromValue(master, nextDetailToRemove);
        } catch (IllegalAccessException ex) {
          throw new ActionException(ex);
        } catch (InvocationTargetException ex) {
          throw new ActionException(ex);
        } catch (NoSuchMethodException ex) {
          throw new ActionException(ex);
        }
      }
      if (!(master instanceof IPropertyChangeCapable)
          && collectionConnector instanceof ModelPropertyConnector) {
        ((ModelPropertyConnector) collectionConnector).propertyChange(null);
      }
    }
    return super.execute(actionHandler, context);
