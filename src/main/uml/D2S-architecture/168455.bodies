class DefaultUlcController
!!!288647.java!!!	callbackHandlingComplete() : void

    notifyWaiters();
!!!288775.java!!!	handleException(inout ex : Throwable, inout context : Map<String, Object>) : void

    ULCComponent sourceComponent = controllerFrame;
    if (ex instanceof SecurityException) {
      ULCAlert alert = new ULCAlert(UlcUtil.getVisibleWindow(sourceComponent),
          getTranslationProvider().getTranslation("error", getLocale()),
          HtmlHelper.emphasis(ex.getMessage()), getTranslationProvider()
              .getTranslation("ok", getLocale()), null, null, getIconFactory()
              .getErrorIcon(IIconFactory.LARGE_ICON_SIZE));
      alert.show();
    } else if (ex instanceof BusinessException) {
      ULCAlert alert = new ULCAlert(UlcUtil.getVisibleWindow(sourceComponent),
          getTranslationProvider().getTranslation("error", getLocale()),
          HtmlHelper.emphasis(((BusinessException) ex).getI18nMessage(
              getTranslationProvider(), getLocale())), getTranslationProvider()
              .getTranslation("ok", getLocale()), null, null, getIconFactory()
              .getErrorIcon(IIconFactory.LARGE_ICON_SIZE));
      alert.show();
    } else if (ex instanceof ConcurrencyFailureException) {
      ULCAlert alert = new ULCAlert(UlcUtil.getVisibleWindow(sourceComponent),
          getTranslationProvider().getTranslation("error", getLocale()),
          HtmlHelper.emphasis(getTranslationProvider().getTranslation(
              "concurrency.error.description", getLocale())),
          getTranslationProvider().getTranslation("ok", getLocale()), null,
          null, getIconFactory().getErrorIcon(IIconFactory.LARGE_ICON_SIZE));
      alert.show();
    } else {
      ex.printStackTrace();
      ULCErrorDialog dialog = ULCErrorDialog.createInstance(sourceComponent,
          getTranslationProvider(), getLocale());
      dialog.setMessageIcon(getIconFactory().getErrorIcon(
          IIconFactory.MEDIUM_ICON_SIZE));
      dialog.setTitle(getTranslationProvider().getTranslation("error",
          getLocale()));
      dialog.setMessage(HtmlHelper.emphasis(ex.getLocalizedMessage()));
      dialog.setDetails(ex);
      int screenRes = ClientContext.getScreenResolution();
      dialog.setSize(8 * screenRes, 3 * screenRes);
      dialog.pack();
      UlcUtil.centerOnScreen(dialog);
      dialog.setVisible(true);
    }
!!!288903.java!!!	start(inout backendController : IBackendController, inout locale : Locale) : boolean

    if (super.start(backendController, locale)) {
      loginRetries = 0;
      loginSuccessful = false;
      loginComplete = false;
      CallbackHandler callbackHandler = getLoginCallbackHandler();
      if (callbackHandler instanceof DialogCallbackHandler) {
        ((DialogCallbackHandler) callbackHandler)
            .setParentComponent(controllerFrame);
        ((DialogCallbackHandler) callbackHandler)
            .setCallbackHandlerListener(this);
      }
      performLogin();
      return true;
    }
    return false;
!!!289031.java!!!	stop() : boolean

    if (controllerFrame != null) {
      controllerFrame.setVisible(false);
    }
    ApplicationContext.terminate();
    return true;
!!!289159.java!!!	createLoginCallbackHandler() : CallbackHandler

    DialogCallbackHandler callbackHandler = new DialogCallbackHandler();
    callbackHandler.setLocale(getLocale());
    callbackHandler.setTranslationProvider(getTranslationProvider());
    callbackHandler.setIconFactory(getIconFactory());
    return callbackHandler;
!!!289287.java!!!	displayModule(in moduleName : String) : void

    if (moduleInternalFrames == null) {
      moduleInternalFrames = new HashMap<String, ULCExtendedInternalFrame>();
    }
    ULCExtendedInternalFrame moduleInternalFrame = moduleInternalFrames
        .get(moduleName);
    if (moduleInternalFrame == null) {
      IViewDescriptor moduleViewDescriptor = getModule(moduleName)
          .getViewDescriptor();
      IValueConnector moduleConnector = getBackendController()
          .getModuleConnector(moduleName);
      IView<ULCComponent> moduleView = createModuleView(moduleName,
          moduleViewDescriptor, (Module) moduleConnector.getConnectorValue());
      moduleInternalFrame = createULCExtendedInternalFrame(moduleView);
      moduleInternalFrame
          .setFrameIcon(getIconFactory().getIcon(
              moduleViewDescriptor.getIconImageURL(),
              IIconFactory.SMALL_ICON_SIZE));
      moduleInternalFrame
          .addExtendedInternalFrameListener(new ModuleInternalFrameListener(
              moduleName));
      moduleInternalFrames.put(moduleName, moduleInternalFrame);
      controllerFrame.getContentPane().add(moduleInternalFrame);
      getMvcBinder().bind(moduleView.getConnector(), moduleConnector);
      moduleInternalFrame.pack();
      moduleInternalFrame.setSize(controllerFrame.getSize());
    }
    moduleInternalFrame.setVisible(true);
    if (moduleInternalFrame.isIcon()) {
      moduleInternalFrame.setIcon(false);
    }
    moduleInternalFrame.setMaximum(true);
    setSelectedModuleName(moduleName);
    moduleInternalFrame.moveToFront();
    super.displayModule(moduleName);
!!!289415.java!!!	setSelectedModuleName(in moduleName : String) : void

    super.setSelectedModuleName(moduleName);
    updateFrameTitle();
!!!289543.java!!!	createActionMenu(inout actionList : ActionList, inout sourceComponent : ULCComponent) : ULCMenu

    ULCMenu menu = new ULCMenu(actionList.getI18nName(getTranslationProvider(),
        getLocale()));
    if (actionList.getDescription() != null) {
      menu.setToolTipText(actionList.getI18nDescription(
          getTranslationProvider(), getLocale())
          + IActionFactory.TOOLTIP_ELLIPSIS);
    }
    menu.setIcon(getIconFactory().getIcon(actionList.getIconImageURL(),
        IIconFactory.SMALL_ICON_SIZE));
    for (IDisplayableAction action : actionList.getActions()) {
      menu
          .add(new ULCMenuItem(getViewFactory().getActionFactory()
              .createAction(action, this, sourceComponent, null, null,
                  getLocale())));
    }
    return menu;
!!!289671.java!!!	createActionMenus(inout sourceComponent : ULCComponent) : List<ULCMenu>

    return createMenus(sourceComponent, getActions());
!!!289799.java!!!	createHelpActionMenus(inout sourceComponent : ULCComponent) : List<ULCMenu>

    return createMenus(sourceComponent, getHelpActions());
!!!289927.java!!!	createMenus(inout sourceComponent : ULCComponent, inout actionMap : ActionMap) : List<ULCMenu>

    List<ULCMenu> menus = new ArrayList<ULCMenu>();
    if (actionMap != null) {
      for (ActionList actionList : actionMap.getActionLists()) {
        ULCMenu menu = createActionMenu(actionList, sourceComponent);
        menus.add(menu);
      }
    }
    return menus;
!!!290055.java!!!	createApplicationMenuBar(inout sourceComponent : ULCComponent) : ULCMenuBar

    ULCMenuBar applicationMenuBar = new ULCMenuBar();
    applicationMenuBar.add(createModulesMenu());
    List<ULCMenu> actionMenus = createActionMenus(sourceComponent);
    if (actionMenus != null) {
      for (ULCMenu actionMenu : actionMenus) {
        applicationMenuBar.add(actionMenu);
      }
    }
    applicationMenuBar.add(ULCFiller.createHorizontalGlue());
    List<ULCMenu> helpActionMenus = createHelpActionMenus(sourceComponent);
    if (helpActionMenus != null) {
      for (ULCMenu helpActionMenu : helpActionMenus) {
        applicationMenuBar.add(helpActionMenu);
      }
    }
    return applicationMenuBar;
!!!290183.java!!!	createControllerFrame() : ULCFrame

    ULCFrame frame = new ULCFrame();
    frame.setContentPane(new ULCDesktopPane());
    frame.setIconImage(getIconFactory().getIcon(getIconImageURL(),
        IIconFactory.SMALL_ICON_SIZE));
    frame.setDefaultCloseOperation(IWindowConstants.DO_NOTHING_ON_CLOSE);
    frame.setMenuBar(createApplicationMenuBar(frame));
    frame.addWindowListener(new IWindowListener() {

      private static final long serialVersionUID = -7845554617417316256L;

      public void windowClosing(@SuppressWarnings("unused")
      WindowEvent event) {
        stop();
      }
    });
    return frame;
!!!290311.java!!!	createModulesMenu() : ULCMenu

    ULCMenu modulesMenu = new ULCMenu(getTranslationProvider().getTranslation(
        "modules", getLocale()));
    modulesMenu.setIcon(getIconFactory().getIcon(getModulesMenuIconImageUrl(),
        IIconFactory.SMALL_ICON_SIZE));
    for (String moduleName : getModuleNames()) {
      IViewDescriptor moduleViewDescriptor = getModule(moduleName)
          .getViewDescriptor();
      ULCMenuItem moduleMenuItem = new ULCMenuItem(new ModuleSelectionAction(
          moduleName, moduleViewDescriptor));
      modulesMenu.add(moduleMenuItem);
    }
    modulesMenu.addSeparator();
    modulesMenu.add(new ULCMenuItem(new QuitAction()));
    return modulesMenu;
!!!290439.java!!!	createULCExtendedInternalFrame(inout view : IView) : ULCExtendedInternalFrame

    ULCExtendedInternalFrame internalFrame = new ULCExtendedInternalFrame(view
        .getDescriptor().getI18nName(getTranslationProvider(), getLocale()));
    internalFrame.setResizable(true);
    internalFrame.setClosable(false);
    internalFrame.setMaximizable(true);
    internalFrame.setIconifiable(true);
    internalFrame.getContentPane().add(view.getPeer());
    internalFrame.setDefaultCloseOperation(IWindowConstants.HIDE_ON_CLOSE);
    return internalFrame;
!!!290567.java!!!	displayControllerFrame() : void

    controllerFrame = createControllerFrame();
    controllerFrame.pack();
    int screenRes = ClientContext.getScreenResolution();
    controllerFrame.setSize(12 * screenRes, 8 * screenRes);
    UlcUtil.centerOnScreen(controllerFrame);
    updateFrameTitle();
    controllerFrame.setVisible(true);
!!!290695.java!!!	notifyWaiters() : void

    notifyAll();
!!!290823.java!!!	performLogin() : void

    new LoginThread().start();
    loginTimer = new ULCPollingTimer(2000, new IActionListener() {

      private static final long serialVersionUID = 5630061795918376362L;

      public void actionPerformed(@SuppressWarnings("unused")
      ActionEvent event) {
        if (loginCallbacks != null) {
          Callback[] loginCallbacksCopy = loginCallbacks;
          loginCallbacks = null;
          try {
            getLoginCallbackHandler().handle(loginCallbacksCopy);
          } catch (IOException ex) {
            // NO-OP
          } catch (UnsupportedCallbackException ex) {
            // NO-OP
          }
        }
        if (loginComplete) {
          loginTimer.stop();
          loginTimer = null;
          ClientContext.sendMessage("appStarted");
          if (loginSuccessful) {
            displayControllerFrame();
            execute(getStartupAction(), getInitialActionContext());
          } else {
            stop();
          }
        }
      }
    });
    loginTimer.setInitialDelay(100);
    loginTimer.start();
!!!290951.java!!!	updateFrameTitle() : void

    String moduleName = getSelectedModuleName();
    if (moduleName != null) {
      controllerFrame.setTitle(getModule(getSelectedModuleName())
          .getViewDescriptor().getI18nDescription(getTranslationProvider(),
              getLocale())
          + " - " + getI18nName(getTranslationProvider(), getLocale()));
    } else {
      controllerFrame.setTitle(getI18nName(getTranslationProvider(),
          getLocale()));
    }
!!!291079.java!!!	waitForNotification() : void

    try {
      wait();
    } catch (InterruptedException ex) {
      // NO-OP.
    }
