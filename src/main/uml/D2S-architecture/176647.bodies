class DefaultUlcViewFactory
!!!315143.java!!!	createView(inout viewDescriptor : IViewDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    IView<ULCComponent> view = null;
    if (viewDescriptor instanceof IComponentViewDescriptor) {
      view = createComponentView((IComponentViewDescriptor) viewDescriptor,
          actionHandler, locale);
    } else if (viewDescriptor instanceof INestingViewDescriptor) {
      view = createNestingView((INestingViewDescriptor) viewDescriptor,
          actionHandler, locale);
    } else if (viewDescriptor instanceof IImageViewDescriptor) {
      view = createImageView((IImageViewDescriptor) viewDescriptor,
          actionHandler, locale);
    } else if (viewDescriptor instanceof IPropertyViewDescriptor) {
      view = createPropertyView((IPropertyViewDescriptor) viewDescriptor,
          actionHandler, locale);
    } else if (viewDescriptor instanceof ICollectionViewDescriptor) {
      view = createCollectionView((ICollectionViewDescriptor) viewDescriptor,
          actionHandler, locale);
    } else if (viewDescriptor instanceof ICompositeViewDescriptor) {
      view = createCompositeView((ICompositeViewDescriptor) viewDescriptor,
          actionHandler, locale);
    } else if (viewDescriptor instanceof ICardViewDescriptor) {
      view = createCardView((ICardViewDescriptor) viewDescriptor,
          actionHandler, locale);
    } else if (viewDescriptor instanceof ITreeViewDescriptor) {
      view = createTreeView((ITreeViewDescriptor) viewDescriptor,
          actionHandler, locale);
    }
    if (view != null) {
      if (viewDescriptor.getDescription() != null) {
        view.getPeer().setToolTipText(
            viewDescriptor.getI18nDescription(getTranslationProvider(), locale)
                + TOOLTIP_ELLIPSIS);
      }
      try {
        if (actionHandler != null) {
          actionHandler.checkAccess(viewDescriptor);
        }
        if (viewDescriptor.getForeground() != null) {
          view.getPeer().setForeground(
              createUlcColor(viewDescriptor.getForeground()));
        }
        if (viewDescriptor.getBackground() != null) {
          view.getPeer().setBackground(
              createUlcColor(viewDescriptor.getBackground()));
        }
        if (viewDescriptor.getFont() != null) {
          view.getPeer().setFont(createUlcFont(viewDescriptor.getFont()));
        }
        if (viewDescriptor.isReadOnly()) {
          view.getConnector().setLocallyWritable(false);
        }
        if (viewDescriptor.getActions() != null) {
          ULCToolBar toolBar = createULCToolBar();
          for (Iterator<ActionList> iter = viewDescriptor
              .getActions().getActionLists().iterator(); iter
              .hasNext();) {
            ActionList nextActionList = iter
                .next();
            for (IDisplayableAction action : nextActionList.getActions()) {
              IAction ulcAction = actionFactory.createAction(action,
                  actionHandler, view, locale);
              ULCButton actionButton = createULCButton();
              actionButton.setAction(ulcAction);

              if (action.getAcceleratorAsString() != null) {
                KeyStroke ks = KeyStroke.getKeyStroke(action
                    .getAcceleratorAsString());
                view.getPeer().registerKeyboardAction(ulcAction, ks,
                    ULCComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
                String acceleratorString = java.awt.event.KeyEvent
                    .getKeyModifiersText(ks.getModifiers())
                    + "-" + java.awt.event.KeyEvent.getKeyText(ks.getKeyCode());
                actionButton.setToolTipText("<HTML>"
                    + actionButton.getToolTipText()
                    + " <FONT SIZE=\"-2\" COLOR=\"#993366\">"
                    + acceleratorString + "</FONT></HTML>");
              }

              actionButton.setText("");
              toolBar.add(actionButton);
            }
            if (iter.hasNext()) {
              toolBar.addSeparator();
            }
          }

          ULCBorderLayoutPane viewPanel = createBorderLayoutPane();
          viewPanel.add(toolBar, ULCBorderLayoutPane.NORTH);
          viewPanel.add(view.getPeer(), ULCBorderLayoutPane.CENTER);
          view.setPeer(viewPanel);
        }
        decorateWithBorder(view, locale);
      } catch (SecurityException ex) {
        view.setPeer(createSecurityPanel());
      }
    }
    return view;
!!!315271.java!!!	getActionFactory() : IActionFactory

    return actionFactory;
!!!315399.java!!!	getIconFactory() : IIconFactory

    return iconFactory;
!!!315527.java!!!	setActionFactory(inout actionFactory : IActionFactory) : void

    this.actionFactory = actionFactory;
!!!315655.java!!!	setBinaryPropertyInfoAction(inout binaryPropertyInfoAction : IDisplayableAction) : void

    this.binaryPropertyInfoAction = binaryPropertyInfoAction;
!!!315783.java!!!	setConnectorFactory(inout connectorFactory : IConfigurableConnectorFactory) : void

    this.connectorFactory = connectorFactory;
!!!315911.java!!!	setIconFactory(inout iconFactory : IIconFactory) : void

    this.iconFactory = iconFactory;
!!!316039.java!!!	setListSelectionModelBinder(inout listSelectionModelBinder : IListSelectionModelBinder) : void

    this.listSelectionModelBinder = listSelectionModelBinder;
!!!316167.java!!!	setLovAction(inout lovAction : IDisplayableAction) : void

    this.lovAction = lovAction;
!!!316295.java!!!	setMasterDetailBinder(inout masterDetailBinder : IMasterDetailBinder) : void

    this.masterDetailBinder = masterDetailBinder;
!!!316423.java!!!	setMaxCharacterLength(in maxCharacterLength : int) : void

    this.maxCharacterLength = maxCharacterLength;
!!!316551.java!!!	setMvcBinder(inout mvcBinder : IMvcBinder) : void

    this.mvcBinder = mvcBinder;
!!!316679.java!!!	setOpenFileAsBinaryPropertyAction(inout openFileAsBinaryPropertyAction : IDisplayableAction) : void

    this.openFileAsBinaryPropertyAction = openFileAsBinaryPropertyAction;
!!!316807.java!!!	setResetPropertyAction(inout resetPropertyAction : IDisplayableAction) : void

    this.resetPropertyAction = resetPropertyAction;
!!!316935.java!!!	setSaveBinaryPropertyAsFileAction(inout saveBinaryPropertyAsFileAction : IDisplayableAction) : void

    this.saveBinaryPropertyAsFileAction = saveBinaryPropertyAsFileAction;
!!!317063.java!!!	setTranslationProvider(inout translationProvider : ITranslationProvider) : void

    this.translationProvider = translationProvider;
!!!317191.java!!!	setTreeSelectionModelBinder(inout treeSelectionModelBinder : ITreeSelectionModelBinder) : void

    this.treeSelectionModelBinder = treeSelectionModelBinder;
!!!317319.java!!!	createBorderLayoutPane() : ULCBorderLayoutPane

    ULCBorderLayoutPane pane = new ULCBorderLayoutPane();
    return pane;
!!!317447.java!!!	createCardPane() : ULCCardPane

    ULCCardPane pane = new ULCCardPane();
    return pane;
!!!317575.java!!!	createGridBagLayoutPane() : ULCGridBagLayoutPane

    ULCGridBagLayoutPane pane = new ULCGridBagLayoutPane();
    return pane;
!!!317703.java!!!	createGridLayoutPane() : ULCGridLayoutPane

    ULCGridLayoutPane pane = new ULCGridLayoutPane();
    return pane;
!!!317831.java!!!	createSecurityPanel() : ULCBorderLayoutPane

    ULCBorderLayoutPane panel = new ULCBorderLayoutPane();
    ULCLabel label = createULCLabel();
    label.setIcon(iconFactory.getForbiddenIcon(IIconFactory.LARGE_ICON_SIZE));
    label.setHorizontalAlignment(IDefaults.CENTER);
    label.setVerticalAlignment(IDefaults.CENTER);
    panel.add(label, ULCBorderLayoutPane.CENTER);
    return panel;
!!!317959.java!!!	createULCActionField(inout showTextField : boolean) : ULCActionField

    return new ULCActionField(showTextField);
!!!318087.java!!!	createULCButton() : ULCButton

    ULCButton ulcButton = new ULCExtendedButton();
    return ulcButton;
!!!318215.java!!!	createULCCheckBox() : ULCCheckBox

    return new ULCCheckBox();
!!!318343.java!!!	createULCColorPicker() : ULCColorPicker

    return new ULCColorPicker();
!!!318471.java!!!	createULCComboBox() : ULCComboBox

    return new com.d2s.framework.gui.ulc.components.server.ULCExtendedComboBox();
!!!318599.java!!!	createULCDateField(in formatPattern : String, inout locale : Locale) : ULCDateField

    ULCDateField dateField = new ULCDateField(formatPattern, locale);
    ClientContext.setEventDeliveryMode(dateField,
        IUlcEventConstants.VALUE_CHANGED_EVENT,
        IUlcEventConstants.ASYNCHRONOUS_MODE);
    return dateField;
!!!318727.java!!!	createULCJEditTextArea(in language : String) : ULCJEditTextArea

    ULCJEditTextArea textArea = new ULCJEditTextArea(language);
    return textArea;
!!!318855.java!!!	createULCLabel() : ULCLabel

    return new ULCLabel();
!!!318983.java!!!	createULCList() : ULCList

    ULCList list = new ULCList();
    list.setDragEnabled(true);
    return list;
!!!319111.java!!!	createULCMenuItem() : ULCMenuItem

    return new ULCMenuItem();
!!!319239.java!!!	createULCPasswordField() : ULCPasswordField

    ULCPasswordField passwordField = new ULCPasswordField();
    return passwordField;
!!!319367.java!!!	createULCPopupMenu() : ULCPopupMenu

    return new ULCPopupMenu();
!!!319495.java!!!	createULCScrollPane() : ULCScrollPane

    ULCScrollPane scrollPane = new ULCExtendedScrollPane();
    scrollPane.setMinimumSize(MINIMUM_AREA_SIZE);
    return scrollPane;
!!!319623.java!!!	createULCSplitPane() : ULCSplitPane

    ULCSplitPane splitPane = new ULCSplitPane();
    splitPane.setContinuousLayout(true);
    splitPane.setOneTouchExpandable(true);
    return splitPane;
!!!319751.java!!!	createULCTabbedPane() : ULCTabbedPane

    return new ULCTabbedPane();
!!!319879.java!!!	createULCTable() : ULCExtendedTable

    ULCExtendedTable table = new com.d2s.framework.gui.ulc.components.server.ULCExtendedTable();
    table.setDragEnabled(true);
    ClientContext.setEventDeliveryMode(table.getSelectionModel(),
        IUlcEventConstants.LIST_SELECTION_EVENT,
        IUlcEventConstants.ASYNCHRONOUS_MODE);
    return table;
!!!320007.java!!!	createULCTableTree() : ULCTableTree

    ULCTableTree tableTree = new ULCTableTree();
    tableTree.setDragEnabled(true);
    ClientContext.setEventDeliveryMode(tableTree.getSelectionModel(),
        IUlcEventConstants.LIST_SELECTION_EVENT,
        IUlcEventConstants.ASYNCHRONOUS_MODE);
    ClientContext.setModelUpdateMode(tableTree.getModel(),
        IUlcEventConstants.ASYNCHRONOUS_MODE);
    return tableTree;
!!!320135.java!!!	createULCTextArea() : ULCTextArea

    ULCTextArea textArea = new ULCTextArea();
    textArea.setDragEnabled(true);
    textArea.setWrapStyleWord(true);
    ClientContext.setEventDeliveryMode(textArea,
        IUlcEventConstants.FOCUS_EVENT, IUlcEventConstants.ASYNCHRONOUS_MODE);
    ClientContext.setEventDeliveryMode(textArea,
        IUlcEventConstants.VALUE_CHANGED_EVENT,
        IUlcEventConstants.ASYNCHRONOUS_MODE);
    return textArea;
!!!320263.java!!!	createULCTextField() : ULCTextField

    ULCTextField textField = new ULCOnFocusSelectTextField();
    ClientContext.setEventDeliveryMode(textField,
        IUlcEventConstants.FOCUS_EVENT, IUlcEventConstants.ASYNCHRONOUS_MODE);
    ClientContext.setEventDeliveryMode(textField,
        IUlcEventConstants.VALUE_CHANGED_EVENT,
        IUlcEventConstants.ASYNCHRONOUS_MODE);
    return textField;
!!!320391.java!!!	createULCToolBar() : ULCToolBar

    ULCToolBar toolBar = new ULCToolBar();
    toolBar.setFloatable(true);
    toolBar.setBorderPainted(false);
    return toolBar;
!!!320519.java!!!	createULCTree() : ULCExtendedTree

    ULCExtendedTree tree = new ULCExtendedTree();
    tree.setDragEnabled(true);
    return tree;
!!!320647.java!!!	decorateWithBorder(inout view : IView, inout locale : Locale) : void

    switch (view.getDescriptor().getBorderType()) {
      case IViewDescriptor.SIMPLE:
        view.getPeer().setBorder(BorderFactory.createEtchedBorder());
        break;
      case IViewDescriptor.TITLED:
        view.getPeer().setBorder(
            BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(), view.getDescriptor()
                    .getI18nName(getTranslationProvider(), locale)));
        // ULCInternalFrame iFrame = new ULCInternalFrame(view.getDescriptor()
        // .getI18nName(getTranslationProvider(), locale), true, true,
        // true, true);
        // iFrame.setFrameIcon(iconFactory.getIcon(view.getDescriptor()
        // .getIconImageURL(), IIconFactory.TINY_ICON_SIZE));
        // iFrame.add(view.getPeer());
        // iFrame.pack();
        // iFrame.setPreferredSize(new Dimension(100,100));
        // view.setPeer(iFrame);
        break;
      default:
        break;
    }
!!!320775.java!!!	getTranslationProvider() : ITranslationProvider

    return translationProvider;
!!!320903.java!!!	adjustSizes(inout component : ULCComponent, inout formatter : IFormatter, inout templateValue : Object) : void

    adjustSizes(component, formatter, templateValue, 32);
!!!321031.java!!!	adjustSizes(inout component : ULCComponent, inout formatter : IFormatter, inout templateValue : Object, in extraWidth : int) : void

    int preferredWidth = computePixelWidth(component, getFormatLength(
        formatter, templateValue))
        + extraWidth;
    Dimension size = new Dimension(preferredWidth, component.getFont()
        .getSize() + 6);
    component.setMinimumSize(new Dimension(size.getWidth() / 2, size
        .getHeight()));
    component.setPreferredSize(size);
    component.setMaximumSize(size);
!!!321159.java!!!	computeEnumerationKey(in keyPrefix : String, inout value : Object) : String

    return keyPrefix + "." + value;
!!!321287.java!!!	computePixelWidth(inout component : ULCComponent, in characterLength : int) : int

    int charLength = maxCharacterLength + 2;
    if (characterLength > 0 && characterLength < maxCharacterLength) {
      charLength = characterLength + 2;
    }
    return component.getFont().getSize() * charLength;
!!!321415.java!!!	computeTranslationMapping(inout propertyDescriptor : IEnumerationPropertyDescriptor, inout locale : Locale) : Map<String, String>

    Map<String, String> translationMapping = new HashMap<String, String>();
    for (String enumerationValue : propertyDescriptor.getEnumerationValues()) {
      translationMapping.put(enumerationValue, translationProvider
          .getTranslation(computeEnumerationKey(propertyDescriptor
              .getEnumerationName(), enumerationValue), locale));
    }
    return translationMapping;
!!!321543.java!!!	constructCompositeView(inout viewComponent : ULCComponent, inout descriptor : IViewDescriptor) : BasicCompositeView

    BasicCompositeView<ULCComponent> view = new BasicCompositeView<ULCComponent>(
        viewComponent);
    view.setDescriptor(descriptor);
    return view;
!!!321671.java!!!	constructMapView(inout viewComponent : ULCComponent, inout descriptor : IViewDescriptor) : BasicMapView

    BasicMapView<ULCComponent> view = new BasicMapView<ULCComponent>(
        viewComponent);
    view.setDescriptor(descriptor);
    return view;
!!!321799.java!!!	constructView(inout viewComponent : ULCComponent, inout descriptor : IViewDescriptor, inout connector : IValueConnector) : IView

    BasicView<ULCComponent> view = new BasicView<ULCComponent>(viewComponent);
    view.setConnector(connector);
    view.setDescriptor(descriptor);
    return view;
!!!321927.java!!!	createBinaryPropertyView(inout propertyDescriptor : IBinaryPropertyDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    ULCActionField viewComponent = createULCActionField(false);
    ULCActionFieldConnector connector = new ULCActionFieldConnector(
        propertyDescriptor.getName(), viewComponent);
    connector.setExceptionHandler(actionHandler);
    IAction openAction = actionFactory.createAction(
        openFileAsBinaryPropertyAction, actionHandler, viewComponent,
        propertyDescriptor, connector, locale);
    IAction saveAction = actionFactory.createAction(
        saveBinaryPropertyAsFileAction, actionHandler, viewComponent,
        propertyDescriptor, connector, locale);
    IAction resetAction = actionFactory.createAction(resetPropertyAction,
        actionHandler, viewComponent, propertyDescriptor, connector, locale);
    IAction infoAction = actionFactory.createAction(binaryPropertyInfoAction,
        actionHandler, viewComponent, propertyDescriptor, connector, locale);
    viewComponent.setActions(Arrays.asList(new IAction[] {openAction,
        saveAction, resetAction, infoAction}));
    adjustSizes(viewComponent, null, null);
    return constructView(viewComponent, null, connector);
!!!322055.java!!!	createBooleanPropertyView(inout propertyDescriptor : IBooleanPropertyDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    ULCCheckBox viewComponent = createULCCheckBox();
    ULCToggleButtonConnector connector = new ULCToggleButtonConnector(
        propertyDescriptor.getName(), viewComponent);
    connector.setExceptionHandler(actionHandler);
    return constructView(viewComponent, null, connector);
!!!322183.java!!!	createBooleanTableCellRenderer(inout propertyDescriptor : IBooleanPropertyDescriptor, inout locale : Locale) : ITableCellRenderer

    return new BooleanTableCellRenderer();
!!!322311.java!!!	createBorderView(inout viewDescriptor : IBorderViewDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : ICompositeView

    ULCBorderLayoutPane viewComponent = createBorderLayoutPane();
    BasicCompositeView<ULCComponent> view = constructCompositeView(
        viewComponent, viewDescriptor);
    List<IView<ULCComponent>> childrenViews = new ArrayList<IView<ULCComponent>>();

    if (viewDescriptor.getEastViewDescriptor() != null) {
      IView<ULCComponent> eastView = createView(viewDescriptor
          .getEastViewDescriptor(), actionHandler, locale);
      viewComponent.add(eastView.getPeer(), ULCBorderLayoutPane.EAST);
      childrenViews.add(eastView);
    }
    if (viewDescriptor.getNorthViewDescriptor() != null) {
      IView<ULCComponent> northView = createView(viewDescriptor
          .getNorthViewDescriptor(), actionHandler, locale);
      viewComponent.add(northView.getPeer(), ULCBorderLayoutPane.NORTH);
      childrenViews.add(northView);
    }
    if (viewDescriptor.getCenterViewDescriptor() != null) {
      IView<ULCComponent> centerView = createView(viewDescriptor
          .getCenterViewDescriptor(), actionHandler, locale);
      viewComponent.add(centerView.getPeer(), ULCBorderLayoutPane.CENTER);
      childrenViews.add(centerView);
    }
    if (viewDescriptor.getWestViewDescriptor() != null) {
      IView<ULCComponent> westView = createView(viewDescriptor
          .getWestViewDescriptor(), actionHandler, locale);
      viewComponent.add(westView.getPeer(), ULCBorderLayoutPane.WEST);
      childrenViews.add(westView);
    }
    if (viewDescriptor.getSouthViewDescriptor() != null) {
      IView<ULCComponent> southView = createView(viewDescriptor
          .getSouthViewDescriptor(), actionHandler, locale);
      viewComponent.add(southView.getPeer(), ULCBorderLayoutPane.SOUTH);
      childrenViews.add(southView);
    }
    view.setChildren(childrenViews);
    return view;
!!!322439.java!!!	createCardView(inout viewDescriptor : ICardViewDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IMapView

    ULCCardPane viewComponent = createCardPane();
    BasicMapView<ULCComponent> view = constructMapView(viewComponent,
        viewDescriptor);
    Map<String, IView<ULCComponent>> childrenViews = new HashMap<String, IView<ULCComponent>>();

    viewComponent.add(createBorderLayoutPane(),
        ICardViewDescriptor.DEFAULT_CARD);
    viewComponent.add(createSecurityPanel(), ICardViewDescriptor.SECURITY_CARD);

    for (Map.Entry<String, IViewDescriptor> childViewDescriptor : viewDescriptor
        .getCardViewDescriptors().entrySet()) {
      IView<ULCComponent> childView = createView(
          childViewDescriptor.getValue(), actionHandler, locale);
      viewComponent.addCard(childViewDescriptor.getKey(), childView.getPeer());
      childrenViews.put(childViewDescriptor.getKey(), childView);
    }
    view.setChildren(childrenViews);
    view.setConnector(createCardViewConnector(view, actionHandler));
    return view;
!!!322567.java!!!	createCardViewConnector(in cardView : IMapView, in actionHandler : IActionHandler) : IValueConnector

    IValueConnector cardViewConnector = connectorFactory
        .createValueConnector(cardView.getDescriptor().getName());
    cardViewConnector
        .addConnectorValueChangeListener(new IConnectorValueChangeListener() {

          public void connectorValueChange(ConnectorValueChangeEvent evt) {
            Object cardModel = evt.getNewValue();
            boolean accessGranted = true;
            if (cardModel instanceof ISecurable && actionHandler != null) {
              try {
                actionHandler.checkAccess((ISecurable) cardModel);
              } catch (SecurityException se) {
                accessGranted = false;
              }
            }
            ULCCardPane cardPanel = (ULCCardPane) cardView.getPeer();
            if (accessGranted) {
              String cardName = ((ICardViewDescriptor) cardView.getDescriptor())
                  .getCardNameForModel(cardModel);
              if (cardName != null) {
                IView<ULCComponent> childCardView = cardView.getChild(cardName);
                if (childCardView != null) {
                  cardPanel.setSelectedName(cardName);
                  IValueConnector childCardConnector = childCardView
                      .getConnector();
                  if (cardView.getDescriptor() instanceof ModuleCardViewDescriptor) {
                    if (childCardView.getDescriptor() instanceof ICollectionViewDescriptor) {
                      if (cardModel != null
                          && cardModel instanceof BeanCollectionModule) {
                        childCardConnector.getModelConnector()
                            .setConnectorValue(
                                ((BeanCollectionModule) cardModel)
                                    .getModuleObjects());
                      } else {
                        childCardConnector.getModelConnector()
                            .setConnectorValue(cardModel);
                      }
                    } else {
                      if (cardModel != null && cardModel instanceof BeanModule) {
                        childCardConnector.getModelConnector()
                            .setConnectorValue(
                                ((BeanModule) cardModel).getModuleObject());
                      } else {
                        childCardConnector.getModelConnector()
                            .setConnectorValue(cardModel);
                      }
                    }
                  } else {
                    if (childCardConnector != null) {
                      mvcBinder.bind(childCardConnector, cardView
                          .getConnector().getModelConnector());
                    }
                  }
                } else {
                  cardPanel.setSelectedName(ICardViewDescriptor.DEFAULT_CARD);
                }
              } else {
                cardPanel.setSelectedName(ICardViewDescriptor.DEFAULT_CARD);
              }
            } else {
              cardPanel.setSelectedName(ICardViewDescriptor.SECURITY_CARD);
            }
          }
        });
    return cardViewConnector;
!!!322695.java!!!	createCollectionPropertyView(inout propertyDescriptor : ICollectionPropertyDescriptor, inout renderedChildProperties : List<String>, inout actionHandler : IActionHandler, inout locale : Locale) : IView


    IView<ULCComponent> view;
    if (renderedChildProperties != null && renderedChildProperties.size() > 1) {
      BasicTableViewDescriptor viewDescriptor = new BasicTableViewDescriptor();
      viewDescriptor.setModelDescriptor(propertyDescriptor);
      List<ISubViewDescriptor> columnViewDescriptors = new ArrayList<ISubViewDescriptor>();
      for (String renderedProperty : renderedChildProperties) {
        BasicSubviewDescriptor columnDescriptor = new BasicSubviewDescriptor();
        columnDescriptor.setName(renderedProperty);
        columnViewDescriptors.add(columnDescriptor);
      }
      viewDescriptor.setColumnViewDescriptors(columnViewDescriptors);
      viewDescriptor.setName(propertyDescriptor.getName());
      view = createTableView(viewDescriptor, actionHandler, locale);
    } else {
      BasicListViewDescriptor viewDescriptor = new BasicListViewDescriptor();
      viewDescriptor.setModelDescriptor(propertyDescriptor);
      if (renderedChildProperties != null
          && renderedChildProperties.size() == 1) {
        viewDescriptor.setRenderedProperty(renderedChildProperties.get(0));
      }
      viewDescriptor.setName(propertyDescriptor.getName());
      view = createListView(viewDescriptor, actionHandler, locale);
    }
    return view;
!!!322823.java!!!	createCollectionTableCellRenderer(inout propertyDescriptor : ICollectionPropertyDescriptor, inout locale : Locale) : ITableCellRenderer

    return null;
!!!322951.java!!!	createCollectionView(inout viewDescriptor : ICollectionViewDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    IView<ULCComponent> view = null;
    if (viewDescriptor instanceof IListViewDescriptor) {
      view = createListView((IListViewDescriptor) viewDescriptor,
          actionHandler, locale);
    } else if (viewDescriptor instanceof ITableViewDescriptor) {
      view = createTableView((ITableViewDescriptor) viewDescriptor,
          actionHandler, locale);
    }
    return view;
!!!323079.java!!!	createColorPropertyView(inout propertyDescriptor : IColorPropertyDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    ULCColorPicker viewComponent = createULCColorPicker();
    if (propertyDescriptor.getDefaultValue() != null) {
      int[] rgba = ColorHelper.fromHexString((String) propertyDescriptor
          .getDefaultValue());
      viewComponent
          .setResetValue(new Color(rgba[0], rgba[1], rgba[2], rgba[3]));
    }
    ULCColorPickerConnector connector = new ULCColorPickerConnector(
        propertyDescriptor.getName(), viewComponent);
    connector.setExceptionHandler(actionHandler);
    return constructView(viewComponent, null, connector);
!!!323207.java!!!	createColorTableCellRenderer(inout propertyDescriptor : IColorPropertyDescriptor, inout locale : Locale) : ITableCellRenderer

    return new ColorTableCellRenderer();
!!!323335.java!!!	createColumnConnector(in columnId : String, inout descriptor : IComponentDescriptor) : IValueConnector

    IPropertyDescriptor propertyDescriptor = descriptor
        .getPropertyDescriptor(columnId);
    if (propertyDescriptor == null) {
      throw new ViewException("No property " + columnId + " defined for "
          + descriptor.getComponentContract());
    }
    if (propertyDescriptor instanceof IReferencePropertyDescriptor) {
      return connectorFactory.createCompositeValueConnector(columnId,
          ((IReferencePropertyDescriptor<?>) propertyDescriptor)
              .getReferencedDescriptor().getToStringProperty());
    }
    return connectorFactory.createValueConnector(propertyDescriptor.getName());
!!!323463.java!!!	createComponentView(inout viewDescriptor : IComponentViewDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    ICompositeValueConnector connector = connectorFactory
        .createCompositeValueConnector(
            getConnectorIdForComponentView(viewDescriptor), null);
    ULCGridBagLayoutPane viewComponent = createGridBagLayoutPane();
    IView<ULCComponent> view = constructView(viewComponent, viewDescriptor,
        connector);

    int currentX = 0;
    int currentY = 0;

    boolean isSpaceFilled = false;

    for (ISubViewDescriptor propertyViewDescriptor : viewDescriptor
        .getPropertyViewDescriptors()) {
      String propertyName = propertyViewDescriptor.getName();
      IPropertyDescriptor propertyDescriptor = ((IComponentDescriptorProvider<?>) viewDescriptor
          .getModelDescriptor()).getComponentDescriptor()
          .getPropertyDescriptor(propertyName);
      if (propertyDescriptor == null) {
        throw new ViewException("Property descriptor [" + propertyName
            + "] does not exist for model descriptor "
            + viewDescriptor.getModelDescriptor().getName() + ".");
      }
      IView<ULCComponent> propertyView = createPropertyView(propertyDescriptor,
          viewDescriptor.getRenderedChildProperties(propertyName),
          actionHandler, locale);
      propertyView.setParent(view);
      connector.addChildConnector(propertyView.getConnector());
      if (propertyViewDescriptor.getReadabilityGates() != null) {
        for (IGate gate : propertyViewDescriptor.getReadabilityGates()) {
          propertyView.getConnector().addReadabilityGate(gate.clone());
        }
      }
      if (propertyViewDescriptor.getWritabilityGates() != null) {
        for (IGate gate : propertyViewDescriptor.getWritabilityGates()) {
          propertyView.getConnector().addWritabilityGate(gate.clone());
        }
      }
      propertyView.getConnector().setLocallyWritable(
          !propertyViewDescriptor.isReadOnly());
      ULCLabel propertyLabel = createPropertyLabel(propertyDescriptor,
          propertyView.getPeer(), locale);

      int propertyWidth = viewDescriptor.getPropertyWidth(propertyName);
      if (propertyWidth > viewDescriptor.getColumnCount()) {
        propertyWidth = viewDescriptor.getColumnCount();
      }
      if (currentX + propertyWidth > viewDescriptor.getColumnCount()) {
        currentX = 0;
        currentY++;
      }

      // label positionning
      GridBagConstraints constraints = new GridBagConstraints();
      switch (viewDescriptor.getLabelsPosition()) {
        case IComponentViewDescriptor.ASIDE:
          constraints.setInsets(new Insets(5, 5, 5, 5));
          if (propertyView.getPeer() instanceof ULCTextArea
              || propertyView.getPeer() instanceof ULCList
              || propertyView.getPeer() instanceof ULCScrollPane
              || propertyView.getPeer() instanceof ULCExtendedTable
              || propertyView.getPeer() instanceof ULCJEditTextArea) {
            constraints.setAnchor(GridBagConstraints.NORTHEAST);
          } else {
            constraints.setAnchor(GridBagConstraints.EAST);
          }
          constraints.setGridX(currentX * 2);
          constraints.setGridY(currentY);
          break;
        case IComponentViewDescriptor.ABOVE:
          constraints.setInsets(new Insets(5, 5, 0, 5));
          constraints.setAnchor(GridBagConstraints.SOUTHWEST);
          constraints.setGridX(currentX);
          constraints.setGridY(currentY * 2);
          constraints.setGridWidth(propertyWidth);
          break;
        default:
          break;
      }
      viewComponent.add(propertyLabel, constraints);

      // component positionning
      switch (viewDescriptor.getLabelsPosition()) {
        case IComponentViewDescriptor.ASIDE:
          constraints.setGridX(constraints.getGridX() + 1);
          constraints.setInsets(new Insets(5, 0, 5, 5));
          constraints.setGridWidth(propertyWidth * 2 - 1);
          break;
        case IComponentViewDescriptor.ABOVE:
          constraints.setGridY(constraints.getGridY() + 1);
          constraints.setInsets(new Insets(0, 5, 0, 5));
          constraints.setGridWidth(propertyWidth);
          break;
        default:
          break;
      }

      constraints.setAnchor(GridBagConstraints.WEST);
      if (propertyView.getPeer().getPreferredSize() != null) {
        constraints.setWeightX(propertyView.getPeer().getPreferredSize()
            .getWidth());
      }
      if (propertyView.getPeer() instanceof ULCTextArea
          || propertyView.getPeer() instanceof ULCList
          || propertyView.getPeer() instanceof ULCScrollPane
          || propertyView.getPeer() instanceof ULCExtendedTable
          || propertyView.getPeer() instanceof ULCJEditTextArea) {
        constraints.setWeightY(1.0);
        constraints.setFill(GridBagConstraints.BOTH);
        isSpaceFilled = true;
      } else {
        constraints.setFill(GridBagConstraints.NONE);
      }
      viewComponent.add(propertyView.getPeer(), constraints);

      currentX += propertyWidth;
    }
    if (!isSpaceFilled) {
      ULCBorderLayoutPane filler = createBorderLayoutPane();
      GridBagConstraints constraints = new GridBagConstraints();
      constraints.setGridX(0);
      constraints.setWeightX(1.0);
      constraints.setWeightY(1.0);
      constraints.setFill(GridBagConstraints.BOTH);
      switch (viewDescriptor.getLabelsPosition()) {
        case IComponentViewDescriptor.ASIDE:
          constraints.setGridY(currentY + 1);
          constraints.setGridWidth(viewDescriptor.getColumnCount() * 2);
          break;
        case IComponentViewDescriptor.ABOVE:
          constraints.setGridY((currentY + 1) * 2);
          constraints.setGridWidth(viewDescriptor.getColumnCount());
          break;
        default:
          break;
      }
      viewComponent.add(filler, constraints);
    }
    return view;
!!!323591.java!!!	createCompositeNodeGroupConnector(inout viewDescriptor : ITreeViewDescriptor, inout subtreeViewDescriptor : ICompositeTreeLevelDescriptor, in depth : int) : ICollectionConnectorProvider

    ICollectionDescriptorProvider<?> nodeGroupModelDescriptor = ((ICollectionDescriptorProvider<?>) subtreeViewDescriptor
        .getNodeGroupDescriptor().getModelDescriptor());
    IConfigurableCollectionConnectorListProvider nodeGroupPrototypeConnector = connectorFactory
        .createConfigurableCollectionConnectorListProvider(
            nodeGroupModelDescriptor.getName() + "Element",
            subtreeViewDescriptor.getNodeGroupDescriptor()
                .getRenderedProperty());
    List<ICollectionConnectorProvider> subtreeConnectors = new ArrayList<ICollectionConnectorProvider>();
    if (subtreeViewDescriptor.getChildrenDescriptors() != null
        && depth < viewDescriptor.getMaxDepth()) {
      for (ITreeLevelDescriptor childDescriptor : subtreeViewDescriptor
          .getChildrenDescriptors()) {
        ICollectionConnectorProvider childConnector = createNodeGroupConnector(
            viewDescriptor, childDescriptor, depth + 1);
        nodeGroupPrototypeConnector.addChildConnector(childConnector);
        subtreeConnectors.add(childConnector);
      }
    }
    nodeGroupPrototypeConnector
        .setCollectionConnectorProviders(subtreeConnectors);
    ICollectionConnector nodeGroupCollectionConnector = connectorFactory
        .createCollectionConnector(nodeGroupModelDescriptor.getName(),
            mvcBinder, nodeGroupPrototypeConnector);
    return nodeGroupCollectionConnector;
!!!323719.java!!!	createCompositeView(inout viewDescriptor : ICompositeViewDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : ICompositeView

    ICompositeView<ULCComponent> view = null;
    if (viewDescriptor instanceof IBorderViewDescriptor) {
      view = createBorderView((IBorderViewDescriptor) viewDescriptor,
          actionHandler, locale);
    } else if (viewDescriptor instanceof IGridViewDescriptor) {
      view = createGridView((IGridViewDescriptor) viewDescriptor,
          actionHandler, locale);
    } else if (viewDescriptor instanceof ISplitViewDescriptor) {
      view = createSplitView((ISplitViewDescriptor) viewDescriptor,
          actionHandler, locale);
    } else if (viewDescriptor instanceof ITabViewDescriptor) {
      view = createTabView((ITabViewDescriptor) viewDescriptor, actionHandler,
          locale);
    }
    if (view != null) {
      if (viewDescriptor.isMasterDetail()) {
        IView<ULCComponent> masterView = view.getChildren().get(0);
        view.setConnector(masterView.getConnector());
        for (int i = 1; i < view.getChildren().size(); i++) {
          IView<ULCComponent> detailView = view.getChildren().get(i);
          detailView.setParent(view);
          IValueConnector detailConnector = null;
          if (detailView.getConnector() instanceof ICollectionConnector) {
            IConfigurableCollectionConnectorProvider wrapper = connectorFactory
                .createConfigurableCollectionConnectorProvider(
                    ModelRefPropertyConnector.THIS_PROPERTY, null);
            wrapper.addChildConnector(detailView.getConnector());
            wrapper
                .setCollectionConnectorProvider((ICollectionConnector) detailView
                    .getConnector());
            detailConnector = wrapper;
          } else {
            detailConnector = detailView.getConnector();
          }
          masterDetailBinder.bind(masterView.getConnector(), detailConnector);
          masterView = detailView;
        }
      } else {
        ICompositeValueConnector connector = connectorFactory
            .createCompositeValueConnector(
                ModelRefPropertyConnector.THIS_PROPERTY, null);
        view.setConnector(connector);
        for (IView<ULCComponent> childView : view.getChildren()) {
          childView.setParent(view);
          connector.addChildConnector(childView.getConnector());
        }
      }
    }
    return view;
!!!323847.java!!!	createConstrainedGridView(inout viewDescriptor : IConstrainedGridViewDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : ICompositeView

    ULCGridBagLayoutPane viewComponent = createGridBagLayoutPane();
    viewComponent.setMinimumSize(MINIMUM_AREA_SIZE);
    BasicCompositeView<ULCComponent> view = constructCompositeView(
        viewComponent, viewDescriptor);
    List<IView<ULCComponent>> childrenViews = new ArrayList<IView<ULCComponent>>();

    for (IViewDescriptor childViewDescriptor : viewDescriptor
        .getChildViewDescriptors()) {
      IView<ULCComponent> childView = createView(childViewDescriptor,
          actionHandler, locale);
      viewComponent.add(childView.getPeer(),
          createGridBagConstraints(viewDescriptor
              .getViewConstraints(childViewDescriptor)));
      childrenViews.add(childView);
    }
    view.setChildren(childrenViews);
    return view;
!!!323975.java!!!	createDateDataType(inout propertyDescriptor : IDatePropertyDescriptor, inout locale : Locale, inout format : SimpleDateFormat) : ULCDateDataType

    return new ULCDateDataType(format.toPattern());
!!!324103.java!!!	createDateFormat(inout propertyDescriptor : IDatePropertyDescriptor, inout locale : Locale) : SimpleDateFormat

    DateFormat format;
    if (IDatePropertyDescriptor.DATE_TYPE.equals(propertyDescriptor.getType())) {
      format = DateFormat.getDateInstance(DateFormat.SHORT, locale);
    } else {
      format = DateFormat.getDateTimeInstance(DateFormat.SHORT,
          DateFormat.SHORT, locale);
    }
    return (SimpleDateFormat) format;
!!!324231.java!!!	createDateFormatter(inout propertyDescriptor : IDatePropertyDescriptor, inout locale : Locale) : IFormatter

    return createFormatter(createDateFormat(propertyDescriptor, locale));
!!!324359.java!!!	createDatePropertyView(inout propertyDescriptor : IDatePropertyDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView


    SimpleDateFormat format = createDateFormat(propertyDescriptor, locale);

    ULCDateField viewComponent = createULCDateField(
        format.toLocalizedPattern(), locale);
    ULCDateFieldConnector connector = new ULCDateFieldConnector(
        propertyDescriptor.getName(), viewComponent);
    connector.setExceptionHandler(actionHandler);
    adjustSizes(viewComponent, createFormatter(format),
        getDateTemplateValue(propertyDescriptor), ClientContext
            .getScreenResolution() / 10);
    return constructView(viewComponent, null, connector);
!!!324487.java!!!	createDateTableCellRenderer(in column : int, inout propertyDescriptor : IDatePropertyDescriptor, inout locale : Locale) : ITableCellRenderer

    return new FormattedTableCellRenderer(column, createDateDataType(
        propertyDescriptor, locale,
        createDateFormat(propertyDescriptor, locale)));
!!!324615.java!!!	createDecimalDataType(inout propertyDescriptor : IDecimalPropertyDescriptor, inout locale : Locale, inout format : NumberFormat) : ULCNumberDataType

    ULCNumberDataType numberDataType = new ULCNumberDataType(locale);
    if (propertyDescriptor.getMaxFractionDigit() != null) {
      numberDataType.setMaxFractionDigits(propertyDescriptor
          .getMaxFractionDigit().intValue());
    }
    numberDataType.setMin(propertyDescriptor.getMinValue());
    numberDataType.setMax(propertyDescriptor.getMaxValue());
    numberDataType.setGroupingUsed(format.isGroupingUsed());
    return numberDataType;
!!!324743.java!!!	createDecimalFormat(inout propertyDescriptor : IDecimalPropertyDescriptor, inout locale : Locale) : NumberFormat

    NumberFormat format = NumberFormat.getNumberInstance(locale);
    if (propertyDescriptor.getMaxFractionDigit() != null) {
      format.setMaximumFractionDigits(propertyDescriptor.getMaxFractionDigit()
          .intValue());
    } else {
      format.setMaximumFractionDigits(DEF_DISP_MAX_FRACTION_DIGIT);
    }
    format.setMinimumFractionDigits(format.getMaximumFractionDigits());
    return format;
!!!324871.java!!!	createDecimalFormatter(inout propertyDescriptor : IDecimalPropertyDescriptor, inout locale : Locale) : IFormatter

    return createFormatter(createDecimalFormat(propertyDescriptor, locale));
!!!324999.java!!!	createDecimalPropertyView(inout propertyDescriptor : IDecimalPropertyDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    if (propertyDescriptor instanceof IPercentPropertyDescriptor) {
      return createPercentPropertyView(
          (IPercentPropertyDescriptor) propertyDescriptor, actionHandler,
          locale);
    }
    ULCTextField viewComponent = createULCTextField();
    NumberFormat format = createDecimalFormat(propertyDescriptor, locale);

    viewComponent.setDataType(createDecimalDataType(propertyDescriptor, locale,
        format));

    ULCTextFieldConnector connector = new ULCTextFieldConnector(
        propertyDescriptor.getName(), viewComponent);
    connector.setExceptionHandler(actionHandler);
    adjustSizes(viewComponent, createFormatter(format),
        getDecimalTemplateValue(propertyDescriptor));
    return constructView(viewComponent, null, connector);
!!!325127.java!!!	createDecimalTableCellRenderer(in column : int, inout propertyDescriptor : IDecimalPropertyDescriptor, inout locale : Locale) : ITableCellRenderer

    if (propertyDescriptor instanceof IPercentPropertyDescriptor) {
      return createPercentTableCellRenderer(column,
          (IPercentPropertyDescriptor) propertyDescriptor, locale);
    }
    return new FormattedTableCellRenderer(column, createDecimalDataType(
        propertyDescriptor, locale, createDecimalFormat(propertyDescriptor,
            locale)));
!!!325255.java!!!	createDurationDataType(inout propertyDescriptor : IDurationPropertyDescriptor, inout locale : Locale, inout formatter : DurationFormatter) : ULCDurationDataType

    ULCDurationDataType durationDataType = durationDataTypeFactory
        .getTranslationDataType(locale);
    return durationDataType;
!!!325383.java!!!	createDurationFormatter(inout propertyDescriptor : IDurationPropertyDescriptor, inout locale : Locale) : DurationFormatter

    return new DurationFormatter(locale);
!!!325511.java!!!	createDurationPropertyView(inout propertyDescriptor : IDurationPropertyDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    ULCTextField viewComponent = createULCTextField();
    DurationFormatter formatter = createDurationFormatter(propertyDescriptor,
        locale);
    viewComponent.setDataType(createDurationDataType(propertyDescriptor,
        locale, formatter));
    ULCTextFieldConnector connector = new ULCTextFieldConnector(
        propertyDescriptor.getName(), viewComponent);
    connector.setExceptionHandler(actionHandler);
    adjustSizes(viewComponent, formatter,
        getDurationTemplateValue(propertyDescriptor));
    return constructView(viewComponent, null, connector);
!!!325639.java!!!	createDurationTableCellRenderer(in column : int, inout propertyDescriptor : IDurationPropertyDescriptor, inout locale : Locale) : ITableCellRenderer

    return new FormattedTableCellRenderer(column, createDurationDataType(
        propertyDescriptor, locale, createDurationFormatter(propertyDescriptor,
            locale)));
!!!325767.java!!!	createEnumerationPropertyView(inout propertyDescriptor : IEnumerationPropertyDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    ULCComboBox viewComponent = createULCComboBox();
    for (String enumElement : propertyDescriptor.getEnumerationValues()) {
      viewComponent.addItem(enumElement);
    }
    viewComponent.setRenderer(new TranslatedEnumerationListCellRenderer(
        propertyDescriptor, locale));
    adjustSizes(viewComponent, null, getEnumerationTemplateValue(
        propertyDescriptor, locale),
        ClientContext.getScreenResolution() * 2 / 6);
    ULCComboBoxConnector connector = new ULCComboBoxConnector(
        propertyDescriptor.getName(), viewComponent);
    connector.setExceptionHandler(actionHandler);
    return constructView(viewComponent, null, connector);
!!!325895.java!!!	createEnumerationTableCellRenderer(in column : int, inout propertyDescriptor : IEnumerationPropertyDescriptor, inout locale : Locale) : ITableCellRenderer

    return new TranslatedEnumerationTableCellRenderer(column,
        propertyDescriptor, locale);
!!!326023.java!!!	createEvenGridView(inout viewDescriptor : IEvenGridViewDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : ICompositeView

    ULCGridLayoutPane viewComponent = createGridLayoutPane();
    BasicCompositeView<ULCComponent> view = constructCompositeView(
        viewComponent, viewDescriptor);
    List<IView<ULCComponent>> childrenViews = new ArrayList<IView<ULCComponent>>();

    switch (viewDescriptor.getDrivingDimension()) {
      case IEvenGridViewDescriptor.ROW:
        viewComponent.setColumns(viewDescriptor.getDrivingDimensionCellCount());
        viewComponent.setRows(0);
        break;
      case IEvenGridViewDescriptor.COLUMN:
        viewComponent.setRows(viewDescriptor.getDrivingDimensionCellCount());
        viewComponent.setColumns(0);
        break;
      default:
        break;
    }
    viewComponent.setHgap(5);
    viewComponent.setVgap(5);

    for (IViewDescriptor childViewDescriptor : viewDescriptor
        .getChildViewDescriptors()) {
      IView<ULCComponent> childView = createView(childViewDescriptor,
          actionHandler, locale);
      viewComponent.add(childView.getPeer());
      childrenViews.add(childView);
    }
    view.setChildren(childrenViews);
    return view;
!!!326151.java!!!	createFormatter(inout format : Format) : IFormatter

    return new FormatAdapter(format);
!!!326279.java!!!	createFormatter(inout propertyDescriptor : IPropertyDescriptor, inout locale : Locale) : IFormatter

    if (propertyDescriptor instanceof IDatePropertyDescriptor) {
      return createDateFormatter((IDatePropertyDescriptor) propertyDescriptor,
          locale);
    } else if (propertyDescriptor instanceof ITimePropertyDescriptor) {
      return createTimeFormatter((ITimePropertyDescriptor) propertyDescriptor,
          locale);
    } else if (propertyDescriptor instanceof IDurationPropertyDescriptor) {
      return createDurationFormatter(
          (IDurationPropertyDescriptor) propertyDescriptor, locale);
    } else if (propertyDescriptor instanceof IDecimalPropertyDescriptor) {
      return createDecimalFormatter(
          (IDecimalPropertyDescriptor) propertyDescriptor, locale);
    } else if (propertyDescriptor instanceof IPercentPropertyDescriptor) {
      return createPercentFormatter(
          (IPercentPropertyDescriptor) propertyDescriptor, locale);
    } else if (propertyDescriptor instanceof IIntegerPropertyDescriptor) {
      return createIntegerFormatter(
          (IIntegerPropertyDescriptor) propertyDescriptor, locale);
    }
    return null;
!!!326407.java!!!	createGridBagConstraints(inout viewConstraints : ViewConstraints) : GridBagConstraints

    GridBagConstraints constraints = new GridBagConstraints();
    constraints.setGridX(viewConstraints.getColumn());
    constraints.setGridY(viewConstraints.getRow());
    constraints.setGridWidth(viewConstraints.getWidth());
    constraints.setGridHeight(viewConstraints.getHeight());
    if (viewConstraints.isWidthResizable()) {
      constraints.setWeightX(1.0D);
      if (viewConstraints.isHeightResizable()) {
        constraints.setFill(GridBagConstraints.BOTH);
      } else {
        constraints.setFill(GridBagConstraints.HORIZONTAL);
      }
    }
    if (viewConstraints.isHeightResizable()) {
      constraints.setWeightY(1.0D);
      if (viewConstraints.isWidthResizable()) {
        constraints.setFill(GridBagConstraints.BOTH);
      } else {
        constraints.setFill(GridBagConstraints.VERTICAL);
      }
    }
    return constraints;
!!!326535.java!!!	createGridView(inout viewDescriptor : IGridViewDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : ICompositeView

    ICompositeView<ULCComponent> view = null;
    if (viewDescriptor instanceof IEvenGridViewDescriptor) {
      view = createEvenGridView((IEvenGridViewDescriptor) viewDescriptor,
          actionHandler, locale);
    } else if (viewDescriptor instanceof IConstrainedGridViewDescriptor) {
      view = createConstrainedGridView(
          (IConstrainedGridViewDescriptor) viewDescriptor, actionHandler,
          locale);
    }
    return view;
!!!326663.java!!!	createImageView(inout viewDescriptor : IImageViewDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    ULCLabel imageLabel = createULCLabel();
    imageLabel.setHorizontalAlignment(IDefaults.CENTER);
    ULCImageConnector connector = new ULCImageConnector(viewDescriptor
        .getModelDescriptor().getName(), imageLabel);
    connector.setExceptionHandler(actionHandler);
    ULCBorderLayoutPane viewComponent = createBorderLayoutPane();
    IView<ULCComponent> view = constructView(viewComponent, viewDescriptor,
        connector);
    ULCScrollPane scrollPane = createULCScrollPane();
    scrollPane.setViewPortView(imageLabel);
    viewComponent.add(scrollPane, ULCBorderLayoutPane.CENTER);
    return view;
!!!326791.java!!!	createIntegerDataType(inout propertyDescriptor : IIntegerPropertyDescriptor, inout locale : Locale, inout format : NumberFormat) : ULCNumberDataType

    ULCNumberDataType numberDataType = new ULCNumberDataType(locale);
    numberDataType.setInteger(true);
    numberDataType.setMin(propertyDescriptor.getMinValue());
    numberDataType.setMax(propertyDescriptor.getMaxValue());
    numberDataType.setMaxFractionDigits(0);
    numberDataType.setMinFractionDigits(0);
    numberDataType.setGroupingUsed(format.isGroupingUsed());
    return numberDataType;
!!!326919.java!!!	createIntegerFormat(inout propertyDescriptor : IIntegerPropertyDescriptor, inout locale : Locale) : NumberFormat

    return NumberFormat.getIntegerInstance(locale);
!!!327047.java!!!	createIntegerFormatter(inout propertyDescriptor : IIntegerPropertyDescriptor, inout locale : Locale) : IFormatter

    return createFormatter(createIntegerFormat(propertyDescriptor, locale));
!!!327175.java!!!	createIntegerPropertyView(inout propertyDescriptor : IIntegerPropertyDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    ULCTextField viewComponent = createULCTextField();
    NumberFormat format = createIntegerFormat(propertyDescriptor, locale);

    viewComponent.setDataType(createIntegerDataType(propertyDescriptor, locale,
        format));

    ULCTextFieldConnector connector = new ULCTextFieldConnector(
        propertyDescriptor.getName(), viewComponent);
    connector.setExceptionHandler(actionHandler);
    adjustSizes(viewComponent, createFormatter(format),
        getIntegerTemplateValue(propertyDescriptor));
    return constructView(viewComponent, null, connector);
!!!327303.java!!!	createIntegerTableCellRenderer(in column : int, inout propertyDescriptor : IIntegerPropertyDescriptor, inout locale : Locale) : ITableCellRenderer

    return new FormattedTableCellRenderer(column, createIntegerDataType(
        propertyDescriptor, locale, createIntegerFormat(propertyDescriptor,
            locale)));
!!!327431.java!!!	createListView(inout viewDescriptor : IListViewDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    ICollectionDescriptorProvider<?> modelDescriptor = (ICollectionDescriptorProvider<?>) viewDescriptor
        .getModelDescriptor();
    ICompositeValueConnector rowConnectorPrototype = connectorFactory
        .createCompositeValueConnector(modelDescriptor.getName() + "Element",
            viewDescriptor.getRenderedProperty());
    ICollectionConnector connector = connectorFactory
        .createCollectionConnector(modelDescriptor.getName(), mvcBinder,
            rowConnectorPrototype);
    ULCList viewComponent = createULCList();
    ULCScrollPane scrollPane = createULCScrollPane();
    scrollPane.setViewPortView(viewComponent);
    IView<ULCComponent> view = constructView(scrollPane, viewDescriptor,
        connector);

    if (viewDescriptor.getRenderedProperty() != null) {
      IValueConnector cellConnector = createColumnConnector(viewDescriptor
          .getRenderedProperty(), modelDescriptor.getCollectionDescriptor()
          .getElementDescriptor());
      rowConnectorPrototype.addChildConnector(cellConnector);
    }
    viewComponent.setCellRenderer(new EvenOddListCellRenderer());

    CollectionConnectorListModel listModel = new CollectionConnectorListModel(
        connector);
    viewComponent.setModel(listModel);
    listSelectionModelBinder.bindSelectionModel(connector, viewComponent
        .getSelectionModel(), null);
    return view;
!!!327559.java!!!	createNestingView(inout viewDescriptor : INestingViewDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView


    ICompositeValueConnector connector = connectorFactory
        .createCompositeValueConnector(viewDescriptor.getModelDescriptor()
            .getName(), null);
    ULCBorderLayoutPane viewComponent = createBorderLayoutPane();
    IView<ULCComponent> view = constructView(viewComponent, viewDescriptor,
        connector);
    IView<ULCComponent> nestedView = createView(viewDescriptor
        .getNestedViewDescriptor(), actionHandler, locale);
    connector.addChildConnector(nestedView.getConnector());
    viewComponent.add(nestedView.getPeer(), ULCBorderLayoutPane.CENTER);
    return view;
!!!327687.java!!!	createNodeGroupConnector(inout viewDescriptor : ITreeViewDescriptor, inout subtreeViewDescriptor : ITreeLevelDescriptor, in depth : int) : ICollectionConnectorProvider

    if (subtreeViewDescriptor instanceof ICompositeTreeLevelDescriptor) {
      return createCompositeNodeGroupConnector(viewDescriptor,
          (ICompositeTreeLevelDescriptor) subtreeViewDescriptor, depth);
    } else if (subtreeViewDescriptor instanceof ISimpleTreeLevelDescriptor) {
      return createSimpleNodeGroupConnector(viewDescriptor,
          (ISimpleTreeLevelDescriptor) subtreeViewDescriptor, depth);
    }
    return null;
!!!327815.java!!!	createNumberPropertyView(inout propertyDescriptor : INumberPropertyDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    IView<ULCComponent> view = null;
    if (propertyDescriptor instanceof IIntegerPropertyDescriptor) {
      view = createIntegerPropertyView(
          (IIntegerPropertyDescriptor) propertyDescriptor, actionHandler,
          locale);
    } else if (propertyDescriptor instanceof IDecimalPropertyDescriptor) {
      view = createDecimalPropertyView(
          (IDecimalPropertyDescriptor) propertyDescriptor, actionHandler,
          locale);
    }
    return view;
!!!327943.java!!!	createNumberTableCellRenderer(in column : int, inout propertyDescriptor : INumberPropertyDescriptor, inout locale : Locale) : ITableCellRenderer

    ITableCellRenderer cellRenderer = null;
    if (propertyDescriptor instanceof IIntegerPropertyDescriptor) {
      cellRenderer = createIntegerTableCellRenderer(column,
          (IIntegerPropertyDescriptor) propertyDescriptor, locale);
    } else if (propertyDescriptor instanceof IDecimalPropertyDescriptor) {
      cellRenderer = createDecimalTableCellRenderer(column,
          (IDecimalPropertyDescriptor) propertyDescriptor, locale);
    }
    return cellRenderer;
!!!328071.java!!!	createPasswordPropertyView(inout propertyDescriptor : IPasswordPropertyDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    ULCPasswordField viewComponent = createULCPasswordField();
    ULCPasswordFieldConnector connector = new ULCPasswordFieldConnector(
        propertyDescriptor.getName(), viewComponent);
    connector.setExceptionHandler(actionHandler);
    adjustSizes(viewComponent, null, getStringTemplateValue(propertyDescriptor));
    return constructView(viewComponent, null, connector);
!!!328199.java!!!	createPercentDataType(inout propertyDescriptor : IPercentPropertyDescriptor, inout locale : Locale) : ULCPercentDataType

    ULCPercentDataType percentDataType = new ULCPercentDataType();
    if (propertyDescriptor.getMaxFractionDigit() != null) {
      percentDataType.setFractionalDigits(propertyDescriptor
          .getMaxFractionDigit().intValue());
    }
    return percentDataType;
!!!328327.java!!!	createPercentFormat(inout propertyDescriptor : IPercentPropertyDescriptor, inout locale : Locale) : NumberFormat

    NumberFormat format = NumberFormat.getPercentInstance(locale);
    if (propertyDescriptor.getMaxFractionDigit() != null) {
      format.setMaximumFractionDigits(propertyDescriptor.getMaxFractionDigit()
          .intValue());
    } else {
      format.setMaximumFractionDigits(DEF_DISP_MAX_FRACTION_DIGIT);
    }
    format.setMinimumFractionDigits(format.getMaximumFractionDigits());
    return format;
!!!328455.java!!!	createPercentFormatter(inout propertyDescriptor : IPercentPropertyDescriptor, inout locale : Locale) : IFormatter

    return createFormatter(createPercentFormat(propertyDescriptor, locale));
!!!328583.java!!!	createPercentPropertyView(inout propertyDescriptor : IPercentPropertyDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    ULCTextField viewComponent = createULCTextField();
    NumberFormat format = createPercentFormat(propertyDescriptor, locale);

    viewComponent
        .setDataType(createPercentDataType(propertyDescriptor, locale));
    ULCPercentFieldConnector connector = new ULCPercentFieldConnector(
        propertyDescriptor.getName(), viewComponent);
    connector.setExceptionHandler(actionHandler);
    adjustSizes(viewComponent, createFormatter(format),
        getPercentTemplateValue(propertyDescriptor));
    return constructView(viewComponent, null, connector);
!!!328711.java!!!	createPercentTableCellRenderer(in column : int, inout propertyDescriptor : IPercentPropertyDescriptor, inout locale : Locale) : ITableCellRenderer

    return new FormattedTableCellRenderer(column, createPercentDataType(
        propertyDescriptor, locale));
!!!328839.java!!!	createPopupMenu(inout sourceComponent : ULCComponent, inout view : IView, inout actionHandler : IActionHandler, inout locale : Locale) : ULCPopupMenu

    if (sourceComponent instanceof ULCExtendedTable) {
      return createULCTablePopupMenu((ULCExtendedTable) sourceComponent, view,
          actionHandler, locale);
    }
    return null;
!!!328967.java!!!	createPropertyLabel(inout propertyDescriptor : IPropertyDescriptor, inout propertyComponent : ULCComponent, inout locale : Locale) : ULCLabel

    ULCLabel propertyLabel = createULCLabel();
    StringBuffer labelText = new StringBuffer(propertyDescriptor.getI18nName(
        getTranslationProvider(), locale));
    if (propertyDescriptor.isMandatory()) {
      labelText.append("*");
      propertyLabel.setForeground(Color.red);
    }
    propertyLabel.setText(labelText.toString());
    propertyLabel.setLabelFor(propertyComponent);

    return propertyLabel;
!!!329095.java!!!	createPropertyView(inout propertyDescriptor : IPropertyDescriptor, inout renderedChildProperties : List<String>, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    IView<ULCComponent> view = null;
    if (propertyDescriptor instanceof IBooleanPropertyDescriptor) {
      view = createBooleanPropertyView(
          (IBooleanPropertyDescriptor) propertyDescriptor, actionHandler,
          locale);
    } else if (propertyDescriptor instanceof IDatePropertyDescriptor) {
      view = createDatePropertyView(
          (IDatePropertyDescriptor) propertyDescriptor, actionHandler, locale);
    } else if (propertyDescriptor instanceof ITimePropertyDescriptor) {
      view = createTimePropertyView(
          (ITimePropertyDescriptor) propertyDescriptor, actionHandler, locale);
    } else if (propertyDescriptor instanceof IDurationPropertyDescriptor) {
      view = createDurationPropertyView(
          (IDurationPropertyDescriptor) propertyDescriptor, actionHandler,
          locale);
    } else if (propertyDescriptor instanceof IEnumerationPropertyDescriptor) {
      view = createEnumerationPropertyView(
          (IEnumerationPropertyDescriptor) propertyDescriptor, actionHandler,
          locale);
    } else if (propertyDescriptor instanceof INumberPropertyDescriptor) {
      view = createNumberPropertyView(
          (INumberPropertyDescriptor) propertyDescriptor, actionHandler, locale);
    } else if (propertyDescriptor instanceof IRelationshipEndPropertyDescriptor) {
      view = createRelationshipEndPropertyView(
          (IRelationshipEndPropertyDescriptor) propertyDescriptor,
          renderedChildProperties, actionHandler, locale);
    } else if (propertyDescriptor instanceof IStringPropertyDescriptor) {
      view = createStringPropertyView(
          (IStringPropertyDescriptor) propertyDescriptor, actionHandler, locale);
    } else if (propertyDescriptor instanceof IBinaryPropertyDescriptor) {
      view = createBinaryPropertyView(
          (IBinaryPropertyDescriptor) propertyDescriptor, actionHandler, locale);
    } else if (propertyDescriptor instanceof IColorPropertyDescriptor) {
      view = createColorPropertyView(
          (IColorPropertyDescriptor) propertyDescriptor, actionHandler, locale);
    }
    if (view != null && propertyDescriptor.getDescription() != null) {
      view.getPeer().setToolTipText(
          propertyDescriptor.getI18nDescription(getTranslationProvider(),
              locale)
              + TOOLTIP_ELLIPSIS);
    }
    return view;
!!!329223.java!!!	createPropertyView(inout viewDescriptor : IPropertyViewDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    IView<ULCComponent> view = createPropertyView(
        (IPropertyDescriptor) viewDescriptor.getModelDescriptor(),
        viewDescriptor.getRenderedChildProperties(), actionHandler, locale);
    return constructView(view.getPeer(), viewDescriptor, view.getConnector());
!!!329351.java!!!	createReferencePropertyView(inout propertyDescriptor : IReferencePropertyDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    ULCActionField viewComponent = createULCActionField(true);
    ULCReferenceFieldConnector connector = new ULCReferenceFieldConnector(
        propertyDescriptor.getName(), viewComponent);
    connector.setToStringPropertyConnector(new BasicValueConnector(
        propertyDescriptor.getComponentDescriptor().getToStringProperty()));
    connector.setExceptionHandler(actionHandler);
    IAction fieldAction = actionFactory.createAction(lovAction, actionHandler,
        viewComponent, propertyDescriptor, connector, locale);
    fieldAction.putValue(IAction.NAME, getTranslationProvider().getTranslation(
        "lov.element.name",
        new Object[] {propertyDescriptor.getReferencedDescriptor().getI18nName(
            translationProvider, locale)}, locale));
    fieldAction.putValue(IAction.SHORT_DESCRIPTION, getTranslationProvider()
        .getTranslation(
            "lov.element.description",
            new Object[] {propertyDescriptor.getReferencedDescriptor()
                .getI18nName(translationProvider, locale)}, locale)
        + TOOLTIP_ELLIPSIS);
    if (propertyDescriptor.getReferencedDescriptor().getIconImageURL() != null) {
      fieldAction.putValue(IAction.SMALL_ICON, iconFactory.getIcon(
          propertyDescriptor.getReferencedDescriptor().getIconImageURL(),
          IIconFactory.TINY_ICON_SIZE));
    }
    viewComponent.setActions(Collections.singletonList(fieldAction));
    adjustSizes(viewComponent, null, null);
    return constructView(viewComponent, null, connector);
!!!329479.java!!!	createReferenceTableCellRenderer(inout propertyDescriptor : IReferencePropertyDescriptor, inout locale : Locale) : ITableCellRenderer

    return null;
!!!329607.java!!!	createRelationshipEndPropertyView(inout propertyDescriptor : IRelationshipEndPropertyDescriptor, inout renderedChildProperties : List<String>, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    IView<ULCComponent> view = null;

    if (propertyDescriptor instanceof IReferencePropertyDescriptor) {
      view = createReferencePropertyView(
          (IReferencePropertyDescriptor<?>) propertyDescriptor, actionHandler,
          locale);
    } else if (propertyDescriptor instanceof ICollectionPropertyDescriptor) {
      view = createCollectionPropertyView(
          (ICollectionPropertyDescriptor<?>) propertyDescriptor,
          renderedChildProperties, actionHandler, locale);
    }
    return view;
!!!329735.java!!!	createRelationshipEndTableCellRenderer(inout propertyDescriptor : IRelationshipEndPropertyDescriptor, inout locale : Locale) : ITableCellRenderer

    ITableCellRenderer cellRenderer = null;

    if (propertyDescriptor instanceof IReferencePropertyDescriptor) {
      cellRenderer = createReferenceTableCellRenderer(
          (IReferencePropertyDescriptor<?>) propertyDescriptor, locale);
    } else if (propertyDescriptor instanceof ICollectionPropertyDescriptor) {
      cellRenderer = createCollectionTableCellRenderer(
          (ICollectionPropertyDescriptor<?>) propertyDescriptor, locale);
    }
    return cellRenderer;
!!!329863.java!!!	createSimpleNodeGroupConnector(inout viewDescriptor : ITreeViewDescriptor, inout subtreeViewDescriptor : ISimpleTreeLevelDescriptor, in depth : int) : ICollectionConnectorProvider

    ICollectionPropertyDescriptor<?> nodeGroupModelDescriptor = (ICollectionPropertyDescriptor<?>) subtreeViewDescriptor
        .getNodeGroupDescriptor().getModelDescriptor();
    IConfigurableCollectionConnectorProvider nodeGroupPrototypeConnector = connectorFactory
        .createConfigurableCollectionConnectorProvider(nodeGroupModelDescriptor
            .getName()
            + "Element", subtreeViewDescriptor.getNodeGroupDescriptor()
            .getRenderedProperty());
    if (subtreeViewDescriptor.getChildDescriptor() != null
        && depth < viewDescriptor.getMaxDepth()) {
      ICollectionConnectorProvider childConnector = createNodeGroupConnector(
          viewDescriptor, subtreeViewDescriptor.getChildDescriptor(), depth + 1);
      nodeGroupPrototypeConnector.addChildConnector(childConnector);
      nodeGroupPrototypeConnector
          .setCollectionConnectorProvider(childConnector);
    }
    ICollectionConnector nodeGroupCollectionConnector = connectorFactory
        .createCollectionConnector(nodeGroupModelDescriptor.getName(),
            mvcBinder, nodeGroupPrototypeConnector);
    return nodeGroupCollectionConnector;
!!!329991.java!!!	createSourceCodePropertyView(inout propertyDescriptor : ISourceCodePropertyDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    ULCJEditTextArea viewComponent = createULCJEditTextArea(propertyDescriptor
        .getLanguage());
    ULCJEditTextAreaConnector connector = new ULCJEditTextAreaConnector(
        propertyDescriptor.getName(), viewComponent);
    connector.setExceptionHandler(actionHandler);
    return constructView(viewComponent, null, connector);
!!!330119.java!!!	createSplitView(inout viewDescriptor : ISplitViewDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : ICompositeView

    ULCSplitPane viewComponent = createULCSplitPane();
    BasicCompositeView<ULCComponent> view = constructCompositeView(
        viewComponent, viewDescriptor);
    List<IView<ULCComponent>> childrenViews = new ArrayList<IView<ULCComponent>>();

    switch (viewDescriptor.getOrientation()) {
      case ISplitViewDescriptor.HORIZONTAL:
        viewComponent.setOrientation(ULCSplitPane.HORIZONTAL_SPLIT);
        break;
      case ISplitViewDescriptor.VERTICAL:
        viewComponent.setOrientation(ULCSplitPane.VERTICAL_SPLIT);
        break;
      default:
        break;
    }

    if (viewDescriptor.getLeftTopViewDescriptor() != null) {
      IView<ULCComponent> leftTopView = createView(viewDescriptor
          .getLeftTopViewDescriptor(), actionHandler, locale);
      viewComponent.setLeftComponent(leftTopView.getPeer());
      childrenViews.add(leftTopView);
    }
    if (viewDescriptor.getRightBottomViewDescriptor() != null) {
      IView<ULCComponent> rightBottomView = createView(viewDescriptor
          .getRightBottomViewDescriptor(), actionHandler, locale);
      viewComponent.setRightComponent(rightBottomView.getPeer());
      childrenViews.add(rightBottomView);
    }
    view.setChildren(childrenViews);
    return view;
!!!330247.java!!!	createStringPropertyView(inout propertyDescriptor : IStringPropertyDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    if (propertyDescriptor instanceof IPasswordPropertyDescriptor) {
      return createPasswordPropertyView(
          (IPasswordPropertyDescriptor) propertyDescriptor, actionHandler,
          locale);
    }
    if (propertyDescriptor instanceof ISourceCodePropertyDescriptor) {
      return createSourceCodePropertyView(
          (ISourceCodePropertyDescriptor) propertyDescriptor, actionHandler,
          locale);
    } else if (propertyDescriptor instanceof ITextPropertyDescriptor) {
      return createTextPropertyView(
          (ITextPropertyDescriptor) propertyDescriptor, actionHandler, locale);
    }
    ULCTextField viewComponent = createULCTextField();
    ULCTextFieldConnector connector = new ULCTextFieldConnector(
        propertyDescriptor.getName(), viewComponent);
    connector.setExceptionHandler(actionHandler);
    adjustSizes(viewComponent, null, getStringTemplateValue(propertyDescriptor));
    return constructView(viewComponent, null, connector);
!!!330375.java!!!	createStringTableCellRenderer(in column : int, inout propertyDescriptor : IStringPropertyDescriptor, inout locale : Locale) : ITableCellRenderer

    return new FormattedTableCellRenderer(column, null);
!!!330503.java!!!	createTableCellRenderer(in column : int, inout propertyDescriptor : IPropertyDescriptor, inout locale : Locale) : ITableCellRenderer

    ITableCellRenderer cellRenderer = null;
    if (propertyDescriptor instanceof IBooleanPropertyDescriptor) {
      cellRenderer = createBooleanTableCellRenderer(
          (IBooleanPropertyDescriptor) propertyDescriptor, locale);
    } else if (propertyDescriptor instanceof IDatePropertyDescriptor) {
      cellRenderer = createDateTableCellRenderer(column,
          (IDatePropertyDescriptor) propertyDescriptor, locale);
    } else if (propertyDescriptor instanceof ITimePropertyDescriptor) {
      cellRenderer = createTimeTableCellRenderer(column,
          (ITimePropertyDescriptor) propertyDescriptor, locale);
    } else if (propertyDescriptor instanceof IDurationPropertyDescriptor) {
      cellRenderer = createDurationTableCellRenderer(column,
          (IDurationPropertyDescriptor) propertyDescriptor, locale);
    } else if (propertyDescriptor instanceof IEnumerationPropertyDescriptor) {
      cellRenderer = createEnumerationTableCellRenderer(column,
          (IEnumerationPropertyDescriptor) propertyDescriptor, locale);
    } else if (propertyDescriptor instanceof INumberPropertyDescriptor) {
      cellRenderer = createNumberTableCellRenderer(column,
          (INumberPropertyDescriptor) propertyDescriptor, locale);
    } else if (propertyDescriptor instanceof IRelationshipEndPropertyDescriptor) {
      cellRenderer = createRelationshipEndTableCellRenderer(
          (IRelationshipEndPropertyDescriptor) propertyDescriptor, locale);
    } else if (propertyDescriptor instanceof IStringPropertyDescriptor) {
      cellRenderer = createStringTableCellRenderer(column,
          (IStringPropertyDescriptor) propertyDescriptor, locale);
    } else if (propertyDescriptor instanceof IColorPropertyDescriptor) {
      cellRenderer = createColorTableCellRenderer(
          (IColorPropertyDescriptor) propertyDescriptor, locale);
    }
    return cellRenderer;
!!!330631.java!!!	createTableView(inout viewDescriptor : ITableViewDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    ICollectionDescriptorProvider<?> modelDescriptor = ((ICollectionDescriptorProvider<?>) viewDescriptor
        .getModelDescriptor());
    ICompositeValueConnector rowConnectorPrototype = connectorFactory
        .createCompositeValueConnector(modelDescriptor.getName() + "Element",
            modelDescriptor.getCollectionDescriptor().getElementDescriptor()
                .getToStringProperty());
    ICollectionConnector connector = connectorFactory
        .createCollectionConnector(modelDescriptor.getName(), mvcBinder,
            rowConnectorPrototype);
    ULCExtendedTable viewComponent = createULCTable();
    ULCScrollPane scrollPane = createULCScrollPane();
    scrollPane.setViewPortView(viewComponent);
    ULCLabel iconLabel = createULCLabel();
    iconLabel.setIcon(iconFactory.getIcon(modelDescriptor
        .getCollectionDescriptor().getElementDescriptor().getIconImageURL(),
        IIconFactory.TINY_ICON_SIZE));
    iconLabel.setBorder(BorderFactory.createLoweredBevelBorder());
    scrollPane.setCorner(ULCScrollPane.UPPER_RIGHT_CORNER, iconLabel);
    scrollPane
        .setVerticalScrollBarPolicy(ULCScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    IView<ULCComponent> view = constructView(scrollPane, viewDescriptor,
        connector);
    viewComponent
        .setAutoResizeMode(com.ulcjava.base.application.ULCTable.AUTO_RESIZE_OFF);

    Map<String, Class<?>> columnClassesByIds = new HashMap<String, Class<?>>();
    List<String> columnConnectorKeys = new ArrayList<String>();

    for (ISubViewDescriptor columnViewDescriptor : viewDescriptor
        .getColumnViewDescriptors()) {
      String columnId = columnViewDescriptor.getName();
      IValueConnector columnConnector = createColumnConnector(columnId,
          modelDescriptor.getCollectionDescriptor().getElementDescriptor());
      rowConnectorPrototype.addChildConnector(columnConnector);
      IPropertyDescriptor columnModelDescriptor = modelDescriptor
          .getCollectionDescriptor().getElementDescriptor()
          .getPropertyDescriptor(columnId);
      if (columnModelDescriptor instanceof IReferencePropertyDescriptor) {
        columnClassesByIds.put(columnId, String.class);
      } else if (columnModelDescriptor instanceof IBooleanPropertyDescriptor) {
        columnClassesByIds.put(columnId, Boolean.class);
      } else {
        columnClassesByIds.put(columnId, columnModelDescriptor.getModelType());
      }
      columnConnectorKeys.add(columnId);
      if (columnViewDescriptor.getReadabilityGates() != null) {
        for (IGate gate : columnViewDescriptor.getReadabilityGates()) {
          columnConnector.addReadabilityGate(gate.clone());
        }
      }
      if (columnViewDescriptor.getWritabilityGates() != null) {
        for (IGate gate : columnViewDescriptor.getWritabilityGates()) {
          columnConnector.addWritabilityGate(gate.clone());
        }
      }
      columnConnector.setLocallyWritable(!columnViewDescriptor.isReadOnly());
    }
    CollectionConnectorTableModel tableModel = new CollectionConnectorTableModel(
        connector, columnConnectorKeys);
    tableModel.setExceptionHandler(actionHandler);
    tableModel.setColumnClassesByIds(columnClassesByIds);

    TableSorter sorterDecorator = new TableSorter(tableModel, viewComponent
        .getTableHeader());
    java.awt.Dimension iconSize = new java.awt.Dimension(viewComponent
        .getTableHeader().getFont().getSize(), viewComponent.getTableHeader()
        .getFont().getSize());
    sorterDecorator.setUpIcon(iconFactory.getIcon(
        "classpath:images/1uparrow-48x48.png", iconSize));
    sorterDecorator.setDownIcon(iconFactory.getIcon(
        "classpath:images/1downarrow-48x48.png", iconSize));
    sorterDecorator.setColumnComparator(String.class,
        String.CASE_INSENSITIVE_ORDER);
    ClientContext.setModelUpdateMode(sorterDecorator,
        IUlcEventConstants.ASYNCHRONOUS_MODE);
    viewComponent.setModel(sorterDecorator);
    listSelectionModelBinder.bindSelectionModel(connector, viewComponent
        .getSelectionModel(), sorterDecorator);

    int maxColumnSize = computePixelWidth(viewComponent,
        maxColumnCharacterLength);

    for (int i = 0; i < viewDescriptor.getColumnViewDescriptors().size(); i++) {
      ULCTableColumn column = viewComponent.getColumnModel().getColumn(i);
      column.setHeaderRenderer(null);
      String propertyName = viewDescriptor.getColumnViewDescriptors().get(i)
          .getName();
      column.setIdentifier(propertyName);
      IPropertyDescriptor propertyDescriptor = modelDescriptor
          .getCollectionDescriptor().getElementDescriptor()
          .getPropertyDescriptor(propertyName);
      StringBuffer columnName = new StringBuffer(propertyDescriptor
          .getI18nName(getTranslationProvider(), locale));
      if (propertyDescriptor.isMandatory()) {
        columnName.append("*");
      }
      column.setHeaderValue(columnName.toString());
      IView<ULCComponent> editorView = createPropertyView(propertyDescriptor,
          null, actionHandler, locale);
      if (editorView.getPeer() instanceof ULCActionField) {
        ULCActionField actionField = (ULCActionField) editorView.getPeer();
        actionField.setActions(Collections.singletonList(actionField
            .getActions().get(0)));
      }
      if (editorView.getConnector().getParentConnector() == null) {
        editorView.getConnector().setParentConnector(connector);
      }
      if (editorView.getPeer() instanceof IEditorComponent) {
        UlcViewCellEditorAdapter editor = new UlcViewCellEditorAdapter(
            editorView);
        column.setCellEditor(editor);
      }
      ITableCellRenderer cellRenderer = createTableCellRenderer(column
          .getModelIndex(), propertyDescriptor, locale);
      if (cellRenderer != null) {
        column.setCellRenderer(cellRenderer);
      } else {
        column.setCellRenderer(new EvenOddTableCellRenderer(column
            .getModelIndex()));
      }
      int minHeaderWidth = computePixelWidth(viewComponent, columnName.length());
      if (propertyDescriptor instanceof IBooleanPropertyDescriptor
          || propertyDescriptor instanceof IBinaryPropertyDescriptor) {
        column.setPreferredWidth(Math.max(computePixelWidth(viewComponent, 2),
            minHeaderWidth));
        if (editorView.getPeer() instanceof ULCAbstractButton) {
          ((ULCAbstractButton) editorView.getPeer())
              .setHorizontalAlignment(IDefaults.CENTER);
        } else if (editorView.getPeer() instanceof ULCLabel) {
          ((ULCLabel) editorView.getPeer())
              .setHorizontalAlignment(IDefaults.CENTER);
        }
      } else if (propertyDescriptor instanceof IEnumerationPropertyDescriptor) {
        column.setPreferredWidth(Math.max(computePixelWidth(viewComponent,
            getEnumerationTemplateValue(
                (IEnumerationPropertyDescriptor) propertyDescriptor, locale)
                .length()), minHeaderWidth));
      } else {
        column.setPreferredWidth(Math.max(
            Math.min(computePixelWidth(viewComponent, getFormatLength(
                createFormatter(propertyDescriptor, locale),
                getTemplateValue(propertyDescriptor))), maxColumnSize),
            minHeaderWidth));
      }
    }
    viewComponent.setComponentPopupMenu(createPopupMenu(viewComponent, view,
        actionHandler, locale));
    return view;
!!!330759.java!!!	createTabView(inout viewDescriptor : ITabViewDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : ICompositeView

    ULCTabbedPane viewComponent = createULCTabbedPane();
    BasicCompositeView<ULCComponent> view = constructCompositeView(
        viewComponent, viewDescriptor);
    List<IView<ULCComponent>> childrenViews = new ArrayList<IView<ULCComponent>>();

    for (IViewDescriptor childViewDescriptor : viewDescriptor
        .getChildViewDescriptors()) {
      IView<ULCComponent> childView = createView(childViewDescriptor,
          actionHandler, locale);
      ULCIcon childIcon = iconFactory.getIcon(childViewDescriptor
          .getIconImageURL(), IIconFactory.SMALL_ICON_SIZE);
      if (childViewDescriptor.getDescription() != null) {
        viewComponent.addTab(childViewDescriptor.getI18nName(
            getTranslationProvider(), locale), childIcon, childView.getPeer(),
            childViewDescriptor.getI18nDescription(getTranslationProvider(),
                locale)
                + TOOLTIP_ELLIPSIS);
      } else {
        viewComponent.addTab(childViewDescriptor.getI18nName(
            getTranslationProvider(), locale), childIcon, childView.getPeer());
      }
      childrenViews.add(childView);
    }
    view.setChildren(childrenViews);
    return view;
!!!330887.java!!!	createTextPropertyView(inout propertyDescriptor : ITextPropertyDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    ULCTextArea viewComponent = createULCTextArea();
    viewComponent.setLineWrap(true);
    ULCScrollPane scrollPane = createULCScrollPane();
    scrollPane.setViewPortView(viewComponent);
    scrollPane
        .setHorizontalScrollBarPolicy(ULCScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
    ULCTextAreaConnector connector = new ULCTextAreaConnector(
        propertyDescriptor.getName(), viewComponent);
    connector.setExceptionHandler(actionHandler);
    return constructView(scrollPane, null, connector);
!!!331015.java!!!	createTimeDataType(inout propertyDescriptor : ITimePropertyDescriptor, inout locale : Locale, inout format : SimpleDateFormat) : ULCDateDataType

    return new ULCDateDataType(format.toPattern());
!!!331143.java!!!	createTimeFormat(inout propertyDescriptor : ITimePropertyDescriptor, inout locale : Locale) : SimpleDateFormat

    DateFormat format = DateFormat.getTimeInstance(DateFormat.SHORT, locale);
    return (SimpleDateFormat) format;
!!!331271.java!!!	createTimeFormatter(inout propertyDescriptor : ITimePropertyDescriptor, inout locale : Locale) : IFormatter

    return createFormatter(createTimeFormat(propertyDescriptor, locale));
!!!331399.java!!!	createTimePropertyView(inout propertyDescriptor : ITimePropertyDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView

    ULCTextField viewComponent = createULCTextField();
    SimpleDateFormat format = createTimeFormat(propertyDescriptor, locale);

    viewComponent.setDataType(createTimeDataType(propertyDescriptor, locale,
        format));

    ULCTextFieldConnector connector = new ULCTextFieldConnector(
        propertyDescriptor.getName(), viewComponent);
    connector.setExceptionHandler(actionHandler);
    adjustSizes(viewComponent, createFormatter(format),
        getTimeTemplateValue(propertyDescriptor));
    return constructView(viewComponent, null, connector);
!!!331527.java!!!	createTimeTableCellRenderer(in column : int, inout propertyDescriptor : ITimePropertyDescriptor, inout locale : Locale) : ITableCellRenderer

    return new FormattedTableCellRenderer(column, createTimeDataType(
        propertyDescriptor, locale,
        createTimeFormat(propertyDescriptor, locale)));
!!!331655.java!!!	createTreeView(inout viewDescriptor : ITreeViewDescriptor, inout actionHandler : IActionHandler, inout locale : Locale) : IView


    ITreeLevelDescriptor rootDescriptor = viewDescriptor
        .getRootSubtreeDescriptor();
    ICompositeValueConnector connector = null;
    if (rootDescriptor instanceof ICompositeTreeLevelDescriptor) {
      IConfigurableCollectionConnectorListProvider compositeConnector = connectorFactory
          .createConfigurableCollectionConnectorListProvider(
              ModelRefPropertyConnector.THIS_PROPERTY,
              ((ICompositeTreeLevelDescriptor) rootDescriptor)
                  .getNodeGroupDescriptor().getRenderedProperty());
      List<ICollectionConnectorProvider> subtreeConnectors = new ArrayList<ICollectionConnectorProvider>();
      if (((ICompositeTreeLevelDescriptor) rootDescriptor)
          .getChildrenDescriptors() != null) {
        for (ITreeLevelDescriptor subtreeViewDescriptor : ((ICompositeTreeLevelDescriptor) rootDescriptor)
            .getChildrenDescriptors()) {
          ICollectionConnectorProvider subtreeConnector = createNodeGroupConnector(
              viewDescriptor, subtreeViewDescriptor, 0);
          compositeConnector.addChildConnector(subtreeConnector);
          subtreeConnectors.add(subtreeConnector);
        }
      }
      compositeConnector.setCollectionConnectorProviders(subtreeConnectors);
      connector = compositeConnector;
    } else if (rootDescriptor instanceof ISimpleTreeLevelDescriptor) {
      IConfigurableCollectionConnectorProvider simpleConnector = connectorFactory
          .createConfigurableCollectionConnectorProvider(
              ModelRefPropertyConnector.THIS_PROPERTY,
              ((ISimpleTreeLevelDescriptor) rootDescriptor)
                  .getNodeGroupDescriptor().getRenderedProperty());
      if (((ISimpleTreeLevelDescriptor) rootDescriptor).getChildDescriptor() != null) {
        ICollectionConnectorProvider subtreeConnector = createNodeGroupConnector(
            viewDescriptor, ((ISimpleTreeLevelDescriptor) rootDescriptor)
                .getChildDescriptor(), 0);
        simpleConnector.addChildConnector(subtreeConnector);
        simpleConnector.setCollectionConnectorProvider(subtreeConnector);
      }
      connector = simpleConnector;
    }

    if (connector instanceof IConnectorSelector) {
      ((IConnectorSelector) connector).setTracksChildrenSelection(true);
    }

    ULCExtendedTree viewComponent = createULCTree();
    ConnectorHierarchyTreeModel treeModel = new ConnectorHierarchyTreeModel(
        connector);

    // TODO tabletree mgt
    // ULCTableTree viewComponent = createULCTableTree();
    // ConnectorHierarchyTableTreeModel treeModel = new
    // ConnectorHierarchyTableTreeModel(
    // connector, viewComponent);
    // List<String> columnIds = new ArrayList<String>();
    // columnIds.add("text");
    // columnIds.add("text");
    // treeModel.setColumnConnectorKeys(columnIds);
    // Map<String, Class> columnClassesByIds = new HashMap<String, Class>();
    // columnClassesByIds.put("text", String.class);
    // treeModel.setColumnClassesByIds(columnClassesByIds);

    viewComponent.getSelectionModel().setSelectionMode(
        ULCTreeSelectionModel.SINGLE_TREE_SELECTION);
    viewComponent.setModel(treeModel);
    viewComponent.setCellRenderer(new ConnectorTreeCellRenderer(viewDescriptor,
        locale));
    treeSelectionModelBinder.bindSelectionModel(connector, viewComponent);
    ULCScrollPane scrollPane = createULCScrollPane();
    scrollPane.setViewPortView(viewComponent);
    IView<ULCComponent> view = constructView(scrollPane, viewDescriptor,
        connector);
    viewComponent.setPopupFactory(new TreeNodePopupFactory(viewComponent, view,
        actionHandler, locale));
    return view;
!!!331783.java!!!	createUlcColor(inout color : java.awt.Color) : Color

    return new Color(color.getRed(), color.getGreen(), color.getBlue(), color
        .getAlpha());
!!!331911.java!!!	createUlcFont(inout font : java.awt.Font) : Font

    return new Font(font.getName(), font.getStyle(), font.getSize());
!!!332039.java!!!	createULCPopupMenu(inout sourceComponent : ULCComponent, inout actionMap : ActionMap, inout modelDescriptor : IModelDescriptor, inout viewDescriptor : IViewDescriptor, inout viewConnector : IValueConnector, inout actionHandler : IActionHandler, inout locale : Locale) : ULCPopupMenu

    ULCPopupMenu popupMenu = createULCPopupMenu();
    ULCLabel titleLabel = createULCLabel();
    titleLabel.setText(viewDescriptor.getI18nName(getTranslationProvider(),
        locale));
    titleLabel.setIcon(iconFactory.getIcon(viewDescriptor.getIconImageURL(),
        IIconFactory.TINY_ICON_SIZE));
    titleLabel.setHorizontalAlignment(IDefaults.CENTER);
    popupMenu.add(titleLabel);
    popupMenu.addSeparator();
    for (Iterator<ActionList> iter = actionMap.getActionLists().iterator(); iter
        .hasNext();) {
      ActionList nextActionList = iter.next();
      for (IDisplayableAction action : nextActionList.getActions()) {
        IAction ulcAction = actionFactory.createAction(action, actionHandler,
            sourceComponent, modelDescriptor, viewConnector, locale);
        ULCMenuItem actionItem = createULCMenuItem();
        actionItem.setAction(ulcAction);
        popupMenu.add(actionItem);
      }
      if (iter.hasNext()) {
        popupMenu.addSeparator();
      }
    }
    return popupMenu;
!!!332167.java!!!	createULCTablePopupMenu(inout table : ULCExtendedTable, inout tableView : IView, inout actionHandler : IActionHandler, inout locale : Locale) : ULCPopupMenu


    IValueConnector elementConnector = tableView.getConnector();
    IModelDescriptor modelDescriptor = tableView.getDescriptor()
        .getModelDescriptor();
    ActionMap actionMap = ((ICollectionViewDescriptor) tableView
        .getDescriptor()).getActions();

    if (actionMap == null) {
      return null;
    }

    return createULCPopupMenu(table, actionMap, modelDescriptor, tableView
        .getDescriptor(), elementConnector, actionHandler, locale);
!!!332295.java!!!	createULCTreePopupMenu(inout tree : ULCTree, inout treeView : IView, inout path : TreePath, inout actionHandler : IActionHandler, inout locale : Locale) : ULCPopupMenu


    if (path == null) {
      return null;
    }

    if (!tree.isPathSelected(path)) {
      tree.setSelectionPath(path);
    }
    if (path.getLastPathComponent() instanceof ICollectionConnector) {
      TreePath[] allNodePaths = new TreePath[((ICollectionConnector) path
          .getLastPathComponent()).getChildConnectorCount()];
      for (int i = 0; i < allNodePaths.length; i++) {
        allNodePaths[i] = path.pathByAddingChild(((ICollectionConnector) path
            .getLastPathComponent()).getChildConnector(i));
      }
      tree.addSelectionPaths(allNodePaths);
    }

    IValueConnector viewConnector = (IValueConnector) path
        .getLastPathComponent();
    IModelDescriptor modelDescriptor;
    ActionMap actionMap;
    IViewDescriptor viewDescriptor;
    if (viewConnector == tree.getModel().getRoot()) {
      modelDescriptor = treeView.getDescriptor().getModelDescriptor();
      actionMap = treeView.getDescriptor().getActions();
      viewDescriptor = treeView.getDescriptor();
    } else {
      viewDescriptor = TreeDescriptorHelper.getSubtreeDescriptorFromPath(
          ((ITreeViewDescriptor) treeView.getDescriptor())
              .getRootSubtreeDescriptor(),
          getDescriptorPathFromConnectorTreePath(path))
          .getNodeGroupDescriptor();
      modelDescriptor = viewDescriptor.getModelDescriptor();
      actionMap = viewDescriptor.getActions();
      if (!(viewConnector instanceof ICollectionConnector)) {
        viewConnector = viewConnector.getParentConnector();
      }
    }

    if (actionMap == null) {
      return null;
    }

    return createULCPopupMenu(tree, actionMap, modelDescriptor, viewDescriptor,
        viewConnector, actionHandler, locale);
!!!332423.java!!!	getConnectorIdForComponentView(inout viewDescriptor : IComponentViewDescriptor) : String

    if (viewDescriptor.getModelDescriptor() instanceof IComponentDescriptor) {
      return ModelRefPropertyConnector.THIS_PROPERTY;
    }
    return viewDescriptor.getModelDescriptor().getName();
!!!332551.java!!!	getDateTemplateValue(inout propertyDescriptor : IDatePropertyDescriptor) : Object

    return TEMPLATE_DATE;
!!!332679.java!!!	getDecimalTemplateValue(inout propertyDescriptor : IDecimalPropertyDescriptor) : Object

    double templateValue = DEF_DISP_MAX_VALUE;
    if (propertyDescriptor.getMaxValue() != null) {
      templateValue = propertyDescriptor.getMaxValue().doubleValue();
    }
    int maxFractionDigit = DEF_DISP_MAX_FRACTION_DIGIT;
    if (propertyDescriptor.getMaxFractionDigit() != null) {
      maxFractionDigit = propertyDescriptor.getMaxFractionDigit().intValue();
    }
    double decimalPart = 0;
    for (int i = 0; i < maxFractionDigit; i++) {
      decimalPart += Math.pow(10.0D, -i);
    }
    templateValue += decimalPart;
    return new Double(templateValue);
!!!332807.java!!!	getDescriptorPathFromConnectorTreePath(inout connectorTreePath : TreePath) : List<String>

    List<String> descriptorPath = new ArrayList<String>();
    if (connectorTreePath != null) {
      Object[] connectors = connectorTreePath.getPath();
      for (Object connector : connectors) {
        if (connector instanceof ICollectionConnectorProvider) {
          descriptorPath.add(((IValueConnector) connector).getId());
        }
      }
    }
    return descriptorPath;
!!!332935.java!!!	getDurationTemplateValue(inout propertyDescriptor : IDurationPropertyDescriptor) : Object

    return TEMPLATE_DURATION;
!!!333063.java!!!	getEnumerationTemplateValue(inout descriptor : IEnumerationPropertyDescriptor, inout locale : Locale) : String

    int maxTranslationLength = -1;
    if (translationProvider != null && descriptor.isTranslated()) {
      for (Object enumerationValue : descriptor.getEnumerationValues()) {
        String translation = translationProvider.getTranslation(
            computeEnumerationKey(descriptor.getEnumerationName(),
                enumerationValue), locale);
        if (translation.length() > maxTranslationLength) {
          maxTranslationLength = translation.length();
        }
      }
    } else {
      maxTranslationLength = descriptor.getMaxLength().intValue();
    }
    if (maxTranslationLength == -1 || maxTranslationLength > maxCharacterLength) {
      maxTranslationLength = maxCharacterLength;
    }
    return getStringTemplateValue(new Integer(maxTranslationLength));
!!!333191.java!!!	getFormatLength(inout formatter : IFormatter, inout templateValue : Object) : int

    int formatLength;
    if (formatter != null) {
      formatLength = formatter.format(templateValue).length();
    } else {
      if (templateValue != null) {
        formatLength = templateValue.toString().length();
      } else {
        formatLength = maxCharacterLength;
      }
    }
    return formatLength;
!!!333319.java!!!	getIntegerTemplateValue(inout propertyDescriptor : IIntegerPropertyDescriptor) : Object

    double templateValue = DEF_DISP_MAX_VALUE;
    if (propertyDescriptor.getMaxValue() != null) {
      templateValue = propertyDescriptor.getMaxValue().doubleValue();
    }
    return new Integer((int) templateValue);
!!!333447.java!!!	getPercentTemplateValue(inout propertyDescriptor : IPercentPropertyDescriptor) : Object

    double templateValue = DEF_DISP_TEMPLATE_PERCENT;
    if (propertyDescriptor.getMaxValue() != null) {
      templateValue = propertyDescriptor.getMaxValue().doubleValue();
    }
    int maxFractionDigit = DEF_DISP_MAX_FRACTION_DIGIT;
    if (propertyDescriptor.getMaxFractionDigit() != null) {
      maxFractionDigit = propertyDescriptor.getMaxFractionDigit().intValue();
    }
    double decimalPart = 0;
    for (int i = 0; i < maxFractionDigit; i++) {
      decimalPart += Math.pow(10.0D, -i);
    }
    templateValue += decimalPart;
    return new Double(templateValue / 100.0D);
!!!333575.java!!!	getStringTemplateValue(inout maxLength : Integer) : String

    StringBuffer templateValue = new StringBuffer();
    int fieldLength = maxCharacterLength;
    if (maxLength != null) {
      fieldLength = maxLength.intValue();
    }
    for (int i = 0; i < fieldLength; i++) {
      templateValue.append(TEMPLATE_CHAR);
    }
    return templateValue.toString();
!!!333703.java!!!	getStringTemplateValue(inout propertyDescriptor : IStringPropertyDescriptor) : String

    return getStringTemplateValue(propertyDescriptor.getMaxLength());
!!!333831.java!!!	getTemplateValue(inout propertyDescriptor : IPropertyDescriptor) : Object

    if (propertyDescriptor instanceof IDatePropertyDescriptor) {
      return getDateTemplateValue((IDatePropertyDescriptor) propertyDescriptor);
    } else if (propertyDescriptor instanceof ITimePropertyDescriptor) {
      return getTimeTemplateValue((ITimePropertyDescriptor) propertyDescriptor);
    } else if (propertyDescriptor instanceof IDurationPropertyDescriptor) {
      return getDurationTemplateValue((IDurationPropertyDescriptor) propertyDescriptor);
    } else if (propertyDescriptor instanceof IStringPropertyDescriptor) {
      return getStringTemplateValue((IStringPropertyDescriptor) propertyDescriptor);
    } else if (propertyDescriptor instanceof IDecimalPropertyDescriptor) {
      return getDecimalTemplateValue((IDecimalPropertyDescriptor) propertyDescriptor);
    } else if (propertyDescriptor instanceof IPercentPropertyDescriptor) {
      return getPercentTemplateValue((IPercentPropertyDescriptor) propertyDescriptor);
    } else if (propertyDescriptor instanceof IIntegerPropertyDescriptor) {
      return getIntegerTemplateValue((IIntegerPropertyDescriptor) propertyDescriptor);
    } else if (propertyDescriptor instanceof IReferencePropertyDescriptor) {
      return getTemplateValue(((IReferencePropertyDescriptor<?>) propertyDescriptor)
          .getReferencedDescriptor().getPropertyDescriptor(
              ((IReferencePropertyDescriptor<?>) propertyDescriptor)
                  .getReferencedDescriptor().getToStringProperty()));
    }
    return null;
!!!333959.java!!!	getTimeTemplateValue(inout propertyDescriptor : ITimePropertyDescriptor) : Object

    return TEMPLATE_TIME;
