class DefaultSwingController
!!!353031.java!!!	execute(inout action : IAction, inout context : Map<String, Object>) : boolean

    if (action == null) {
      return true;
    }
    JComponent sourceComponent = (JComponent) context
        .get(ActionContextConstants.SOURCE_COMPONENT);
    Component windowOrInternalFrame = null;
    if (sourceComponent != null) {
      windowOrInternalFrame = SwingUtil
          .getWindowOrInternalFrame(sourceComponent);
    }
    if (windowOrInternalFrame instanceof JFrame) {
      ((JFrame) windowOrInternalFrame).getGlassPane().setVisible(true);
    } else if (windowOrInternalFrame instanceof JInternalFrame) {
      ((JInternalFrame) windowOrInternalFrame).getGlassPane().setVisible(true);
    } else if (windowOrInternalFrame instanceof JDialog) {
      ((JDialog) windowOrInternalFrame).getGlassPane().setVisible(true);
    }
    waitTimer.startTimer(sourceComponent);
    try {
      return super.execute(action, context);
    } finally {
      if (windowOrInternalFrame instanceof JFrame) {
        ((JFrame) windowOrInternalFrame).getGlassPane().setVisible(false);
      } else if (windowOrInternalFrame instanceof JInternalFrame) {
        ((JInternalFrame) windowOrInternalFrame).getGlassPane().setVisible(
            false);
      } else if (windowOrInternalFrame instanceof JDialog) {
        ((JDialog) windowOrInternalFrame).getGlassPane().setVisible(false);
      }
      waitTimer.stopTimer();
    }
!!!353159.java!!!	handleException(inout ex : Throwable, inout context : Map<String, Object>) : void

    Component sourceComponent = controllerFrame;
    if (ex instanceof SecurityException) {
      JOptionPane.showMessageDialog(sourceComponent, HtmlHelper.emphasis(ex
          .getMessage()), getTranslationProvider().getTranslation("error",
          getLocale()), JOptionPane.ERROR_MESSAGE, getIconFactory()
          .getErrorIcon(IIconFactory.LARGE_ICON_SIZE));
    } else if (ex instanceof BusinessException) {
      JOptionPane.showMessageDialog(sourceComponent, HtmlHelper
          .emphasis(((BusinessException) ex).getI18nMessage(
              getTranslationProvider(), getLocale())), getTranslationProvider()
          .getTranslation("error", getLocale()), JOptionPane.ERROR_MESSAGE,
          getIconFactory().getErrorIcon(IIconFactory.LARGE_ICON_SIZE));
    } else if (ex instanceof ConcurrencyFailureException) {
      JOptionPane.showMessageDialog(sourceComponent, HtmlHelper
          .emphasis(getTranslationProvider().getTranslation(
              "concurrency.error.description", getLocale())),
          getTranslationProvider().getTranslation("error", getLocale()),
          JOptionPane.ERROR_MESSAGE, getIconFactory().getErrorIcon(
              IIconFactory.LARGE_ICON_SIZE));
    } else {
      ex.printStackTrace();
      JErrorDialog dialog = JErrorDialog.createInstance(sourceComponent,
          getTranslationProvider(), getLocale());
      dialog.setMessageIcon(getIconFactory().getErrorIcon(
          IIconFactory.MEDIUM_ICON_SIZE));
      dialog.setTitle(getTranslationProvider().getTranslation("error",
          getLocale()));
      dialog.setMessage(HtmlHelper.emphasis(ex.getLocalizedMessage()));
      dialog.setDetails(ex);
      int screenRes = Toolkit.getDefaultToolkit().getScreenResolution();
      dialog.setSize(8 * screenRes, 3 * screenRes);
      dialog.pack();
      SwingUtil.centerOnScreen(dialog);
      dialog.setVisible(true);
    }
!!!353287.java!!!	start(inout backendController : IBackendController, inout locale : Locale) : boolean

    if (super.start(backendController, locale)) {
      Toolkit.getDefaultToolkit().getSystemEventQueue().push(
          new WaitCursorEventQueue(500));
      CallbackHandler callbackHandler = getLoginCallbackHandler();
      if (callbackHandler instanceof DialogCallbackHandler) {
        ((DialogCallbackHandler) callbackHandler)
            .setParentComponent(controllerFrame);
      }
      if (performLogin()) {
        displayControllerFrame();
        execute(getStartupAction(), getInitialActionContext());
        return true;
      }
      stop();
    }
    return false;
!!!353415.java!!!	stop() : boolean

    if (super.stop()) {
      if (controllerFrame != null) {
        controllerFrame.dispose();
      }
      System.exit(0);
      return true;
    }
    return false;
!!!353543.java!!!	createLoginCallbackHandler() : CallbackHandler

    DialogCallbackHandler callbackHandler = new DialogCallbackHandler();
    callbackHandler.setLocale(getLocale());
    callbackHandler.setTranslationProvider(getTranslationProvider());
    callbackHandler.setIconFactory(getIconFactory());
    return callbackHandler;
!!!353671.java!!!	displayModule(in moduleName : String) : void

    if (moduleInternalFrames == null) {
      moduleInternalFrames = new HashMap<String, JInternalFrame>();
    }
    JInternalFrame moduleInternalFrame = moduleInternalFrames.get(moduleName);
    if (moduleInternalFrame == null) {
      IViewDescriptor moduleViewDescriptor = getModule(moduleName)
          .getViewDescriptor();
      IValueConnector moduleConnector = getBackendController()
          .getModuleConnector(moduleName);
      IView<JComponent> moduleView = createModuleView(moduleName,
          moduleViewDescriptor, (Module) moduleConnector.getConnectorValue());
      moduleInternalFrame = createJInternalFrame(moduleView);
      moduleInternalFrame
          .setFrameIcon(getIconFactory().getIcon(
              moduleViewDescriptor.getIconImageURL(),
              IIconFactory.SMALL_ICON_SIZE));
      moduleInternalFrame
          .addInternalFrameListener(new ModuleInternalFrameListener(moduleName));
      moduleInternalFrames.put(moduleName, moduleInternalFrame);
      controllerFrame.getContentPane().add(moduleInternalFrame);
      getMvcBinder().bind(moduleView.getConnector(), moduleConnector);
      moduleInternalFrame.pack();
      moduleInternalFrame.setSize(controllerFrame.getSize());
    }
    moduleInternalFrame.setVisible(true);
    if (moduleInternalFrame.isIcon()) {
      try {
        moduleInternalFrame.setIcon(false);
      } catch (PropertyVetoException ex) {
        throw new ControllerException(ex);
      }
    }
    try {
      moduleInternalFrame.setMaximum(true);
    } catch (PropertyVetoException ex) {
      throw new ControllerException(ex);
    }
    setSelectedModuleName(moduleName);
    moduleInternalFrame.toFront();
    super.displayModule(moduleName);
!!!353799.java!!!	executeBackend(in action : IAction, in context : Map<String, Object>) : boolean

    if (action.isLongOperation()) {
      Boolean success = (Boolean) SwingUtil.performLongOperation(new Job() {

        /**
         * Decorates the super implementation with the foxtrot job.
         * <p>
         * {@inheritDoc}
         */
        @Override
        public Object run() {
          return new Boolean(protectedExecuteBackend(action, context));
        }
      });
      return success.booleanValue();
    }
    return protectedExecuteBackend(action, context);
!!!353927.java!!!	executeFrontend(in action : IAction, in context : Map<String, Object>) : boolean

    return protectedExecuteFrontend(action, context);
!!!354055.java!!!	setSelectedModuleName(in moduleName : String) : void

    super.setSelectedModuleName(moduleName);
    updateFrameTitle();
!!!354183.java!!!	createActionMenu(inout actionList : ActionList) : JMenu

    JMenu menu = new JMenu(actionList.getI18nName(getTranslationProvider(),
        getLocale()));
    if (actionList.getDescription() != null) {
      menu.setToolTipText(actionList.getI18nDescription(
          getTranslationProvider(), getLocale())
          + IActionFactory.TOOLTIP_ELLIPSIS);
    }
    menu.setIcon(getIconFactory().getIcon(actionList.getIconImageURL(),
        IIconFactory.SMALL_ICON_SIZE));
    for (IDisplayableAction action : actionList.getActions()) {
      menu.add(new JMenuItem(getViewFactory().getActionFactory().createAction(
          action, this, menu, null, null, getLocale())));
    }
    return menu;
!!!354311.java!!!	createActionMenus() : List<JMenu>

    return createMenus(getActions());
!!!354439.java!!!	createHelpActionMenus() : List<JMenu>

    return createMenus(getHelpActions());
!!!354567.java!!!	createMenus(inout actionMap : ActionMap) : List<JMenu>

    List<JMenu> menus = new ArrayList<JMenu>();
    if (actionMap != null) {
      for (ActionList actionList : actionMap.getActionLists()) {
        JMenu menu = createActionMenu(actionList);
        menus.add(menu);
      }
    }
    return menus;
!!!354695.java!!!	createApplicationMenuBar() : JMenuBar

    JMenuBar applicationMenuBar = new JMenuBar();
    applicationMenuBar.add(createModulesMenu());
    List<JMenu> actionMenus = createActionMenus();
    if (actionMenus != null) {
      for (JMenu actionMenu : actionMenus) {
        applicationMenuBar.add(actionMenu);
      }
    }
    applicationMenuBar.add(Box.createHorizontalGlue());
    List<JMenu> helpActionMenus = createHelpActionMenus();
    if (helpActionMenus != null) {
      for (JMenu helpActionMenu : helpActionMenus) {
        applicationMenuBar.add(helpActionMenu);
      }
    }
    return applicationMenuBar;
!!!354823.java!!!	createControllerFrame() : JFrame

    JFrame frame = new JFrame();
    frame.setContentPane(new JDesktopPane());
    frame.setIconImage(((ImageIcon) getIconFactory().getIcon(getIconImageURL(),
        IIconFactory.SMALL_ICON_SIZE)).getImage());
    frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
    frame.setJMenuBar(createApplicationMenuBar());
    frame.setGlassPane(createHermeticGlassPane());
    frame.addWindowListener(new WindowAdapter() {

      /**
       * {@inheritDoc}
       */
      @Override
      public void windowClosing(@SuppressWarnings("unused")
      WindowEvent e) {
        stop();
      }
    });
    return frame;
!!!354951.java!!!	createHermeticGlassPane() : JComponent

    JPanel glassPane = new JPanel();
    glassPane.setOpaque(false);
    glassPane.addMouseListener(new MouseAdapter() {
      // No-op
    });
    glassPane.addKeyListener(new KeyAdapter() {
      // No-op
    });
    return glassPane;
!!!355079.java!!!	createJInternalFrame(inout view : IView) : JInternalFrame

    JInternalFrame internalFrame = new JInternalFrame(view.getDescriptor()
        .getI18nName(getTranslationProvider(), getLocale()));
    internalFrame.setResizable(true);
    internalFrame.setClosable(false);
    internalFrame.setMaximizable(true);
    internalFrame.setIconifiable(true);
    internalFrame.getContentPane().add(view.getPeer(), BorderLayout.CENTER);
    internalFrame.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
    internalFrame.setGlassPane(createHermeticGlassPane());
    return internalFrame;
!!!355207.java!!!	createModulesMenu() : JMenu

    JMenu modulesMenu = new JMenu(getTranslationProvider().getTranslation(
        "modules", getLocale()));
    modulesMenu.setIcon(getIconFactory().getIcon(getModulesMenuIconImageUrl(),
        IIconFactory.SMALL_ICON_SIZE));
    for (String moduleName : getModuleNames()) {
      IViewDescriptor moduleViewDescriptor = getModule(moduleName)
          .getViewDescriptor();
      JMenuItem moduleMenuItem = new JMenuItem(new ModuleSelectionAction(
          moduleName, moduleViewDescriptor));
      modulesMenu.add(moduleMenuItem);
    }
    modulesMenu.addSeparator();
    modulesMenu.add(new JMenuItem(new QuitAction()));
    return modulesMenu;
!!!355335.java!!!	displayControllerFrame() : void

    waitTimer = new WaitCursorTimer(500);
    waitTimer.setDaemon(true);
    waitTimer.start();
    controllerFrame = createControllerFrame();
    controllerFrame.pack();
    int screenRes = Toolkit.getDefaultToolkit().getScreenResolution();
    controllerFrame.setSize(12 * screenRes, 8 * screenRes);
    controllerFrame.setSize(1100, 800);
    SwingUtil.centerOnScreen(controllerFrame);
    updateFrameTitle();
    controllerFrame.setVisible(true);
!!!355463.java!!!	performLogin() : boolean

    int i;
    for (i = 0; i < MAX_LOGIN_RETRIES; i++) {
      try {
        LoginContext lc = null;
        try {
          lc = new LoginContext(getLoginContextName(),
              getLoginCallbackHandler());
        } catch (LoginException le) {
          System.err.println("Cannot create LoginContext. " + le.getMessage());
          return false;
        } catch (SecurityException se) {
          System.err.println("Cannot create LoginContext. " + se.getMessage());
          return false;
        }
        lc.login();
        loginSuccess(lc.getSubject());
        break;
      } catch (LoginException le) {
        System.err.println("Authentication failed:");
        System.err.println("  " + le.getMessage());
      }
    }
    if (i == 3) {
      return false;
    }
    return true;
!!!355591.java!!!	protectedExecuteBackend(inout action : IAction, inout context : Map<String, Object>) : boolean

    return super.executeBackend(action, context);
!!!355719.java!!!	protectedExecuteFrontend(inout action : IAction, inout context : Map<String, Object>) : boolean

    return super.executeFrontend(action, context);
!!!355847.java!!!	updateFrameTitle() : void

    String moduleName = getSelectedModuleName();
    if (moduleName != null) {
      controllerFrame.setTitle(getModule(getSelectedModuleName())
          .getViewDescriptor().getI18nDescription(getTranslationProvider(),
              getLocale())
          + " - " + getI18nName(getTranslationProvider(), getLocale()));
    } else {
      controllerFrame.setTitle(getI18nName(getTranslationProvider(),
          getLocale()));
    }
