class AbstractHibernateAction
!!!371335.java!!!	cleanRelationshipsOnDeletion(inout entity : IEntity, inout context : Map<String, Object>) : void

    IComponentDescriptor entityDescriptor = getEntityFactory(context)
        .getComponentDescriptor(entity.getContract());
    for (Map.Entry<String, Object> property : entity.straightGetProperties()
        .entrySet()) {
      if (property.getValue() != null) {
        IPropertyDescriptor propertyDescriptor = entityDescriptor
            .getPropertyDescriptor(property.getKey());
        if (propertyDescriptor instanceof IReferencePropertyDescriptor) {
          getBeanAccessorFactory(context).createPropertyAccessor(property.getKey(),
              entity.getContract()).setValue(entity, null);
        } else if (propertyDescriptor instanceof ICollectionPropertyDescriptor) {
          if (((ICollectionPropertyDescriptor) propertyDescriptor)
              .isComposition()) {
            getApplicationSession(context).initializePropertyIfNeeded(entity,
                propertyDescriptor);
            for (IEntity composedEntity : new ArrayList<IEntity>(
                (Collection<IEntity>) property.getValue())) {
              cleanRelationshipsOnDeletion(composedEntity, context);
            }
          } else if (propertyDescriptor.isModifiable()) {
            getBeanAccessorFactory(context).createPropertyAccessor(
                property.getKey(), entity.getContract()).setValue(entity, null);
          }
        }
      }
    }
    getApplicationSession(context).deleteEntity(entity);
!!!371463.java!!!	getController(inout context : Map<String, Object>) : HibernateBackendController

    return (HibernateBackendController) super.getController(context);
!!!371591.java!!!	getHibernateTemplate(inout context : Map<String, Object>) : HibernateTemplate

    return getController(context).getHibernateTemplate();
!!!371719.java!!!	getTransactionTemplate(inout context : Map<String, Object>) : TransactionTemplate

    return getController(context).getTransactionTemplate();
!!!371847.java!!!	mergeInHibernate(inout entity : IEntity, inout hibernateSession : Session, inout context : Map<String, Object>) : IEntity

    return mergeInHibernate(Collections.singletonList(entity),
        hibernateSession, context).get(0);
!!!371975.java!!!	mergeInHibernate(inout entities : List<IEntity>, inout hibernateSession : Session, inout context : Map<String, Object>) : IEntity

    List<IEntity> mergedEntities = getApplicationSession(context)
        .cloneInUnitOfWork(entities);
    Set<IEntity> alreadyLocked = new HashSet<IEntity>();
    for (IEntity mergedEntity : mergedEntities) {
      lockInHibernate(mergedEntity, hibernateSession, alreadyLocked);
    }
    return mergedEntities;
!!!372103.java!!!	reloadEntity(inout entity : IEntity, inout context : Map<String, Object>) : void

    if (entity.isPersistent()) {
      HibernateTemplate hibernateTemplate = getHibernateTemplate(context);
      getApplicationSession(context).merge(
          (IEntity) hibernateTemplate.load(entity.getContract().getName(),
              entity.getId()), MergeMode.MERGE_CLEAN_EAGER);
    }
!!!372231.java!!!	saveEntity(in entity : IEntity, in context : Map<String, Object>) : void

    getHibernateTemplate(context).execute(new HibernateCallback() {

      public Object doInHibernate(Session session) {
        IEntity mergedEntity = mergeInHibernate(entity, session, context);
        session.saveOrUpdate(mergedEntity);
        session.flush();
        return null;
      }
    });
!!!372359.java!!!	lockInHibernate(inout entity : IEntity, inout hibernateSession : Session, inout alreadyLocked : Set<IEntity>) : void

    if (alreadyLocked.add(entity)) {
      if (entity.isPersistent()) {
        try {
          hibernateSession.lock(entity, LockMode.NONE);
        } catch (Exception ex) {
          ex.printStackTrace();
          hibernateSession.evict(hibernateSession.get(entity.getContract(),
              entity.getId()));
          hibernateSession.lock(entity, LockMode.NONE);
        }
        Map<String, Object> entityProperties = entity.straightGetProperties();
        for (Map.Entry<String, Object> property : entityProperties.entrySet()) {
          if (Hibernate.isInitialized(property.getValue())) {
            if (property.getValue() instanceof IEntity) {
              lockInHibernate((IEntity) property.getValue(), hibernateSession,
                  alreadyLocked);
            } else if (property.getValue() instanceof Collection) {
              for (Iterator<IEntity> ite = ((Collection<IEntity>) property
                  .getValue()).iterator(); ite.hasNext();) {
                lockInHibernate(ite.next(), hibernateSession, alreadyLocked);
              }
            }
          }
        }
      }
    }
