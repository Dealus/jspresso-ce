class RemoveFromModuleObjectsAction
!!!373895.java!!!	removeFromSubModules(inout parentModule : Module, inout removedObject : Object) : void

    if (parentModule.getSubModules() != null) {
      for (SubModule subModule : new ArrayList<SubModule>(parentModule
          .getSubModules())) {
        if (subModule instanceof BeanModule
            && removedObject.equals(((BeanModule) subModule).getModuleObject())) {
          parentModule.removeSubModule(subModule);
        }
      }
    }
!!!374023.java!!!	execute(inout actionHandler : IActionHandler, in context : Map<String, Object>) : boolean

    int[] selectedIndices = getSelectedIndices(context);
    ICollectionConnector collectionConnector = getModelConnector(context);

    if (selectedIndices == null || selectedIndices.length == 0
        || collectionConnector == null) {
      return false;
    }

    ICompositeValueConnector moduleConnector = getModuleConnector(context);
    BeanCollectionModule module = (BeanCollectionModule) moduleConnector
        .getConnectorValue();

    Collection<Object> projectedCollection;
    if (module.getModuleObjects() == null) {
      projectedCollection = new ArrayList<Object>();
    } else {
      projectedCollection = new ArrayList<Object>(module.getModuleObjects());
    }

    final List<IEntity> projectedObjectsToRemove = new ArrayList<IEntity>();
    for (int i = 0; i < selectedIndices.length; i++) {
      projectedObjectsToRemove.add((IEntity) collectionConnector
          .getChildConnector(selectedIndices[i]).getConnectorValue());
    }
    getTransactionTemplate(context).execute(new TransactionCallback() {

      public Object doInTransaction(@SuppressWarnings("unused")
      TransactionStatus status) {
        getHibernateTemplate(context).execute(new HibernateCallback() {

          public Object doInHibernate(Session session) {
            List<IEntity> mergedCollection = mergeInHibernate(
                projectedObjectsToRemove, session, context);
            for (IEntity entityToRemove : mergedCollection) {
              if (entityToRemove.isPersistent()) {
                deleteEntity(entityToRemove, session, context);
              }
            }
            return null;
          }
        });
        return null;
      }
    });
    for (IEntity entityToRemove : projectedObjectsToRemove) {
      projectedCollection.remove(entityToRemove);
      removeFromSubModules(module, entityToRemove);
    }
    module.setModuleObjects(projectedCollection);
    collectionConnector.setConnectorValue(projectedCollection);
    context.put(ActionContextConstants.ACTION_PARAM, projectedObjectsToRemove);
    return super.execute(actionHandler, context);
!!!374151.java!!!	deleteEntity(inout entity : IEntity, inout session : Session, inout context : Map<String, Object>) : void

    session.delete(entity);
