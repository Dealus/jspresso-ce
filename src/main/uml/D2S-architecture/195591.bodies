class UlcJnlpLauncher
!!!382087.java!!!	UlcJnlpLauncher(inout url : URL, in keepAliveInterval : int, inout userParameters : Properties, in splashUrl : String, inout locale : Locale)

    this.url = url;
    this.keepAliveInterval = keepAliveInterval;
    this.userParameters = userParameters;
    this.splashUrl = splashUrl;
    bundle = ResourceBundle.getBundle(getClass().getName(), locale);
    registerMessageHandler(new ClassInvoker());
    registerMessageHandler(new FileExists());
    if (splashUrl != null) {
      registerMessageHandler(new IMessageService() {

        public void handleMessage(String msg) {
          if ("appStarted".equals(msg)) {
            SplashWindow.disposeSplash();
          }
        }
      });
    }

    ClientEnvironmentAdapter.setMessageService(new IMessageService() {

      public void handleMessage(String msg) {
        if (messageHandlers != null) {
          for (IMessageService messageHandler : messageHandlers) {
            messageHandler.handleMessage(msg);
          }
        }
      }
    });
    ClientEnvironmentAdapter.setFileService(new ExtendedFileService());
!!!382215.java!!!	main(in args : String) : void

    SwingUtil.installDefaults();
    String splashUrl = null;
    List<String> filteredArgsBuffer = new ArrayList<String>();
    for (int i = 0; i < args.length; i++) {
      if ("-splash".equals(args[i])) {
        splashUrl = args[i + 1];
        i++;
      } else {
        filteredArgsBuffer.add(args[i]);
      }
    }
    String[] filteredArgs = filteredArgsBuffer
        .toArray(new String[filteredArgsBuffer.size()]);
    if (filteredArgs.length < 2) {
      throw new IllegalArgumentException(
          "JNLP file parameters <urlString> and <keepAliveInterval> are mandatory.\n\n"
              + USAGE_TEXT);
    }

    Properties props = ClientEnvironmentAdapter.getClientInfo()
        .getSystemProperties();
    props.setProperty("java.io.tmpdir", System.getProperty("java.io.tmpdir"));

    String logLevel = getLogLevel(filteredArgs);
    if (logLevel != null) {
      if (LogManager.getLogManager() instanceof SimpleLogManager) {
        SimpleLogManager simpleLogManager = (SimpleLogManager) LogManager
            .getLogManager();
        simpleLogManager.setLevel(Level.parse(logLevel));
      }
    }
    UlcJnlpLauncher launcher = new UlcJnlpLauncher(new URL(
        getUrlString(filteredArgs)), getKeepAliveInterval(filteredArgs),
        getUserParameters(filteredArgs), splashUrl, Locale.getDefault());
    launcher.start();
!!!382343.java!!!	getKeepAliveInterval(in args : String) : int

    try {
      return Integer.parseInt(args[1]);
    } catch (NumberFormatException e) {
      throw new IllegalArgumentException(
          "Parameter <keepAliveInterval> must be an integer.");
    }
!!!382471.java!!!	getLogLevel(in args : String) : String

    if (args.length < 3) {
      return null;
    }

    String result = args[2];
    if (result.startsWith("-")) {
      return null;
    }
    return result;
!!!382599.java!!!	getUrlString(in args : String) : String

    return args[0];
!!!382727.java!!!	getUserParameters(in args : String) : Properties

    Properties result = new Properties();
    for (Iterator<String> i = Arrays.asList(args).iterator(); i.hasNext();) {
      String key = i.next();
      if (key.startsWith("-")) {
        key = key.substring(1);
        if (!i.hasNext()) {
          throw new IllegalArgumentException(
              "User parameters must have format -<key> <value>.");
        }

        result.put(key, i.next());
      }
    }

    return result;
!!!382855.java!!!	createSessionStateListener() : ISessionStateListener

    return new DefaultSessionStateListener() {

      /**
       * {@inheritDoc}
       */
      @Override
      public void sessionError(UISession session, Throwable reason) {
        if (reason instanceof ConnectorException) {
          int answer = JOptionPane.showConfirmDialog(null, bundle
              .getString("error.connection.description"), bundle
              .getString("error.connection"), JOptionPane.OK_CANCEL_OPTION,
              JOptionPane.WARNING_MESSAGE);
          if (answer == JOptionPane.OK_OPTION) {
            start();
          }
          // showMessageDialog(bundle.getString("error"), bundle
          // .getString("error.connection"), bundle
          // .getString("error.connection.description"));
        } else {
          super.sessionError(session, reason);
        }
      }
    };
!!!382983.java!!!	registerMessageHandler(inout messageHandler : IMessageService) : void

    if (messageHandlers == null) {
      messageHandlers = new ArrayList<IMessageService>();
    }
    messageHandlers.add(messageHandler);
!!!383111.java!!!	start() : UISession

    if (splashUrl != null) {
      SplashWindow.splash(UrlHelper.createURL(splashUrl));
    }
    return start(new ServletConnector(new CookieRequestPropertyStore(url), url,
        keepAliveInterval), userParameters);
