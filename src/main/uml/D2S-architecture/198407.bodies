class BeanPropertyChangeRecorder
!!!393223.java!!!	BeanPropertyChangeRecorder()

    this(null);
!!!393351.java!!!	BeanPropertyChangeRecorder(inout interceptor : PropertyChangeListener)

    changedPropertiesMap = new WeakHashMap<IPropertyChangeCapable, Map<String, Object>>();
    enabled = true;
    this.interceptor = interceptor;
!!!393479.java!!!	getChangedProperties(inout bean : IPropertyChangeCapable) : Map<String, Object>

    return changedPropertiesMap.get(bean);
!!!393607.java!!!	isEnabled() : boolean

    return enabled;
!!!393735.java!!!	propertyChange(inout evt : PropertyChangeEvent) : void

    if (enabled) {
      Map<String, Object> changedProperties = changedPropertiesMap.get(evt
          .getSource());
      if (!changedProperties.containsKey(evt.getPropertyName())) {
        changedProperties.put(evt.getPropertyName(), evt.getOldValue());
      }
      if (interceptor != null) {
        interceptor.propertyChange(evt);
      }
    }
!!!393863.java!!!	register(inout bean : IPropertyChangeCapable, inout initialChangedProperties : Map<String, Object>) : void

    if (initialChangedProperties != null) {
      changedPropertiesMap.put(bean, new HashMap<String, Object>(
          initialChangedProperties));
    } else {
      changedPropertiesMap.put(bean, new HashMap<String, Object>());
    }
    bean.addPropertyChangeListener(this);
!!!393991.java!!!	resetChangedProperties(inout bean : IPropertyChangeCapable, inout changedProperties : Map<String, Object>) : void

    Map<String, Object> recordedChangedProperties = changedPropertiesMap
        .get(bean);
    if (recordedChangedProperties != null) {
      recordedChangedProperties.clear();
      if (changedProperties != null) {
        recordedChangedProperties.putAll(changedProperties);
      }
    }
!!!394119.java!!!	setEnabled(inout enabled : boolean) : void

    this.enabled = enabled;
!!!394247.java!!!	unregister(inout bean : IPropertyChangeCapable) : void

    changedPropertiesMap.remove(bean);
