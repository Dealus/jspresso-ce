class PropertyHelper
!!!394887.java!!!	PropertyHelper()

    // Just here to prevent direct instanciation.
!!!395015.java!!!	getPropertyDescriptor(inout beanClass : Class<?>, in property : String) : PropertyDescriptor

    PropertyDescriptor descriptorToReturn = null;
    int nestedDotIndex = property.indexOf('.');
    if (nestedDotIndex > 0) {
      PropertyDescriptor rootDescriptor = getPropertyDescriptor(beanClass,
          property.substring(0, nestedDotIndex));
      descriptorToReturn = getPropertyDescriptor(rootDescriptor
          .getPropertyType(), property.substring(nestedDotIndex + 1));
    } else {
      PropertyDescriptor[] descriptors = PropertyUtils
          .getPropertyDescriptors(beanClass);
      for (PropertyDescriptor descriptor : descriptors) {
        if (property.equals(descriptor.getName())) {
          descriptorToReturn = descriptor;
        }
      }
    }
    if (descriptorToReturn == null
        || descriptorToReturn.getWriteMethod() == null) {
      // If we reach this point, no property with the given name has been found.
      // or the found descriptor is read-only.
      // If beanClass is indeed an interface, we must also deal with all its
      // super-interfaces.
      if (beanClass.isInterface()) {
        for (Class<?> superInterface : beanClass.getInterfaces()) {
          PropertyDescriptor descriptor = null;
          try {
            descriptor = getPropertyDescriptor(superInterface, property);
          } catch (MissingPropertyException ex) {
            // This exception must be ignored until we traverse all the super
            // interfaces.
          }
          if (descriptor != null) {
            if (descriptorToReturn != null) {
              try {
                descriptorToReturn.setWriteMethod(descriptor.getWriteMethod());
              } catch (IntrospectionException ex) {
                throw new MissingPropertyException(ex.getMessage());
              }
            } else {
              descriptorToReturn = descriptor;
            }
          }
        }
      }
    }
    if (descriptorToReturn != null) {
      return descriptorToReturn;
    }
    throw new MissingPropertyException("Missing property " + property
        + " for bean class " + beanClass);
!!!395143.java!!!	getPropertyNames(inout beanClass : Class<?>) : Collection<String>

    Collection<String> propertyNames = new HashSet<String>();
    PropertyDescriptor[] descriptors = PropertyUtils
        .getPropertyDescriptors(beanClass);
    for (PropertyDescriptor descriptor : descriptors) {
      propertyNames.add(descriptor.getName());
    }
    if (beanClass.isInterface()) {
      for (Class<?> superInterface : beanClass.getInterfaces()) {
        propertyNames.addAll(getPropertyNames(superInterface));
      }
    }
    return propertyNames;
!!!395271.java!!!	getPropertyType(inout beanClass : Class<?>, in property : String) : Class<?>

    return getPropertyDescriptor(beanClass, property).getPropertyType();
