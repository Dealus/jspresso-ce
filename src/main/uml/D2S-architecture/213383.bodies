class DevelopmentLoginModule
!!!425095.java!!!	abort() : boolean

    if (!succeeded) {
      Callback[] callbacks = new Callback[1];
      callbacks[0] = new TextOutputCallback(TextOutputCallback.ERROR, bundle
          .getString(LoginUtils.LOGIN_FAILED));
      try {
        callbackHandler.handle(callbacks);
      } catch (IOException ex) {
        // NO-OP.
      } catch (UnsupportedCallbackException ex) {
        // NO-OP.
      }
      return false;
    } else if (succeeded && !commitSucceeded) {
      // login succeeded but overall authentication failed
      succeeded = false;
      username = null;
      if (password != null) {
        for (int i = 0; i < password.length; i++) {
          password[i] = ' ';
        }
        password = null;
      }
      userPrincipal = null;
    } else {
      // overall authentication succeeded and commit succeeded,
      // but someone else's commit failed
      logout();
    }
    return true;
!!!425223.java!!!	commit() : boolean

    if (!succeeded) {
      return false;
    }
    // assume the user we authenticated is the DemoPrincipal
    userPrincipal = new UserPrincipal(username);
    for (Map.Entry<String, ?> option : options.entrySet()) {
      if (option.getKey().startsWith(CUSTOM_PROPERTY_OPT)) {
        userPrincipal.putCustomProperty(option.getKey().substring(
            CUSTOM_PROPERTY_OPT.length()), option.getValue());
      }
    }
    if (!subject.getPrincipals().contains(userPrincipal)) {
      subject.getPrincipals().add(userPrincipal);
    }

    String roles = (String) options.get(ROLES_OPT);
    if (roles != null) {
      Group rolesGroup = new SimpleGroup(SecurityHelper.ROLES_GROUP_NAME);
      String[] rolesArray = roles.split(",");
      for (String role : rolesArray) {
        rolesGroup.addMember(new SimplePrincipal(role));
      }
      subject.getPrincipals().add(rolesGroup);
    }

    // in any case, clean out state
    username = null;
    for (int i = 0; i < password.length; i++) {
      password[i] = ' ';
    }
    password = null;

    commitSucceeded = true;
    return true;
!!!425351.java!!!	initialize(inout aSubject : Subject, inout aCallbackHandler : CallbackHandler, inout aSharedState : Map<String, ?>, inout aOptions : Map<String, ?>) : void


    subject = aSubject;
    callbackHandler = aCallbackHandler;
    options = aOptions;
!!!425479.java!!!	login() : boolean


    // prompt for a user name and password
    if (callbackHandler == null) {
      throw new LoginException("Error: no CallbackHandler available "
          + "to garner authentication information from the user");
    }

    Callback[] callbacks = new Callback[3];
    callbacks[0] = new NameCallback(bundle.getString(LoginUtils.USER));
    callbacks[1] = new PasswordCallback(bundle.getString(LoginUtils.PASSWORD),
        false);
    callbacks[2] = new TextOutputCallback(TextOutputCallback.INFORMATION,
        bundle.getString(LoginUtils.CRED_MESSAGE));

    try {
      callbackHandler.handle(callbacks);
      username = ((NameCallback) callbacks[0]).getName();
      char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword();
      if (tmpPassword == null) {
        // treat a NULL password as an empty password
        tmpPassword = new char[0];
      }
      password = new char[tmpPassword.length];
      System.arraycopy(tmpPassword, 0, password, 0, tmpPassword.length);
      ((PasswordCallback) callbacks[1]).clearPassword();

    } catch (java.io.IOException ioe) {
      throw new LoginException(ioe.toString());
    } catch (UnsupportedCallbackException uce) {
      throw new LoginException("Error: " + uce.getCallback().toString()
          + " not available to garner authentication information "
          + "from the user");
    }

    // verify the username/password
    boolean usernameCorrect = false;
    String moduleUserName = (String) options.get(USER_OPT);
    if (moduleUserName == null || moduleUserName.equals(username)) {
      usernameCorrect = true;
    }
    String modulePassword = (String) options.get(PASSWORD_OPT);
    if (usernameCorrect) {
      if (modulePassword == null) {
        succeeded = true;
      } else {
        if (modulePassword.length() == password.length) {
          succeeded = true;
          for (int i = 0; succeeded && i < modulePassword.length(); i++) {
            if (modulePassword.charAt(i) != password[i]) {
              succeeded = false;
            }
          }
        }
      }
      return true;
    }
    succeeded = false;
    username = null;
    for (int i = 0; i < password.length; i++) {
      password[i] = ' ';
    }
    password = null;
    if (!usernameCorrect) {
      throw new FailedLoginException(bundle.getString(LoginUtils.USER_FAILED));
    }
    throw new FailedLoginException(bundle.getString(LoginUtils.PASSWORD_FAILED));
!!!425607.java!!!	logout() : boolean

    subject.getPrincipals().remove(userPrincipal);
    succeeded = false;
    succeeded = commitSucceeded;
    username = null;
    if (password != null) {
      for (int i = 0; i < password.length; i++) {
        password[i] = ' ';
      }
      password = null;
    }
    userPrincipal = null;
    return true;
